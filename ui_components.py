# -*- coding: utf-8 -*-
"""
Sistema de Interface de Usu√°rio Avan√ßado
Menus din√¢micos, comandos de voz e shortcuts personaliz√°veis
"""

import json
import logging
from typing import Dict, List, Optional, Any, Callable
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
import asyncio

logger = logging.getLogger(__name__)

class DynamicMenuSystem:
    """Sistema de menus din√¢micos baseados no contexto do usu√°rio"""
    
    def __init__(self):
        self.menu_templates = self._load_menu_templates()
        self.user_contexts = {}  # Cache de contextos por usu√°rio
        self.menu_history = {}   # Hist√≥rico de menus por usu√°rio
        
    def _load_menu_templates(self) -> Dict[str, Dict]:
        """Carrega templates de menu predefinidos"""
        return {
            "main_menu": {
                "title": "üé≠ **Bot de Voz e IA - Menu Principal**",
                "description": "Escolha uma funcionalidade:",
                "buttons": [
                    ["üé≠ Clonagem de Voz", "voice_clone"],
                    ["ü§ñ IA e Chat", "ai_chat"],
                    ["üñºÔ∏è Gera√ß√£o de Imagens", "image_gen"],
                    ["üîç Verifica√ß√£o de Vazamentos", "breach_check"],
                    ["‚öôÔ∏è Configura√ß√µes", "settings"],
                    ["üìö Ajuda", "help"]
                ]
            },
            "voice_clone": {
                "title": "üé≠ **Sistema de Clonagem de Voz**",
                "description": "Funcionalidades de voz dispon√≠veis:",
                "buttons": [
                    ["üé§ Gravar √Åudio de Refer√™ncia", "record_reference"],
                    ["üìù Clonar Voz", "clone_voice"],
                    ["üéµ An√°lise de Voz", "voice_analysis"],
                    ["‚öôÔ∏è Configura√ß√µes de Voz", "voice_settings"],
                    ["üìä Hist√≥rico de Clonagens", "voice_history"],
                    ["üîô Voltar ao Menu Principal", "main_menu"]
                ]
            },
            "ai_chat": {
                "title": "ü§ñ **Chat Inteligente com IA**",
                "description": "Interaja com diferentes modelos de IA:",
                "buttons": [
                    ["üí¨ Chat com Gemini", "gemini_chat"],
                    ["üß† An√°lise de C√≥digo", "code_analysis"],
                    ["üìä An√°lise de Dados", "data_analysis"],
                    ["üîç Pesquisa Web", "web_search"],
                    ["üåê Tradu√ß√£o", "translation"],
                    ["üîô Voltar ao Menu Principal", "main_menu"]
                ]
            },
            "image_gen": {
                "title": "üñºÔ∏è **Gera√ß√£o de Imagens com IA**",
                "description": "Crie imagens incr√≠veis:",
                "buttons": [
                    ["üé® Gerar Imagem", "generate_image"],
                    ["üñºÔ∏è Editar Imagem", "edit_image"],
                    ["üì∏ An√°lise de Imagem", "analyze_image"],
                    ["üé≠ Estilos Art√≠sticos", "art_styles"],
                    ["üîô Voltar ao Menu Principal", "main_menu"]
                ]
            },
            "breach_check": {
                "title": "üîç **Verifica√ß√£o de Vazamentos**",
                "description": "Verifique a seguran√ßa dos seus dados:",
                "buttons": [
                    ["üìß Verificar Email", "check_email"],
                    ["üîë Verificar Senha", "check_password"],
                    ["üì± Verificar Telefone", "check_phone"],
                    ["üè¢ Verificar Empresa", "check_company"],
                    ["üìä Relat√≥rio de Seguran√ßa", "security_report"],
                    ["üîô Voltar ao Menu Principal", "main_menu"]
                ]
            },
            "settings": {
                "title": "‚öôÔ∏è **Configura√ß√µes do Bot**",
                "description": "Personalize sua experi√™ncia:",
                "buttons": [
                    ["üéµ Configura√ß√µes de Voz", "voice_settings"],
                    ["ü§ñ Configura√ß√µes de IA", "ai_settings"],
                    ["üîî Notifica√ß√µes", "notifications"],
                    ["üé® Tema da Interface", "theme_settings"],
                    ["üì± Shortcuts Personalizados", "custom_shortcuts"],
                    ["üîô Voltar ao Menu Principal", "main_menu"]
                ]
            },
            "help": {
                "title": "üìö **Central de Ajuda**",
                "description": "Recursos de suporte dispon√≠veis:",
                "buttons": [
                    ["üìñ Tutorial Interativo", "interactive_tutorial"],
                    ["‚ùì FAQ", "faq"],
                    ["üéØ Exemplos Pr√°ticos", "examples"],
                    ["üîß Solu√ß√£o de Problemas", "troubleshooting"],
                    ["üìû Suporte T√©cnico", "support"],
                    ["üîô Voltar ao Menu Principal", "main_menu"]
                ]
            }
        }
    
    def get_dynamic_menu(self, user_id: int, context_name: str, user_data: Dict = None) -> Dict[str, Any]:
        """Gera menu din√¢mico baseado no contexto do usu√°rio"""
        try:
            # Obter template base
            template = self.menu_templates.get(context_name, self.menu_templates["main_menu"])
            
            # Personalizar baseado no contexto do usu√°rio
            personalized_menu = self._personalize_menu(template, user_id, user_data)
            
            # Atualizar hist√≥rico
            self._update_menu_history(user_id, context_name)
            
            return personalized_menu
            
        except Exception as e:
            logger.error(f"Erro ao gerar menu din√¢mico: {e}")
            return self.menu_templates["main_menu"]
    
    def _personalize_menu(self, template: Dict, user_id: int, user_data: Dict = None) -> Dict:
        """Personaliza menu baseado nos dados do usu√°rio"""
        try:
            personalized = template.copy()
            
            # Adicionar informa√ß√µes personalizadas
            if user_data:
                # Mostrar estat√≠sticas do usu√°rio
                if 'voice_clones_count' in user_data:
                    personalized["description"] += f"\n\nüìä **Suas Estat√≠sticas:**\n‚Ä¢ Clonagens realizadas: {user_data['voice_clones_count']}"
                
                if 'preferred_voice_gender' in user_data:
                    personalized["description"] += f"\n‚Ä¢ Voz preferida: {user_data['preferred_voice_gender']}"
                
                if 'ai_chat_count' in user_data:
                    personalized["description"] += f"\n‚Ä¢ Conversas com IA: {user_data['ai_chat_count']}"
            
            # Adicionar bot√µes contextuais
            contextual_buttons = self._get_contextual_buttons(user_id, template.get("name", ""))
            if contextual_buttons:
                personalized["buttons"].extend(contextual_buttons)
            
            return personalized
            
        except Exception as e:
            logger.error(f"Erro ao personalizar menu: {e}")
            return template
    
    def _get_contextual_buttons(self, user_id: int, menu_name: str) -> List[List[str]]:
        """Adiciona bot√µes contextuais baseados no comportamento do usu√°rio"""
        contextual_buttons = []
        
        try:
            user_context = self.user_contexts.get(user_id, {})
            
            # Bot√µes para usu√°rios frequentes
            if user_context.get('usage_frequency', 0) > 10:
                if menu_name == "voice_clone":
                    contextual_buttons.append(["‚≠ê Favoritos", "voice_favorites"])
                    contextual_buttons.append(["üöÄ Modo R√°pido", "quick_mode"])
            
            # Bot√µes para usu√°rios novos
            if user_context.get('is_new_user', True):
                contextual_buttons.append(["üéì Tour Interativo", "interactive_tour"])
                contextual_buttons.append(["üí° Dicas", "tips"])
            
            # Bot√µes para usu√°rios premium (se implementado)
            if user_context.get('is_premium', False):
                contextual_buttons.append(["üíé Recursos Premium", "premium_features"])
            
            return contextual_buttons
            
        except Exception as e:
            logger.error(f"Erro ao gerar bot√µes contextuais: {e}")
            return []
    
    def _update_menu_history(self, user_id: int, menu_name: str):
        """Atualiza hist√≥rico de menus do usu√°rio"""
        try:
            if user_id not in self.menu_history:
                self.menu_history[user_id] = []
            
            # Adicionar menu atual ao hist√≥rico
            self.menu_history[user_id].append({
                'menu': menu_name,
                'timestamp': datetime.now(),
                'action': 'accessed'
            })
            
            # Manter apenas os √∫ltimos 10 menus
            if len(self.menu_history[user_id]) > 10:
                self.menu_history[user_id] = self.menu_history[user_id][-10:]
                
        except Exception as e:
            logger.error(f"Erro ao atualizar hist√≥rico de menus: {e}")

class VoiceCommandSystem:
    """Sistema de comandos de voz para controle do bot"""
    
    def __init__(self):
        self.voice_commands = self._load_voice_commands()
        self.command_patterns = self._load_command_patterns()
        self.user_voice_preferences = {}
        
    def _load_voice_commands(self) -> Dict[str, Dict]:
        """Carrega comandos de voz dispon√≠veis"""
        return {
            "clonar_voz": {
                "keywords": ["clonar", "voz", "imitar", "copiar", "reproduzir"],
                "description": "Clona a voz do usu√°rio",
                "action": "voice_clone",
                "examples": ["clonar minha voz", "imitar voz", "copiar voz"]
            },
            "gerar_imagem": {
                "keywords": ["gerar", "imagem", "criar", "desenhar", "fazer"],
                "description": "Gera imagem com IA",
                "action": "image_generation",
                "examples": ["gerar imagem", "criar desenho", "fazer foto"]
            },
            "chat_ia": {
                "keywords": ["chat", "conversar", "perguntar", "ajuda", "assistente"],
                "description": "Inicia chat com IA",
                "action": "ai_chat",
                "examples": ["quero conversar", "preciso de ajuda", "perguntar algo"]
            },
            "verificar_seguranca": {
                "keywords": ["verificar", "seguran√ßa", "vazamento", "proteger", "checar"],
                "description": "Verifica seguran√ßa de dados",
                "action": "security_check",
                "examples": ["verificar seguran√ßa", "checar vazamento", "proteger dados"]
            },
            "configuracoes": {
                "keywords": ["configurar", "ajustar", "personalizar", "prefer√™ncias", "configura√ß√µes"],
                "description": "Abre configura√ß√µes",
                "action": "settings",
                "examples": ["abrir configura√ß√µes", "ajustar prefer√™ncias", "personalizar bot"]
            },
            "ajuda": {
                "keywords": ["ajuda", "socorro", "como usar", "tutorial", "guia"],
                "description": "Mostra ajuda",
                "action": "help",
                "examples": ["preciso de ajuda", "como usar", "mostrar tutorial"]
            }
        }
    
    def _load_command_patterns(self) -> Dict[str, List[str]]:
        """Carrega padr√µes de reconhecimento de voz"""
        return {
            "greeting": [
                "ol√°", "oi", "bom dia", "boa tarde", "boa noite",
                "hello", "hi", "good morning", "good afternoon", "good evening"
            ],
            "farewell": [
                "tchau", "at√© logo", "at√© mais", "adeus", "sair",
                "bye", "goodbye", "see you", "farewell"
            ],
            "confirmation": [
                "sim", "claro", "certo", "ok", "perfeito", "excelente",
                "yes", "sure", "okay", "perfect", "excellent"
            ],
            "negation": [
                "n√£o", "nada", "cancelar", "parar", "desistir",
                "no", "not", "cancel", "stop", "quit"
            ]
        }
    
    def process_voice_command(self, audio_text: str, user_id: int) -> Dict[str, Any]:
        """Processa comando de voz e retorna a√ß√£o correspondente"""
        try:
            audio_text_lower = audio_text.lower().strip()
            
            # Verificar padr√µes especiais
            if self._is_greeting(audio_text_lower):
                return {
                    "action": "greeting",
                    "response": "Ol√°! Como posso ajud√°-lo hoje?",
                    "menu": "main_menu"
                }
            
            if self._is_farewell(audio_text_lower):
                return {
                    "action": "farewell",
                    "response": "At√© logo! Foi um prazer ajud√°-lo!",
                    "menu": None
                }
            
            # Buscar comando correspondente
            for command_name, command_info in self.voice_commands.items():
                if self._matches_command(audio_text_lower, command_info):
                    return {
                        "action": command_info["action"],
                        "response": f"Executando: {command_info['description']}",
                        "menu": command_info.get("menu", "main_menu"),
                        "command": command_name
                    }
            
            # Comando n√£o reconhecido
            return {
                "action": "unknown",
                "response": "Desculpe, n√£o entendi esse comando. Pode repetir?",
                "menu": "help",
                "suggestions": self._get_command_suggestions(audio_text_lower)
            }
            
        except Exception as e:
            logger.error(f"Erro ao processar comando de voz: {e}")
            return {
                "action": "error",
                "response": "Ocorreu um erro ao processar seu comando. Tente novamente.",
                "menu": "help"
            }
    
    def _is_greeting(self, text: str) -> bool:
        """Verifica se √© uma sauda√ß√£o"""
        return any(greeting in text for greeting in self.command_patterns["greeting"])
    
    def _is_farewell(self, text: str) -> bool:
        """Verifica se √© uma despedida"""
        return any(farewell in text for farewell in self.command_patterns["farewell"])
    
    def _matches_command(self, text: str, command_info: Dict) -> bool:
        """Verifica se o texto corresponde ao comando"""
        keywords = command_info["keywords"]
        return any(keyword in text for keyword in keywords)
    
    def _get_command_suggestions(self, text: str) -> List[str]:
        """Retorna sugest√µes de comandos baseadas no texto"""
        suggestions = []
        
        # Buscar comandos similares
        for command_name, command_info in self.voice_commands.items():
            for keyword in command_info["keywords"]:
                if keyword in text or any(word in keyword for word in text.split()):
                    suggestions.extend(command_info["examples"])
                    break
        
        # Retornar at√© 3 sugest√µes √∫nicas
        return list(set(suggestions))[:3]

class CustomShortcutsSystem:
    """Sistema de shortcuts personaliz√°veis para o usu√°rio"""
    
    def __init__(self):
        self.user_shortcuts = {}
        self.default_shortcuts = self._load_default_shortcuts()
        
    def _load_default_shortcuts(self) -> Dict[str, Dict]:
        """Carrega shortcuts padr√£o"""
        return {
            "voz": {
                "command": "/clonar_voz",
                "description": "Clonagem r√°pida de voz",
                "category": "voice"
            },
            "imagem": {
                "command": "/gerar_imagem",
                "description": "Gera√ß√£o r√°pida de imagem",
                "category": "image"
            },
            "chat": {
                "command": "/chat",
                "description": "Chat r√°pido com IA",
                "category": "ai"
            },
            "seguranca": {
                "command": "/verificar_vazamento",
                "description": "Verifica√ß√£o r√°pida de seguran√ßa",
                "category": "security"
            },
            "ajuda": {
                "command": "/ajuda",
                "description": "Ajuda r√°pida",
                "category": "help"
            }
        }
    
    def add_user_shortcut(self, user_id: int, shortcut_name: str, command: str, description: str = ""):
        """Adiciona shortcut personalizado para o usu√°rio"""
        try:
            if user_id not in self.user_shortcuts:
                self.user_shortcuts[user_id] = {}
            
            self.user_shortcuts[user_id][shortcut_name] = {
                "command": command,
                "description": description or f"Shortcut para {command}",
                "created_at": datetime.now().isoformat(),
                "usage_count": 0
            }
            
            logger.info(f"Shortcut '{shortcut_name}' adicionado para usu√°rio {user_id}")
            
        except Exception as e:
            logger.error(f"Erro ao adicionar shortcut: {e}")
    
    def remove_user_shortcut(self, user_id: int, shortcut_name: str) -> bool:
        """Remove shortcut personalizado do usu√°rio"""
        try:
            if user_id in self.user_shortcuts and shortcut_name in self.user_shortcuts[user_id]:
                del self.user_shortcuts[user_id][shortcut_name]
                logger.info(f"Shortcut '{shortcut_name}' removido para usu√°rio {user_id}")
                return True
            return False
            
        except Exception as e:
            logger.error(f"Erro ao remover shortcut: {e}")
            return False
    
    def get_user_shortcuts(self, user_id: int) -> Dict[str, Dict]:
        """Retorna todos os shortcuts do usu√°rio"""
        try:
            user_shortcuts = self.user_shortcuts.get(user_id, {})
            
            # Combinar com shortcuts padr√£o
            all_shortcuts = self.default_shortcuts.copy()
            all_shortcuts.update(user_shortcuts)
            
            return all_shortcuts
            
        except Exception as e:
            logger.error(f"Erro ao obter shortcuts: {e}")
            return self.default_shortcuts.copy()
    
    def increment_usage(self, user_id: int, shortcut_name: str):
        """Incrementa contador de uso do shortcut"""
        try:
            if user_id in self.user_shortcuts and shortcut_name in self.user_shortcuts[user_id]:
                self.user_shortcuts[user_id][shortcut_name]["usage_count"] += 1
                
        except Exception as e:
            logger.error(f"Erro ao incrementar uso: {e}")

class InteractiveTourSystem:
    """Sistema de tour interativo para novos usu√°rios"""
    
    def __init__(self):
        self.tour_steps = self._load_tour_steps()
        self.user_tour_progress = {}
        
    def _load_tour_steps(self) -> List[Dict[str, Any]]:
        """Carrega passos do tour interativo"""
        return [
            {
                "step": 1,
                "title": "üé≠ **Bem-vindo ao Bot de Voz e IA!**",
                "description": "Vou te guiar pelas principais funcionalidades em apenas alguns passos.",
                "action": "show_welcome",
                "buttons": [["üëâ Come√ßar Tour", "tour_next"]]
            },
            {
                "step": 2,
                "title": "üé§ **Clonagem de Voz**",
                "description": "Grave um √°udio de refer√™ncia e clone sua voz para qualquer texto!",
                "action": "show_voice_clone",
                "buttons": [
                    ["üé§ Testar Agora", "test_voice_clone"],
                    ["üëâ Pr√≥ximo", "tour_next"]
                ]
            },
            {
                "step": 3,
                "title": "ü§ñ **Chat Inteligente**",
                "description": "Converse com IA avan√ßada para an√°lises, c√≥digos e muito mais!",
                "action": "show_ai_chat",
                "buttons": [
                    ["üí¨ Testar Chat", "test_ai_chat"],
                    ["üëâ Pr√≥ximo", "tour_next"]
                ]
            },
            {
                "step": 4,
                "title": "üñºÔ∏è **Gera√ß√£o de Imagens**",
                "description": "Crie imagens incr√≠veis apenas descrevendo o que deseja!",
                "action": "show_image_gen",
                "buttons": [
                    ["üé® Testar Gera√ß√£o", "test_image_gen"],
                    ["üëâ Pr√≥ximo", "tour_next"]
                ]
            },
            {
                "step": 5,
                "title": "üîç **Verifica√ß√£o de Seguran√ßa**",
                "description": "Verifique se seus dados foram comprometidos em vazamentos!",
                "action": "show_security",
                "buttons": [
                    ["üîç Testar Verifica√ß√£o", "test_security"],
                    ["üëâ Pr√≥ximo", "tour_next"]
                ]
            },
            {
                "step": 6,
                "title": "üéâ **Tour Conclu√≠do!**",
                "description": "Parab√©ns! Agora voc√™ conhece todas as funcionalidades principais.",
                "action": "show_completion",
                "buttons": [
                    ["üöÄ Come√ßar a Usar", "start_using"],
                    ["üìö Ver Mais Ajuda", "more_help"]
                ]
            }
        ]
    
    def start_tour(self, user_id: int) -> Dict[str, Any]:
        """Inicia tour para o usu√°rio"""
        try:
            self.user_tour_progress[user_id] = {
                "current_step": 1,
                "started_at": datetime.now(),
                "completed_steps": []
            }
            
            return self.get_tour_step(user_id, 1)
            
        except Exception as e:
            logger.error(f"Erro ao iniciar tour: {e}")
            return None
    
    def get_tour_step(self, user_id: int, step: int) -> Dict[str, Any]:
        """Retorna passo espec√≠fico do tour"""
        try:
            if step <= 0 or step > len(self.tour_steps):
                return None
            
            tour_step = self.tour_steps[step - 1]
            
            # Personalizar baseado no usu√°rio
            if step == 1:
                tour_step["description"] += f"\n\nüë§ **Usu√°rio:** {user_id}"
            
            return tour_step
            
        except Exception as e:
            logger.error(f"Erro ao obter passo do tour: {e}")
            return None
    
    def next_tour_step(self, user_id: int) -> Dict[str, Any]:
        """Avan√ßa para o pr√≥ximo passo do tour"""
        try:
            if user_id not in self.user_tour_progress:
                return None
            
            progress = self.user_tour_progress[user_id]
            current_step = progress["current_step"]
            
            # Marcar passo atual como completo
            if current_step not in progress["completed_steps"]:
                progress["completed_steps"].append(current_step)
            
            # Avan√ßar para pr√≥ximo passo
            next_step = current_step + 1
            if next_step <= len(self.tour_steps):
                progress["current_step"] = next_step
                return self.get_tour_step(user_id, next_step)
            else:
                # Tour conclu√≠do
                progress["completed_at"] = datetime.now()
                return self.get_tour_step(user_id, len(self.tour_steps))
                
        except Exception as e:
            logger.error(f"Erro ao avan√ßar tour: {e}")
            return None
    
    def get_tour_progress(self, user_id: int) -> Dict[str, Any]:
        """Retorna progresso atual do tour"""
        try:
            if user_id not in self.user_tour_progress:
                return {"status": "not_started"}
            
            progress = self.user_tour_progress[user_id]
            total_steps = len(self.tour_steps)
            completed_steps = len(progress["completed_steps"])
            
            return {
                "status": "in_progress" if "completed_at" not in progress else "completed",
                "current_step": progress["current_step"],
                "total_steps": total_steps,
                "completed_steps": completed_steps,
                "progress_percentage": (completed_steps / total_steps) * 100,
                "started_at": progress.get("started_at"),
                "completed_at": progress.get("completed_at")
            }
            
        except Exception as e:
            logger.error(f"Erro ao obter progresso do tour: {e}")
            return {"status": "error"}

class UIManager:
    """Gerenciador principal da interface do usu√°rio"""
    
    def __init__(self):
        self.dynamic_menus = DynamicMenuSystem()
        self.voice_commands = VoiceCommandSystem()
        self.custom_shortcuts = CustomShortcutsSystem()
        self.interactive_tour = InteractiveTourSystem()
        
    async def show_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE, menu_name: str = "main_menu"):
        """Mostra menu din√¢mico para o usu√°rio"""
        try:
            user_id = update.effective_user.id
            user_data = context.user_data
            
            # Obter menu personalizado
            menu_data = self.dynamic_menus.get_dynamic_menu(user_id, menu_name, user_data)
            
            # Criar bot√µes do menu
            keyboard = []
            for button_row in menu_data["buttons"]:
                if len(button_row) == 2:
                    keyboard.append([InlineKeyboardButton(button_row[0], callback_data=button_row[1])])
                else:
                    keyboard.append([InlineKeyboardButton(btn, callback_data=btn) for btn in button_row])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # Enviar menu
            if update.callback_query:
                await update.callback_query.edit_message_text(
                    text=f"{menu_data['title']}\n\n{menu_data['description']}",
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
            else:
                await update.message.reply_text(
                    text=f"{menu_data['title']}\n\n{menu_data['description']}",
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
                
        except Exception as e:
            logger.error(f"Erro ao mostrar menu: {e}")
            await update.message.reply_text("‚ùå Erro ao carregar menu. Tente novamente.")
    
    async def process_voice_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE, audio_text: str):
        """Processa comando de voz e executa a√ß√£o correspondente"""
        try:
            user_id = update.effective_user.id
            
            # Processar comando
            result = self.voice_commands.process_voice_command(audio_text, user_id)
            
            # Mostrar resposta
            await update.message.reply_text(f"üé§ **Comando de Voz:** {result['response']}")
            
            # Executar a√ß√£o se necess√°rio
            if result["action"] not in ["greeting", "farewell", "unknown", "error"]:
                # Navegar para menu correspondente
                if result["menu"]:
                    await self.show_menu(update, context, result["menu"])
            
            # Mostrar sugest√µes se comando n√£o reconhecido
            if result["action"] == "unknown" and "suggestions" in result:
                suggestions_text = "\n".join([f"‚Ä¢ {suggestion}" for suggestion in result["suggestions"]])
                await update.message.reply_text(f"üí° **Sugest√µes:**\n{suggestions_text}")
                
        except Exception as e:
            logger.error(f"Erro ao processar comando de voz: {e}")
            await update.message.reply_text("‚ùå Erro ao processar comando de voz. Tente novamente.")
    
    async def show_shortcuts(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Mostra shortcuts personalizados do usu√°rio"""
        try:
            user_id = update.effective_user.id
            shortcuts = self.custom_shortcuts.get_user_shortcuts(user_id)
            
            shortcuts_text = "üéØ **Seus Shortcuts Personalizados:**\n\n"
            
            for name, shortcut in shortcuts.items():
                shortcuts_text += f"**{name.title()}:** {shortcut['command']}\n"
                shortcuts_text += f"‚îî {shortcut['description']}\n\n"
            
            # Bot√µes para gerenciar shortcuts
            keyboard = [
                [InlineKeyboardButton("‚ûï Adicionar Shortcut", callback_data="add_shortcut")],
                [InlineKeyboardButton("‚úèÔ∏è Editar Shortcuts", callback_data="edit_shortcuts")],
                [InlineKeyboardButton("üóëÔ∏è Remover Shortcut", callback_data="remove_shortcut")],
                [InlineKeyboardButton("üîô Voltar", callback_data="settings")]
            ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                text=shortcuts_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"Erro ao mostrar shortcuts: {e}")
            await update.message.reply_text("‚ùå Erro ao carregar shortcuts. Tente novamente.")
    
    async def start_interactive_tour(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Inicia tour interativo para o usu√°rio"""
        try:
            user_id = update.effective_user.id
            
            # Iniciar tour
            tour_step = self.interactive_tour.start_tour(user_id)
            
            if tour_step:
                # Criar bot√µes do tour
                keyboard = []
                for button_row in tour_step["buttons"]:
                    if len(button_row) == 2:
                        keyboard.append([InlineKeyboardButton(button_row[0], callback_data=button_row[1])])
                    else:
                        keyboard.append([InlineKeyboardButton(btn, callback_data=btn) for btn in button_row])
                
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await update.message.reply_text(
                    text=f"{tour_step['title']}\n\n{tour_step['description']}",
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
            else:
                await update.message.reply_text("‚ùå Erro ao iniciar tour. Tente novamente.")
                
        except Exception as e:
            logger.error(f"Erro ao iniciar tour: {e}")
            await update.message.reply_text("‚ùå Erro ao iniciar tour. Tente novamente.")

# Inst√¢ncia global do gerenciador de UI
ui_manager = UIManager()
