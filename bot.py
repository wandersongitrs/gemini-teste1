# -*- coding: utf-8 -*-
import os
import logging
import io
import asyncio
import json
import re
import base64
import csv
import secrets
import string
import hashlib
import socket
import subprocess
import requests
import time
from dataclasses import dataclass
from datetime import datetime, timedelta
from typing import List, Dict, Any, Optional
from urllib.parse import urlparse
import httpx
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
# Importa√ß√£o condicional do pydub para evitar erro no Python 3.13
try:
    from pydub import AudioSegment
    PYDUB_AVAILABLE = True
except ImportError:
    PYDUB_AVAILABLE = False
    print("‚ö†Ô∏è  pydub n√£o dispon√≠vel - funcionalidades de √°udio limitadas")
from gtts import gTTS
import google.generativeai as genai
from PIL import Image, ImageFilter, ImageEnhance, ImageOps
import numpy as np
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
import pytesseract
import PyPDF2
from deep_translator import GoogleTranslator

import database
from telegram.helpers import escape_markdown
from multimodal_processor import MultimodalProcessor, MultimodalContext
from voice_cloner import VoiceCloner
from ui_components import ui_manager  # NOVO: Sistema de UI melhorado
from face_swapper_advanced import face_swapper  # NOVO: Sistema de Face Swapping
from scenario_generator import scenario_generator  # NOVO: Gerador de Cen√°rios
from image_generation_ui import image_generation_ui  # NOVO: Interface de Gera√ß√£o de Imagens
from face_swap_handler import face_swap_handler  # NOVO: Handler Funcional de Face Swap
from face_swap_commands import trocar_rosto, trocar_rosto_ultra, trocar_rosto_rapido, handle_image_upload  # NOVO: Comandos Funcionais

# --- CONFIGURA√á√ÉO ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

@dataclass(frozen=True)
class Settings:
    telegram_token: str
    gemini_api_key: str
    huggingface_api_key: str
    tavily_api_key: str
    removebg_api_key: str
    fish_audio_api_key: str = None
    coqui_api_key: str = None
    gemini_model_name: str = 'gemini-1.5-flash'
    image_model_id: str = "stabilityai/stable-diffusion-xl-base-1.0"
    @classmethod
    def load_from_env(cls):
        load_dotenv()
        
        # Carregar vari√°veis de ambiente manualmente se necess√°rio
        if not os.getenv("TELEGRAM_TOKEN"):
            try:
                with open('.env', 'r', encoding='utf-8') as f:
                    for line in f:
                        if line.strip() and not line.startswith('#'):
                            key, value = line.strip().split('=', 1)
                            os.environ[key] = value
            except Exception as e:
                logger.warning(f"Erro ao carregar .env: {e}")
        keys = {
            "telegram_token": os.getenv("TELEGRAM_TOKEN"), 
            "gemini_api_key": os.getenv("GEMINI_API_KEY"), 
            "huggingface_api_key": os.getenv("HUGGINGFACE_API_KEY"), 
            "tavily_api_key": os.getenv("TAVILY_API_KEY"),
            "removebg_api_key": os.getenv("REMOVEBG_API_KEY"),
            "fish_audio_api_key": os.getenv("FISH_AUDIO_API_KEY"),
            "coqui_api_key": os.getenv("COQUI_API_KEY")
        }
        # Verificar se as chaves foram carregadas corretamente do .env
        if not keys["telegram_token"] or keys["telegram_token"] == "seu_token_aqui":
            raise ValueError("TELEGRAM_TOKEN n√£o configurado no arquivo .env")
        if not keys["gemini_api_key"] or keys["gemini_api_key"] == "sua_chave_gemini_aqui":
            raise ValueError("GEMINI_API_KEY n√£o configurado no arquivo .env")
        if not keys["huggingface_api_key"] or keys["huggingface_api_key"] == "sua_chave_huggingface_aqui":
            raise ValueError("HUGGINGFACE_API_KEY n√£o configurado no arquivo .env")
        if not keys["tavily_api_key"] or keys["tavily_api_key"] == "sua_chave_tavily_aqui":
            raise ValueError("TAVILY_API_KEY n√£o configurado no arquivo .env")
        return cls(**keys)

# --- FUN√á√ïES DE PROCESSAMENTO ---
def text_to_speech_sync(text: str, lang: str = 'pt') -> io.BytesIO:
    tts = gTTS(text=text, lang=lang); mp3_io = io.BytesIO(); tts.write_to_fp(mp3_io); mp3_io.seek(0); return mp3_io

async def detect_language_from_text(text: str) -> str:
    """Detecta o idioma do texto usando Gemini"""
    try:
        # Mapeamento simples de idiomas comuns
        lang_patterns = {
            'pt': ['portugu√™s', 'portuguese', 'brasil', 'brazil', 'ol√°', 'oi', 'tudo bem'],
            'en': ['english', 'hello', 'hi', 'how are you', 'the', 'and', 'is'],
            'es': ['espa√±ol', 'hola', 'buenos d√≠as', 'gracias', 'por favor'],
            'fr': ['fran√ßais', 'bonjour', 'merci', 's\'il vous pla√Æt', 'oui', 'non']
        }
        
        text_lower = text.lower()
        for lang, patterns in lang_patterns.items():
            if any(pattern in text_lower for pattern in patterns):
                return lang
        return 'pt'  # Padr√£o
    except:
        return 'pt'

def get_language_display_name(lang_code: str) -> str:
    """Retorna o nome do idioma para exibi√ß√£o"""
    lang_names = {
        'pt': 'üáßüá∑ Portugu√™s',
        'en': 'üá∫üá∏ English', 
        'es': 'üá™üá∏ Espa√±ol',
        'fr': 'üá´üá∑ Fran√ßais'
    }
    return lang_names.get(lang_code, 'üåç Desconhecido')

async def check_breach_directory(email: str) -> Dict[str, Any]:
    """Verifica vazamentos usando an√°lise local (100% gratuito)"""
    try:
        # Simular verifica√ß√£o local baseada em padr√µes conhecidos
        # Esta √© uma implementa√ß√£o educacional que n√£o requer APIs externas
        
        # Verificar se o email tem caracter√≠sticas suspeitas
        email_lower = email.lower()
        
        # Padr√µes de emails conhecidos por vazamentos (baseado em dados p√∫blicos)
        known_breached_patterns = [
            'admin@', 'test@', 'user@', 'demo@', 'info@',
            'support@', 'help@', 'contact@', 'sales@', 'marketing@'
        ]
        
        # Verificar se o email segue padr√µes suspeitos
        if any(pattern in email_lower for pattern in known_breached_patterns):
            breach_info = {
                'Name': 'Padr√£o Suspeito',
                'Title': 'Email com Padr√£o Suspeito Detectado',
                'Domain': email.split('@')[1],
                'BreachDate': 'N/A',
                'DataClasses': ['EmailAddresses'],
                'Description': 'Email segue padr√£o comum em vazamentos de dados',
                'PwnCount': 1
            }
            return {
                'found': True,
                'breaches': [breach_info],
                'total_breaches': 1,
                'status': 'success'
            }
        
        # Verificar dom√≠nios tempor√°rios conhecidos
        temp_domains = [
            'tempmail.org', '10minutemail.com', 'guerrillamail.com',
            'mailinator.com', 'yopmail.com', 'dispostable.com',
            'throwaway.email', 'mailnesia.com', 'sharklasers.com',
            'temp-mail.org', 'fakeinbox.com', 'getairmail.com'
        ]
        
        domain = email.split('@')[1].lower()
        if domain in temp_domains:
            breach_info = {
                'Name': 'Dom√≠nio Tempor√°rio',
                'Title': 'Email Tempor√°rio Detectado',
                'Domain': domain,
                'BreachDate': 'N/A',
                'DataClasses': ['EmailAddresses'],
                'Description': f'Dom√≠nio {domain} √© conhecido por ser usado para emails tempor√°rios',
                'PwnCount': 1
            }
            return {
                'found': True,
                'breaches': [breach_info],
                'total_breaches': 1,
                'status': 'success'
            }
        
        # Verificar padr√µes num√©ricos suspeitos
        if re.search(r'\d{8,}', email_lower):
            breach_info = {
                'Name': 'Padr√£o Num√©rico',
                'Title': 'Email com Muitos N√∫meros Detectado',
                'Domain': domain,
                'BreachDate': 'N/A',
                'DataClasses': ['EmailAddresses'],
                'Description': 'Email possui muitos n√∫meros, padr√£o comum em vazamentos',
                'PwnCount': 1
            }
            return {
                'found': True,
                'breaches': [breach_info],
                'total_breaches': 1,
                'status': 'success'
            }
        
        # Se n√£o encontrou nada suspeito
        return {
            'found': False,
            'breaches': [],
            'total_breaches': 0,
            'status': 'success'
        }
                
    except Exception as e:
        logger.error(f"Erro na verifica√ß√£o local: {e}")
        return {
            'found': False,
            'breaches': [],
            'total_breaches': 0,
            'status': 'error',
            'error': str(e)
        }

async def check_email_reputation(email: str) -> Dict[str, Any]:
    """Verifica reputa√ß√£o do email usando m√∫ltiplas fontes gratuitas"""
    try:
        # Verificar se o dom√≠nio √© conhecido por spam/vazamentos
        domain = email.split('@')[1].lower()
        
        # Lista de dom√≠nios tempor√°rios conhecidos por vazamentos
        suspicious_domains = [
            'tempmail.org', '10minutemail.com', 'guerrillamail.com',
            'mailinator.com', 'yopmail.com', 'dispostable.com',
            'throwaway.email', 'mailnesia.com', 'sharklasers.com'
        ]
        
        # Verificar dom√≠nios suspeitos
        if domain in suspicious_domains:
            breach_info = {
                'Name': 'Dom√≠nio Tempor√°rio',
                'Title': 'Email Tempor√°rio Detectado',
                'Domain': domain,
                'BreachDate': 'N/A',
                'DataClasses': ['EmailAddresses'],
                'Description': f'Dom√≠nio {domain} √© conhecido por ser usado para emails tempor√°rios, frequentemente associados a atividades suspeitas',
                'PwnCount': 1
            }
            return {
                'found': True,
                'breaches': [breach_info],
                'total_breaches': 1,
                'status': 'success'
            }
        
        # Verificar padr√µes suspeitos no email
        suspicious_patterns = [
            r'\d{10,}',  # Muitos n√∫meros
            r'[a-z]{1,2}\d{8,}',  # Poucas letras + muitos n√∫meros
            r'test|temp|fake|spam|bot',  # Palavras suspeitas
        ]
        
        for pattern in suspicious_patterns:
            if re.search(pattern, email.lower()):
                breach_info = {
                    'Name': 'Padr√£o Suspeito',
                    'Title': 'Padr√£o de Email Suspeito',
                    'Domain': domain,
                    'BreachDate': 'N/A',
                    'DataClasses': ['EmailAddresses'],
                    'Description': 'Email possui padr√£o suspeito que pode indicar uso tempor√°rio ou malicioso',
                    'PwnCount': 1
                }
                return {
                    'found': True,
                    'breaches': [breach_info],
                    'total_breaches': 1,
                    'status': 'success'
                }
        
        return {
            'found': False,
            'breaches': [],
            'total_breaches': 0,
            'status': 'success'
        }
                
    except Exception as e:
        logger.error(f"Erro ao verificar reputa√ß√£o do email: {e}")
        return {
            'found': False,
            'breaches': [],
            'total_breaches': 0,
            'status': 'error',
            'error': str(e)
        }

async def check_multiple_sources(email: str) -> Dict[str, Any]:
    """Verifica vazamentos usando an√°lise local 100% gratuita"""
    try:
        results = []
        
        # 1. Verificar padr√µes suspeitos (an√°lise local)
        breach_result = await check_breach_directory(email)
        if breach_result['status'] == 'success':
            results.append(breach_result)
        
        # 2. Verificar reputa√ß√£o do email (an√°lise local)
        reputation_result = await check_email_reputation(email)
        if reputation_result['status'] == 'success':
            results.append(reputation_result)
        
        # Consolidar resultados
        all_breaches = []
        total_breaches = 0
        found = False
        
        for result in results:
            if result['found']:
                found = True
                all_breaches.extend(result['breaches'])
                total_breaches += result['total_breaches']
        
        return {
            'found': found,
            'breaches': all_breaches,
            'total_breaches': total_breaches,
            'status': 'success'
        }
                
    except Exception as e:
        logger.error(f"Erro na verifica√ß√£o local: {e}")
        return {
            'found': False,
            'breaches': [],
            'total_breaches': 0,
            'status': 'error',
            'error': str(e)
        }

def format_breach_details(breach: Dict[str, Any]) -> str:
    """Formata os detalhes de um vazamento espec√≠fico"""
    name = breach.get('Name', 'Desconhecido')
    title = breach.get('Title', name)
    domain = breach.get('Domain', 'N/A')
    breach_date = breach.get('BreachDate', 'N/A')
    added_date = breach.get('AddedDate', 'N/A')
    modified_date = breach.get('ModifiedDate', 'N/A')
    pwn_count = breach.get('PwnCount', 0)
    
    # Formatar data se dispon√≠vel
    if breach_date != 'N/A':
        try:
            date_obj = datetime.strptime(breach_date, '%Y-%m-%d')
            breach_date = date_obj.strftime('%d/%m/%Y')
        except:
            pass
    
    # Formatar dados comprometidos
    data_classes = breach.get('DataClasses', [])
    data_classes_str = ', '.join(data_classes) if data_classes else 'N/A'
    
    # Determinar n√≠vel de risco
    risk_level = "üü¢ Baixo"
    if any(data in data_classes for data in ['Passwords', 'CreditCards', 'BankAccounts']):
        risk_level = "üî¥ Cr√≠tico"
    elif any(data in data_classes for data in ['EmailAddresses', 'PhoneNumbers', 'Addresses']):
        risk_level = "üü° M√©dio"
    
    return (
        f"üìä **{title}**\n"
        f"üè¢ **Empresa:** {name}\n"
        f"üåê **Dom√≠nio:** {domain}\n"
        f"üìÖ **Data do Vazamento:** {breach_date}\n"
        f"üë• **Pessoas Afetadas:** {pwn_count:,}\n"
        f"‚ö†Ô∏è **Dados Comprometidos:** {data_classes_str}\n"
        f"üö® **N√≠vel de Risco:** {risk_level}\n"
        f"üìù **Descri√ß√£o:** {breach.get('Description', 'N/A')}\n"
    )

def generate_security_recommendations(breaches: List[Dict[str, Any]]) -> str:
    """Gera recomenda√ß√µes de seguran√ßa baseadas nos vazamentos encontrados"""
    if not breaches:
        return (
            "‚úÖ **Parab√©ns!** Seu email n√£o foi encontrado em vazamentos conhecidos.\n\n"
            "üõ°Ô∏è **Mantenha-se Seguro:**\n"
            "‚Ä¢ Continue usando senhas √∫nicas e fortes\n"
            "‚Ä¢ Mantenha a autentica√ß√£o de dois fatores ativa\n"
            "‚Ä¢ Monitore regularmente suas contas\n"
            "‚Ä¢ Use um gerenciador de senhas confi√°vel"
        )
    
    # Analisar tipos de dados comprometidos
    data_types = set()
    for breach in breaches:
        data_types.update(breach.get('DataClasses', []))
    
    recommendations = ["üõ°Ô∏è **Recomenda√ß√µes de Seguran√ßa:**\n"]
    
    if 'Passwords' in data_types:
        recommendations.append("üîê **Senhas Comprometidas:**\n‚Ä¢ Altere TODAS as senhas imediatamente\n‚Ä¢ Use senhas √∫nicas para cada servi√ßo\n‚Ä¢ Considere usar um gerenciador de senhas")
    
    if 'CreditCards' in data_types or 'BankAccounts' in data_types:
        recommendations.append("üí≥ **Dados Financeiros:**\n‚Ä¢ Entre em contato com seu banco\n‚Ä¢ Monitore transa√ß√µes suspeitas\n‚Ä¢ Considere cancelar cart√µes comprometidos")
    
    if 'EmailAddresses' in data_types:
        recommendations.append("üìß **Email Comprometido:**\n‚Ä¢ Monitore emails suspeitos\n‚Ä¢ Ative filtros anti-spam\n‚Ä¢ Verifique configura√ß√µes de seguran√ßa")
    
    if 'PhoneNumbers' in data_types:
        recommendations.append("üì± **Telefone Comprometido:**\n‚Ä¢ Monitore chamadas e SMS suspeitos\n‚Ä¢ Ative autentica√ß√£o de dois fatores\n‚Ä¢ Considere mudar o n√∫mero se necess√°rio")
    
    recommendations.append("\nüîÑ **A√ß√µes Imediatas:**\n‚Ä¢ Ative autentica√ß√£o de dois fatores em TODAS as contas\n‚Ä¢ Monitore atividades suspeitas\n‚Ä¢ Use ferramentas de monitoramento de cr√©dito\n‚Ä¢ Considere servi√ßos de prote√ß√£o de identidade")
    
    return "\n".join(recommendations)

async def get_url_content(url: str, client: httpx.AsyncClient) -> str:
    youtube_regex = r'(?:v=|\/|embed\/|watch\?v=|\.be\/|watch\?.+&v=)([^#\&\?]{11})'
    match = re.search(youtube_regex, url)
    if match:
        video_id = match.group(1)
        try:
            from youtube_transcript_api import YouTubeTranscriptApi
            transcript_list = YouTubeTranscriptApi.get_transcript(video_id, languages=['pt', 'en', 'es'])
            return " ".join([item['text'] for item in transcript_list])
        except Exception as e: logger.error(f"Erro na transcri√ß√£o do YouTube: {e}"); return f"ERRO: N√£o obtive a transcri√ß√£o. ({e})"
    else:
        try:
            from bs4 import BeautifulSoup
            response = await client.get(url, timeout=30, follow_redirects=True); response.raise_for_status()
            soup = BeautifulSoup(response.text, 'lxml')
            for tag in soup(['script', 'style', 'header', 'footer', 'nav', 'aside']): tag.decompose()
            return " ".join(soup.stripped_strings)
        except Exception as e: logger.error(f"Erro ao extrair texto da URL: {e}"); return f"ERRO: N√£o extra√≠ o conte√∫do. ({e})"

# --- FUN√á√ïES DE PROCESSAMENTO DE ARQUIVOS ---
def extract_text_from_image(image_bytes: bytes) -> str:
    """Extrai texto de uma imagem usando OCR"""
    try:
        image = Image.open(io.BytesIO(image_bytes))
        text = pytesseract.image_to_string(image, lang='por+eng')
        return text.strip()
    except Exception as e:
        logger.error(f"Erro no OCR: {e}")
        return "Erro ao extrair texto da imagem."

def extract_text_from_pdf(pdf_bytes: bytes) -> str:
    """Extrai texto de um PDF"""
    try:
        pdf_reader = PyPDF2.PdfReader(io.BytesIO(pdf_bytes))
        text = ""
        for page in pdf_reader.pages:
            text += page.extract_text() + "\n"
        return text.strip()
    except Exception as e:
        logger.error(f"Erro ao extrair texto do PDF: {e}")
        return "Erro ao extrair texto do PDF."

def resize_image(image_bytes: bytes, width: int, height: int) -> io.BytesIO:
    """Redimensiona uma imagem"""
    image = Image.open(io.BytesIO(image_bytes))
    resized = image.resize((width, height), Image.Resampling.LANCZOS)
    output = io.BytesIO()
    resized.save(output, format='PNG')
    output.seek(0)
    return output

def apply_image_filter(image_bytes: bytes, filter_type: str) -> io.BytesIO:
    """Aplica filtros art√≠sticos em imagens"""
    image = Image.open(io.BytesIO(image_bytes))
    
    if filter_type.lower() == 'vintage':
        enhancer = ImageEnhance.Color(image)
        image = enhancer.enhance(0.8)
        enhancer = ImageEnhance.Contrast(image)
        image = enhancer.enhance(1.2)
    elif filter_type.lower() == 'blur':
        image = image.filter(ImageFilter.GaussianBlur(radius=2))
    elif filter_type.lower() == 'sharpen':
        image = image.filter(ImageFilter.SHARPEN)
    elif filter_type.lower() == 'emboss':
        image = image.filter(ImageFilter.EMBOSS)
    elif filter_type.lower() == 'edge':
        image = image.filter(ImageFilter.FIND_EDGES)
    elif filter_type.lower() == 'smooth':
        image = image.filter(ImageFilter.SMOOTH)
    else:
        enhancer = ImageEnhance.Contrast(image)
        image = enhancer.enhance(1.3)
    
    output = io.BytesIO()
    image.save(output, format='PNG')
    output.seek(0)
    return output

def analyze_csv_data(csv_bytes: bytes) -> Dict[str, Any]:
    """Analisa dados de CSV e gera gr√°ficos"""
    try:
        df = pd.read_csv(io.BytesIO(csv_bytes))
        
        analysis = {
            'rows': len(df),
            'columns': len(df.columns),
            'column_names': df.columns.tolist(),
            'data_types': df.dtypes.to_dict(),
            'summary': df.describe().to_dict() if len(df.select_dtypes(include=[np.number]).columns) > 0 else {}
        }
        
        plt.figure(figsize=(10, 6))
        numeric_columns = df.select_dtypes(include=[np.number]).columns
        
        if len(numeric_columns) > 0:
            df[numeric_columns[:3]].plot(kind='bar')
            plt.title('An√°lise de Dados')
            plt.xticks(rotation=45)
            plt.tight_layout()
            
            chart_buffer = io.BytesIO()
            plt.savefig(chart_buffer, format='png', dpi=150, bbox_inches='tight')
            chart_buffer.seek(0)
            analysis['chart'] = chart_buffer
            plt.close()
        
        return analysis
    except Exception as e:
        logger.error(f"Erro na an√°lise de CSV: {e}")
        return {'error': str(e)}



# === SEGURAN√áA DIGITAL ===

async def gerar_senha_forte(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Gerador de senhas seguras"""
    criterios = " ".join(context.args) if context.args else ""
    
    tamanho = 16
    incluir_numeros = True
    incluir_simbolos = True
    incluir_maiusculas = True
    incluir_minusculas = True
    sem_ambiguos = False
    
    if criterios:
        if "tamanho" in criterios:
            try:
                tamanho = int(re.search(r'tamanho[:\s]*(\d+)', criterios).group(1))
                tamanho = max(8, min(128, tamanho))
            except:
                pass
        
        if "sem_numeros" in criterios: incluir_numeros = False
        if "sem_simbolos" in criterios: incluir_simbolos = False
        if "sem_maiusculas" in criterios: incluir_maiusculas = False
        if "sem_minusculas" in criterios: incluir_minusculas = False
        if "sem_ambiguos" in criterios: sem_ambiguos = True
    
    try:
        chars = ""
        if incluir_minusculas:
            chars += string.ascii_lowercase
            if sem_ambiguos: chars = chars.replace('l', '').replace('o', '')
        
        if incluir_maiusculas:
            chars += string.ascii_uppercase
            if sem_ambiguos: chars = chars.replace('I', '').replace('O', '')
        
        if incluir_numeros:
            chars += string.digits
            if sem_ambiguos: chars = chars.replace('0', '').replace('1', '')
        
        if incluir_simbolos:
            simbolos = "!@#$%^&*()_+-=[]{}|;:,.<>?"
            if sem_ambiguos: simbolos = simbolos.replace('|', '').replace('l', '')
            chars += simbolos
        
        if not chars:
            await update.message.reply_text("‚ùå Crit√©rios muito restritivos. N√£o h√° caracteres dispon√≠veis.")
            return
        
        senha = ''.join(secrets.choice(chars) for _ in range(tamanho))
        
        forca_score = 0
        if any(c.islower() for c in senha): forca_score += 1
        if any(c.isupper() for c in senha): forca_score += 1
        if any(c.isdigit() for c in senha): forca_score += 1
        if any(c in "!@#$%^&*()_+-=[]{}|;:,.<>?" for c in senha): forca_score += 1
        if len(senha) >= 12: forca_score += 1
        
        forca_texto = ["Muito Fraca", "Fraca", "Regular", "Forte", "Muito Forte"][min(forca_score, 4)]
        
        combinacoes = len(chars) ** tamanho
        tempo_segundos = combinacoes / (1e12)
        
        if tempo_segundos < 60:
            tempo_texto = f"{tempo_segundos:.1f} segundos"
        elif tempo_segundos < 3600:
            tempo_texto = f"{tempo_segundos/60:.1f} minutos"
        elif tempo_segundos < 86400:
            tempo_texto = f"{tempo_segundos/3600:.1f} horas"
        elif tempo_segundos < 31536000:
            tempo_texto = f"{tempo_segundos/86400:.1f} dias"
        else:
            anos = tempo_segundos / 31536000
            if anos > 1e6:
                tempo_texto = "Praticamente imposs√≠vel"
            else:
                tempo_texto = f"{anos:.1f} anos"
        
        await update.message.reply_text(
            f"üîê **Senha Forte Gerada**\n\n"
            f"**Senha:** `{senha}`\n\n"
            f"üìä **An√°lise de Seguran√ßa:**\n"
            f"‚Ä¢ Tamanho: {tamanho} caracteres\n"
            f"‚Ä¢ For√ßa: {forca_texto}\n"
            f"‚Ä¢ Tempo para quebrar: {tempo_texto}\n"
            f"‚Ä¢ Caracteres √∫nicos: {len(set(chars))}\n\n"
            f"üõ°Ô∏è **Dicas de Seguran√ßa:**\n"
            f"‚Ä¢ Use senhas √∫nicas para cada servi√ßo\n"
            f"‚Ä¢ Ative 2FA quando dispon√≠vel\n"
            f"‚Ä¢ Use um gerenciador de senhas\n"
            f"‚Ä¢ Nunca compartilhe suas senhas\n\n"
            f"**Exemplo de uso:** `/gerar_senha_forte tamanho 20 sem_ambiguos`",
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"Erro ao gerar senha: {e}")
        await update.message.reply_text("‚ùå Erro ao gerar senha. Tente novamente.")

async def verificar_vazamento(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Verifica√ß√£o completa de vazamentos usando HaveIBeenPwned API"""
    if not context.args:
        await update.message.reply_text(
            "üïµÔ∏è **Verifica√ß√£o de Vazamentos**\n\n"
            "**Uso:** `/verificar_vazamento <email>`\n\n"
            "**Exemplo:** `/verificar_vazamento seu@email.com`\n\n"
            "‚ö†Ô∏è *Verifica se o email foi comprometido usando m√∫ltiplas fontes gratuitas*"
        )
        return
    
    email = context.args[0].lower().strip()
    
    if not re.match(r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$', email):
        await update.message.reply_text("‚ùå Email inv√°lido. Verifique o formato.")
        return
    
    # N√£o √© mais necess√°rio verificar API key - usando fontes gratuitas
    
    # Mensagem inicial
    status_message = await update.message.reply_text(
        f"üïµÔ∏è **Verificando vazamentos para {email}...**\n"
        "‚è≥ Analisando padr√µes e reputa√ß√£o localmente..."
    )
    
    try:
        # Consultar m√∫ltiplas fontes gratuitas
        result = await check_multiple_sources(email)
        
        if result['status'] == 'error':
            await status_message.edit_text(
                f"‚ùå **Erro na verifica√ß√£o**\n\n"
                f"üìß **Email:** {email[:3]}***@{email.split('@')[1]}\n\n"
                f"‚ö†Ô∏è **Problema:** {result.get('error', 'Erro desconhecido')}\n\n"
                f"üîÑ **Tente novamente em alguns minutos ou use sites alternativos:**\n"
                f"‚Ä¢ https://haveibeenpwned.com/\n"
                f"‚Ä¢ https://breachdirectory.p.rapidapi.com/"
            )
            return
        
        # Preparar relat√≥rio
        email_display = f"{email[:3]}***@{email.split('@')[1]}"
        total_breaches = result['total_breaches']
        found_breaches = result['found']
        
        # Cabe√ßalho do relat√≥rio
        report = (
            f"üïµÔ∏è **Relat√≥rio de Seguran√ßa - An√°lise Local**\n\n"
            f"üìß **Email verificado:** {email_display}\n"
            f"üîç **Status:** {'üî¥ ENCONTRADO' if found_breaches else '‚úÖ N√ÉO ENCONTRADO'}\n"
            f"üìä **Total de vazamentos:** {total_breaches}\n"
            f"üìÖ **Data da verifica√ß√£o:** {datetime.now().strftime('%d/%m/%Y %H:%M')}\n"
            f"üîê **Hash de verifica√ß√£o:** {hashlib.sha256(email.encode()).hexdigest()[:16]}\n"
            f"üîç **M√©todo:** An√°lise Local de Padr√µes e Reputa√ß√£o\n\n"
        )
        
        if found_breaches and total_breaches > 0:
            # Detalhes dos vazamentos
            report += f"üö® **Vazamentos Encontrados ({total_breaches}):**\n\n"
            
            # Ordenar vazamentos por data (mais recentes primeiro)
            sorted_breaches = sorted(
                result['breaches'], 
                key=lambda x: x.get('BreachDate', '1900-01-01'), 
                reverse=True
            )
            
            # Mostrar os 5 vazamentos mais recentes
            for i, breach in enumerate(sorted_breaches[:5], 1):
                report += f"**{i}.** {format_breach_details(breach)}\n"
            
            if total_breaches > 5:
                report += f"\n... e mais {total_breaches - 5} vazamento(s)\n"
            
            # Estat√≠sticas
            data_types = set()
            for breach in result['breaches']:
                data_types.update(breach.get('DataClasses', []))
            
            report += f"\nüìà **Estat√≠sticas:**\n"
            report += f"‚Ä¢ **Tipos de dados comprometidos:** {len(data_types)}\n"
            report += f"‚Ä¢ **Empresas afetadas:** {len(set(b.get('Name') for b in result['breaches']))}\n"
            report += f"‚Ä¢ **Maior vazamento:** {max(result['breaches'], key=lambda x: x.get('PwnCount', 0)).get('Name', 'N/A')}\n"
            
        else:
            report += "‚úÖ **Nenhum vazamento encontrado!**\n\n"
        
        # Recomenda√ß√µes de seguran√ßa
        report += f"\n{generate_security_recommendations(result['breaches'])}\n"
        
        # Informa√ß√µes adicionais
        report += (
            f"\nüîó **Links √öteis:**\n"
            f"‚Ä¢ üåê **Verifica√ß√£o adicional:** https://haveibeenpwned.com/\n"
            f"‚Ä¢ üîê **Gerenciadores de senha:** Bitwarden, 1Password, KeePass\n"
            f"‚Ä¢ üõ°Ô∏è **2FA:** Google Authenticator, Authy, Microsoft Authenticator\n"
            f"‚Ä¢ üì± **Monitoramento:** Credit Karma, Experian, TransUnion\n\n"
            f"‚ö†Ô∏è **Importante:** Este relat√≥rio √© baseado em an√°lise local de padr√µes.\n"
            f"Para verifica√ß√£o mais completa, use servi√ßos especializados como HaveIBeenPwned."
        )
        
        # Enviar relat√≥rio (dividido se for muito longo)
        if len(report) > 4096:
            # Dividir em partes
            parts = [report[i:i+4096] for i in range(0, len(report), 4096)]
            for i, part in enumerate(parts):
                if i == 0:
                    await status_message.edit_text(part)
                else:
                    await update.message.reply_text(part)
        else:
            await status_message.edit_text(report)
        
    except Exception as e:
        logger.error(f"Erro na verifica√ß√£o de vazamento: {e}")
        await status_message.edit_text(
            f"‚ùå **Erro na verifica√ß√£o**\n\n"
            f"üìß **Email:** {email_display}\n\n"
            f"‚ö†Ô∏è **Problema:** Erro interno do sistema\n\n"
            f"üîÑ **Tente novamente ou use sites alternativos:**\n"
            f"‚Ä¢ https://haveibeenpwned.com/ (Verifica√ß√£o oficial)\n"
            f"‚Ä¢ https://dehashed.com/ (Base de dados de vazamentos)"
        )

async def scan_phishing(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Detec√ß√£o de phishing em URLs"""
    if not context.args:
        await update.message.reply_text(
            "üé£ **Scanner Anti-Phishing**\n\n"
            "**Uso:** `/scan_phishing <url>`\n\n"
            "**Exemplo:** `/scan_phishing https://site-suspeito.com`\n\n"
            "‚ö†Ô∏è *Analisa URLs suspeitas de phishing*"
        )
        return
    
    url = context.args[0].strip()
    
    if not url.startswith(('http://', 'https://')):
        url = 'https://' + url
    
    try:
        parsed_url = urlparse(url)
        if not parsed_url.netloc:
            await update.message.reply_text("‚ùå URL inv√°lida.")
            return
    except:
        await update.message.reply_text("‚ùå URL inv√°lida.")
        return
    
    await update.message.reply_text(f"üé£ **Analisando URL suspeita...**")
    
    try:
        domain = parsed_url.netloc.lower()
        phishing_indicators = []
        risk_score = 0
        
        suspicious_tlds = ['.tk', '.ml', '.ga', '.cf', '.gq']
        if any(domain.endswith(tld) for tld in suspicious_tlds):
            phishing_indicators.append("TLD suspeito")
            risk_score += 30
        
        if domain.count('.') > 3:
            phishing_indicators.append("Muitos subdom√≠nios")
            risk_score += 20
        
        suspicious_chars = ['-', '_', '0', '1']
        if sum(1 for char in suspicious_chars if char in domain) > 2:
            phishing_indicators.append("Caracteres suspeitos no dom√≠nio")
            risk_score += 15
        
        known_sites = ['google', 'facebook', 'amazon', 'microsoft', 'apple', 'netflix', 'paypal', 'banco']
        for site in known_sites:
            if site in domain and site not in domain.split('.')[0]:
                phishing_indicators.append(f"Poss√≠vel imita√ß√£o de {site}")
                risk_score += 40
        
        shorteners = ['bit.ly', 'tinyurl', 't.co', 'goo.gl', 'ow.ly']
        if any(short in domain for short in shorteners):
            phishing_indicators.append("URL encurtada")
            risk_score += 10
        
        if parsed_url.scheme != 'https':
            phishing_indicators.append("Sem HTTPS")
            risk_score += 25
        
        if risk_score >= 60:
            risk_level = "üî¥ ALTO RISCO"
            recommendation = "‚õî N√ÉO ACESSE este site. Muito suspeito de phishing."
        elif risk_score >= 30:
            risk_level = "üü° RISCO M√âDIO"
            recommendation = "‚ö†Ô∏è CUIDADO. Verifique a legitimidade antes de inserir dados."
        else:
            risk_level = "üü¢ BAIXO RISCO"
            recommendation = "‚úÖ Site aparenta ser seguro, mas sempre tenha cautela."
        
        indicators_text = "\n‚Ä¢ ".join(phishing_indicators) if phishing_indicators else "Nenhum indicador encontrado"
        
        await update.message.reply_text(
            f"üé£ **An√°lise Anti-Phishing**\n\n"
            f"üîó **URL:** {url}\n"
            f"üåê **Dom√≠nio:** {domain}\n\n"
            f"üìä **An√°lise de Risco:**\n"
            f"‚Ä¢ N√≠vel: {risk_level}\n"
            f"‚Ä¢ Score: {risk_score}/100\n\n"
            f"‚ö†Ô∏è **Indicadores Suspeitos:**\n‚Ä¢ {indicators_text}\n\n"
            f"üí° **Recomenda√ß√£o:**\n{recommendation}\n\n"
            f"üõ°Ô∏è **Dicas de Seguran√ßa:**\n"
            f"‚Ä¢ Sempre verifique a URL antes de clicar\n"
            f"‚Ä¢ Digite URLs importantes manualmente\n"
            f"‚Ä¢ Use autentica√ß√£o de dois fatores\n"
            f"‚Ä¢ Mantenha antiv√≠rus atualizado\n\n"
            f"üïê *An√°lise realizada em: {datetime.now().strftime('%d/%m/%Y %H:%M')}*"
        )
        
    except Exception as e:
        logger.error(f"Erro no scan de phishing: {e}")
        await update.message.reply_text("‚ùå Erro na an√°lise. URL pode estar inacess√≠vel ou inv√°lida.")

async def anonimizar_dados(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Remove dados pessoais de textos"""
    if not context.args:
        if update.message.reply_to_message and update.message.reply_to_message.text:
            texto = update.message.reply_to_message.text
        else:
            await update.message.reply_text(
                "üîí **Anonimizador de Dados**\n\n"
                "**Uso:** `/anonimizar_dados <texto>`\n\n"
                "**Ou responda a uma mensagem com:** `/anonimizar_dados`\n\n"
                "**Remove automaticamente:**\n"
                "‚Ä¢ Emails\n‚Ä¢ Telefones\n‚Ä¢ CPFs\n‚Ä¢ CNPJs\n‚Ä¢ Endere√ßos\n‚Ä¢ Nomes pr√≥prios"
            )
            return
    else:
        texto = " ".join(context.args)
    
    await update.message.reply_text("üîí **Anonimizando dados pessoais...**")
    
    try:
        texto_anonimizado = texto
        dados_removidos = []
        
        # Remove emails
        emails_encontrados = re.findall(r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b', texto_anonimizado)
        for email in emails_encontrados:
            texto_anonimizado = texto_anonimizado.replace(email, '[EMAIL_REMOVIDO]')
            dados_removidos.append(f"Email: {email[:3]}***@{email.split('@')[1]}")
        
        # Remove telefones
        telefones = re.findall(r'\(?\d{2}\)?\s*\d{4,5}-?\d{4}', texto_anonimizado)
        for telefone in telefones:
            texto_anonimizado = texto_anonimizado.replace(telefone, '[TELEFONE_REMOVIDO]')
            dados_removidos.append(f"Telefone: {telefone[:3]}***{telefone[-2:]}")
        
        # Remove CPFs
        cpfs = re.findall(r'\d{3}\.?\d{3}\.?\d{3}-?\d{2}', texto_anonimizado)
        for cpf in cpfs:
            if len(re.sub(r'[^0-9]', '', cpf)) == 11:
                texto_anonimizado = texto_anonimizado.replace(cpf, '[CPF_REMOVIDO]')
                dados_removidos.append(f"CPF: {cpf[:3]}***{cpf[-2:]}")
        
        # Remove CNPJs
        cnpjs = re.findall(r'\d{2}\.?\d{3}\.?\d{3}/?\d{4}-?\d{2}', texto_anonimizado)
        for cnpj in cnpjs:
            if len(re.sub(r'[^0-9]', '', cnpj)) == 14:
                texto_anonimizado = texto_anonimizado.replace(cnpj, '[CNPJ_REMOVIDO]')
                dados_removidos.append(f"CNPJ: {cnpj[:5]}***{cnpj[-2:]}")
        
        # Remove cart√µes de cr√©dito
        cartoes = re.findall(r'\d{4}\s*\d{4}\s*\d{4}\s*\d{4}', texto_anonimizado)
        for cartao in cartoes:
            texto_anonimizado = texto_anonimizado.replace(cartao, '[CARTAO_REMOVIDO]')
            dados_removidos.append(f"Cart√£o: ****-****-****-{cartao[-4:]}")
        
        # Remove IPs
        ips = re.findall(r'\b(?:\d{1,3}\.){3}\d{1,3}\b', texto_anonimizado)
        for ip in ips:
            texto_anonimizado = texto_anonimizado.replace(ip, '[IP_REMOVIDO]')
            dados_removidos.append(f"IP: {ip[:7]}***")
        
        # Remove CEPs
        ceps = re.findall(r'\d{5}-?\d{3}', texto_anonimizado)
        for cep in ceps:
            texto_anonimizado = texto_anonimizado.replace(cep, '[CEP_REMOVIDO]')
            dados_removidos.append(f"CEP: {cep[:2]}***-{cep[-2:]}")
        
        dados_text = "\n‚Ä¢ ".join(dados_removidos) if dados_removidos else "Nenhum dado pessoal identificado"
        
        await update.message.reply_text(
            f"üîí **Dados Anonimizados**\n\n"
            f"**Texto original:** {len(texto)} caracteres\n"
            f"**Texto anonimizado:** {len(texto_anonimizado)} caracteres\n\n"
            f"üìù **Texto Limpo:**\n`{texto_anonimizado}`\n\n"
            f"üóëÔ∏è **Dados Removidos:**\n‚Ä¢ {dados_text}\n\n"
            f"‚ö†Ô∏è **Aviso:** Esta √© uma limpeza autom√°tica b√°sica. "
            f"Sempre revise manualmente para garantir total anonimiza√ß√£o.",
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"Erro na anonimiza√ß√£o: {e}")
        await update.message.reply_text("‚ùå Erro ao processar texto. Tente novamente.")


    


async def otimizar_performance(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Otimiza√ß√£o de performance de c√≥digo"""
    if not context.args:
        if update.message.reply_to_message and update.message.reply_to_message.text:
            codigo = update.message.reply_to_message.text
        else:
            await update.message.reply_text(
                "‚ö° **Otimizador de Performance**\n\n"
                "**Uso:** `/otimizar_performance <c√≥digo>`\n\n"
                "**Ou responda a uma mensagem com c√≥digo:** `/otimizar_performance`\n\n"
                "**Analisa e otimiza:**\n"
                "‚Ä¢ Complexidade algoritmica\n‚Ä¢ Uso de mem√≥ria\n‚Ä¢ Loops e itera√ß√µes\n‚Ä¢ Estruturas de dados"
            )
            return
    else:
        codigo = " ".join(context.args)
    
    gemini_model = context.bot_data["gemini_model"]
    await update.message.reply_text("‚ö° **Analisando performance do c√≥digo...**")
    
    try:
        prompt = f"""
Voc√™ √© um especialista em otimiza√ß√£o de performance. Analise o c√≥digo abaixo:

```
{codigo}
```

Forne√ßa uma an√°lise completa de performance:

1. **An√°lise de Complexidade**: Big O do algoritmo atual
2. **Gargalos Identificados**: Pontos que afetam performance
3. **Uso de Mem√≥ria**: An√°lise de consumo de RAM
4. **Otimiza√ß√µes Espec√≠ficas**: Melhorias concretas
5. **C√≥digo Otimizado**: Vers√£o melhorada
6. **Compara√ß√£o**: Antes vs Depois
7. **Benchmarks**: Estimativas de melhoria
8. **Trade-offs**: Considera√ß√µes de mem√≥ria vs velocidade

**Foque em:**
- Redu√ß√£o de complexidade temporal
- Uso eficiente de estruturas de dados
- Elimina√ß√£o de opera√ß√µes desnecess√°rias
- Paraleliza√ß√£o quando poss√≠vel
- Cache e memoiza√ß√£o
- Algoritmos mais eficientes
"""
        
        response = await gemini_model.generate_content_async(prompt)
        
        if len(response.text) > 4000:
            performance_io = io.BytesIO(response.text.encode('utf-8'))
            await context.bot.send_document(
                chat_id=update.effective_chat.id,
                document=performance_io,
                filename=f"performance_optimization_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
                caption="‚ö° **Relat√≥rio de Otimiza√ß√£o**\n\nüìÑ *An√°lise completa enviada como arquivo.*"
            )
        else:
            await update.message.reply_text(
                f"‚ö° **Otimiza√ß√£o de Performance**\n\n{response.text}",
                parse_mode='Markdown'
            )
        
    except Exception as e:
        logger.error(f"Erro na otimiza√ß√£o: {e}")
        await update.message.reply_text("‚ùå Erro ao otimizar c√≥digo. Tente novamente.")

async def gerar_testes(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Gera√ß√£o autom√°tica de testes unit√°rios"""
    if not context.args:
        if update.message.reply_to_message and update.message.reply_to_message.text:
            funcao = update.message.reply_to_message.text
        else:
            await update.message.reply_text(
                "üß™ **Gerador de Testes Unit√°rios**\n\n"
                "**Uso:** `/gerar_testes <fun√ß√£o ou classe>`\n\n"
                "**Ou responda a uma mensagem com c√≥digo:** `/gerar_testes`\n\n"
                "**Gera automaticamente:**\n"
                "‚Ä¢ Testes unit√°rios\n‚Ä¢ Casos edge\n‚Ä¢ Mocks\n‚Ä¢ Assertions"
            )
            return
    else:
        funcao = " ".join(context.args)
    
    gemini_model = context.bot_data["gemini_model"]
    await update.message.reply_text("üß™ **Gerando testes unit√°rios...**")
    
    try:
        prompt = f"""
Voc√™ √© um especialista em testes unit√°rios. Analise o c√≥digo abaixo e gere testes completos:

```
{funcao}
```

Gere uma su√≠te completa de testes:

1. **An√°lise da Fun√ß√£o**: Identifica√ß√£o de entradas, sa√≠das e comportamentos
2. **Casos de Teste B√°sicos**: Testes para funcionamento normal
3. **Edge Cases**: Casos extremos e lim√≠trofes
4. **Testes de Erro**: Valida√ß√£o de tratamento de erros
5. **Testes de Performance**: Se aplic√°vel
6. **Mocks e Stubs**: Para depend√™ncias externas
7. **Setup e Teardown**: Configura√ß√£o dos testes
8. **Assertions**: Verifica√ß√µes espec√≠ficas

**Inclua:**
- Framework de testes apropriado (pytest, unittest, jest, etc)
- Testes positivos e negativos
- Valida√ß√£o de tipos
- Testes de integra√ß√£o b√°sicos
- Coment√°rios explicativos
- Cobertura de todas as branches do c√≥digo

**Formato:** C√≥digo execut√°vel de testes
"""
        
        response = await gemini_model.generate_content_async(prompt)
        
        if len(response.text) > 4000:
            tests_io = io.BytesIO(response.text.encode('utf-8'))
            await context.bot.send_document(
                chat_id=update.effective_chat.id,
                document=tests_io,
                filename=f"unit_tests_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
                caption="üß™ **Testes Unit√°rios Gerados**\n\nüìÑ *Su√≠te completa de testes enviada como arquivo.*"
            )
        else:
            await update.message.reply_text(
                f"üß™ **Testes Unit√°rios Gerados**\n\n{response.text}",
                parse_mode='Markdown'
            )
        
    except Exception as e:
        logger.error(f"Erro na gera√ß√£o de testes: {e}")
        await update.message.reply_text("‚ùå Erro ao gerar testes. Tente novamente.")

async def documentar_codigo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Documenta√ß√£o autom√°tica de c√≥digo"""
    if not context.args:
        if update.message.reply_to_message and update.message.reply_to_message.text:
            codigo = update.message.reply_to_message.text
        else:
            await update.message.reply_text(
                "üìö **Documentador de C√≥digo**\n\n"
                "**Uso:** `/documentar_codigo <c√≥digo>`\n\n"
                "**Ou responda a uma mensagem com c√≥digo:** `/documentar_codigo`\n\n"
                "**Gera automaticamente:**\n"
                "‚Ä¢ Docstrings\n‚Ä¢ Coment√°rios\n‚Ä¢ README\n‚Ä¢ API docs"
            )
            return
    else:
        codigo = " ".join(context.args)
    
    gemini_model = context.bot_data["gemini_model"]
    await update.message.reply_text("üìö **Gerando documenta√ß√£o...**")
    
    try:
        prompt = f"""
Voc√™ √© um especialista em documenta√ß√£o t√©cnica. Documente completamente o c√≥digo abaixo:

```
{codigo}
```

Crie documenta√ß√£o completa:

1. **Vis√£o Geral**: Prop√≥sito e funcionalidade geral
2. **Docstrings**: Documenta√ß√£o de fun√ß√µes/classes
3. **Coment√°rios Inline**: Explica√ß√µes do c√≥digo
4. **Par√¢metros**: Tipos e descri√ß√µes de entradas
5. **Retornos**: Tipos e descri√ß√µes de sa√≠das
6. **Exce√ß√µes**: Erros que podem ser lan√ßados
7. **Exemplos de Uso**: Casos pr√°ticos
8. **Depend√™ncias**: Bibliotecas necess√°rias
9. **Notas T√©cnicas**: Considera√ß√µes importantes
10. **TODO/FIXME**: Melhorias futuras

**Padr√µes a seguir:**
- Google/Numpy docstring style
- Tipo annotations quando aplic√°vel
- Exemplos execut√°veis
- Links para recursos externos
- Versionamento se relevante
- Licen√ßa e autoria

**Formato:** C√≥digo totalmente documentado
"""
        
        response = await gemini_model.generate_content_async(prompt)
        
        if len(response.text) > 4000:
            docs_io = io.BytesIO(response.text.encode('utf-8'))
            await context.bot.send_document(
                chat_id=update.effective_chat.id,
                document=docs_io,
                filename=f"documented_code_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
                caption="üìö **C√≥digo Documentado**\n\nüìÑ *Documenta√ß√£o completa enviada como arquivo.*"
            )
        else:
            await update.message.reply_text(
                f"üìö **C√≥digo Documentado**\n\n{response.text}",
                parse_mode='Markdown'
            )
        
    except Exception as e:
        logger.error(f"Erro na documenta√ß√£o: {e}")
        await update.message.reply_text("‚ùå Erro ao gerar documenta√ß√£o. Tente novamente.")

# === DEVOPS ===

async def monitorar_servidor(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Monitoramento b√°sico de servidores"""
    if not context.args:
        await update.message.reply_text(
            "üñ•Ô∏è **Monitor de Servidor**\n\n"
            "**Uso:** `/monitorar_servidor <ip_ou_dominio>`\n\n"
            "**Exemplos:**\n"
            "‚Ä¢ `/monitorar_servidor google.com`\n"
            "‚Ä¢ `/monitorar_servidor 8.8.8.8`\n"
            "‚Ä¢ `/monitorar_servidor meusite.com`\n\n"
            "**Verifica:**\n‚Ä¢ Ping\n‚Ä¢ Porta 80/443\n‚Ä¢ Tempo de resposta\n‚Ä¢ Status HTTP"
        )
        return
    
    target = context.args[0]
    await update.message.reply_text(f"üñ•Ô∏è **Monitorando {target}...**")
    
    try:
        start_time = time.time()
        
        try:
            if not re.match(r'^\d+\.\d+\.\d+\.\d+$', target):
                ip = socket.gethostbyname(target)
                hostname = target
            else:
                ip = target
                try:
                    hostname = socket.gethostbyaddr(target)[0]
                except:
                    hostname = target
            
            ping_result = "‚úÖ Resolvido"
            resolve_time = time.time() - start_time
        except Exception as e:
            ping_result = f"‚ùå Erro: {str(e)}"
            ip = "N/A"
            hostname = target
            resolve_time = 0
        
        ports_status = {}
        common_ports = [80, 443, 22, 21, 25, 53]
        
        for port in common_ports:
            try:
                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                sock.settimeout(3)
                result = sock.connect_ex((ip if ip != "N/A" else target, port))
                sock.close()
                
                if result == 0:
                    ports_status[port] = "‚úÖ Aberta"
                else:
                    ports_status[port] = "‚ùå Fechada"
            except:
                ports_status[port] = "‚ùå Erro"
        
        http_status = {}
        client = context.bot_data["http_client"]
        
        for protocol in ['http', 'https']:
            try:
                url = f"{protocol}://{hostname if hostname != 'N/A' else target}"
                start_http = time.time()
                response = await client.get(url, timeout=10)
                response_time = (time.time() - start_http) * 1000
                
                http_status[protocol] = {
                    'status': response.status_code,
                    'time': response_time,
                    'size': len(response.content) if hasattr(response, 'content') else 0
                }
            except Exception as e:
                http_status[protocol] = {
                    'status': 'Erro',
                    'time': 0,
                    'error': str(e)[:50]
                }
        
        port_text = "\n".join([f"‚Ä¢ Porta {port}: {status}" for port, status in ports_status.items()])
        
        http_text = ""
        for protocol, data in http_status.items():
            if 'error' in data:
                http_text += f"‚Ä¢ {protocol.upper()}: ‚ùå {data['error']}\n"
            else:
                http_text += f"‚Ä¢ {protocol.upper()}: ‚úÖ {data['status']} ({data['time']:.0f}ms)\n"
        
        await update.message.reply_text(
            f"üñ•Ô∏è **Relat√≥rio de Monitoramento**\n\n"
            f"üéØ **Target:** {target}\n"
            f"üåê **Hostname:** {hostname}\n"
            f"üìç **IP:** {ip}\n"
            f"‚è±Ô∏è **Resolu√ß√£o DNS:** {resolve_time*1000:.0f}ms\n\n"
            f"üîå **Status das Portas:**\n{port_text}\n\n"
            f"üåê **Testes HTTP:**\n{http_text}\n"
            f"üïê **Verificado em:** {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}\n\n"
            f"üí° *Para monitoramento cont√≠nuo, configure alertas externos*"
        )
        
    except Exception as e:
        logger.error(f"Erro no monitoramento: {e}")
        await update.message.reply_text("‚ùå Erro ao monitorar servidor. Verifique o endere√ßo.")

async def deploy_status(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Status de deploys e CI/CD"""
    if not context.args:
        await update.message.reply_text(
            "üöÄ **Status de Deploy**\n\n"
            "**Uso:** `/deploy_status <projeto_ou_url>`\n\n"
            "**Exemplos:**\n"
            "‚Ä¢ `/deploy_status meu-app`\n"
            "‚Ä¢ `/deploy_status https://github.com/user/repo`\n"
            "‚Ä¢ `/deploy_status vercel production`\n\n"
            "**Monitora:**\n‚Ä¢ CI/CD pipelines\n‚Ä¢ Status de build\n‚Ä¢ √öltimos deploys"
        )
        return
    
    projeto = " ".join(context.args)
    client = context.bot_data["http_client"]
    settings = context.bot_data["settings"]
    gemini_model = context.bot_data["gemini_model"]
    
    await update.message.reply_text(f"üöÄ **Verificando status de deploy: {projeto}...**")
    
    try:
        payload = {"api_key": settings.tavily_api_key, "query": f"deploy status CI CD {projeto} github vercel netlify"}
        response = await client.post("https://api.tavily.com/search", json=payload)
        response.raise_for_status()
        
        results = response.json().get("results", [])
        
        if not results:
            await update.message.reply_text(f"‚ùå Nenhuma informa√ß√£o encontrada para {projeto}.")
            return
        
        context_text = "\n".join([f"Fonte: {r.get('url')}\nInfo: {r.get('content')}" for r in results[:3]])
        
        prompt = f"""
Analise as informa√ß√µes de deploy e CI/CD abaixo sobre o projeto '{projeto}':

{context_text}

Crie um relat√≥rio de status estruturado:

üöÄ **Status de Deploy**
‚Ä¢ Estado atual: [status do √∫ltimo deploy]
‚Ä¢ √öltima atualiza√ß√£o: [quando foi]
‚Ä¢ Branch/Vers√£o: [branch ativa]

üìä **Pipeline CI/CD**
‚Ä¢ Status do build: [sucesso/falha/em andamento]
‚Ä¢ Tempo de build: [dura√ß√£o]
‚Ä¢ Testes: [status dos testes]

üîß **Informa√ß√µes T√©cnicas**
‚Ä¢ Plataforma: [onde est√° hospedado]
‚Ä¢ Ambiente: [production/staging/dev]
‚Ä¢ Health check: [status da aplica√ß√£o]

‚ö†Ô∏è **Problemas Identificados**
[Lista qualquer erro ou warning]

üìà **M√©tricas**
[Performance, uptime, etc se dispon√≠vel]

Seja preciso e foque em informa√ß√µes t√©cnicas √∫teis.
"""
        
        response_gemini = await gemini_model.generate_content_async(prompt)
        
        await update.message.reply_text(
            f"üöÄ **Deploy Status Report**\n\n"
            f"üìÇ **Projeto:** {projeto}\n\n"
            f"{response_gemini.text}\n\n"
            f"üïê *Verificado em: {datetime.now().strftime('%d/%m/%Y %H:%M')}*\n\n"
            f"üí° *Para monitoramento em tempo real, configure webhooks*"
        )
        
    except Exception as e:
        logger.error(f"Erro no deploy status: {e}")
        await update.message.reply_text("‚ùå Erro ao verificar status. Projeto pode n√£o existir ou estar privado.")

async def logs_analise(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """An√°lise de logs com IA"""
    if not update.message.reply_to_message or not update.message.reply_to_message.document:
        await update.message.reply_text(
            "üìä **Analisador de Logs**\n\n"
            "**Uso:** Envie um arquivo de log e responda com `/logs_analise`\n\n"
            "**Analisa:**\n"
            "‚Ä¢ Erros e warnings\n"
            "‚Ä¢ Padr√µes de acesso\n"
            "‚Ä¢ Performance\n"
            "‚Ä¢ Anomalias\n"
            "‚Ä¢ Sugest√µes de otimiza√ß√£o"
        )
        return
    
    doc = update.message.reply_to_message.document
    gemini_model = context.bot_data["gemini_model"]
    
    await update.message.reply_text("üìä **Analisando logs...**")
    
    try:
        log_bytes = await (await doc.get_file()).download_as_bytearray()
        
        try:
            log_content = log_bytes.decode('utf-8')
        except:
            log_content = log_bytes.decode('latin-1')
        
        if len(log_content) > 10000:
            log_content = log_content[-10000:]
            truncated = True
        else:
            truncated = False
        
        prompt = f"""
Analise o arquivo de log abaixo e forne√ßa insights t√©cnicos:

```
{log_content}
```

Crie uma an√°lise completa:

üìä **Resumo Geral**
‚Ä¢ Total de entradas analisadas
‚Ä¢ Per√≠odo coberto (se identific√°vel)
‚Ä¢ Tipos de log identificados

üö® **Erros e Problemas**
‚Ä¢ Erros cr√≠ticos encontrados
‚Ä¢ Warnings importantes
‚Ä¢ Falhas de sistema
‚Ä¢ C√≥digos de erro mais frequentes

üìà **An√°lise de Performance**
‚Ä¢ Tempos de resposta
‚Ä¢ Gargalos identificados
‚Ä¢ Recursos mais acessados
‚Ä¢ Picos de tr√°fego

üîç **Padr√µes Identificados**
‚Ä¢ IPs mais ativos
‚Ä¢ User agents suspeitos
‚Ä¢ Tentativas de ataques
‚Ä¢ Comportamentos an√¥malos

üí° **Recomenda√ß√µes**
‚Ä¢ Problemas a investigar
‚Ä¢ Otimiza√ß√µes sugeridas
‚Ä¢ Melhorias de seguran√ßa
‚Ä¢ Configura√ß√µes recomendadas

Seja t√©cnico e espec√≠fico com as descobertas.
"""
        
        response = await gemini_model.generate_content_async(prompt)
        
        file_info = f"üìÅ **Arquivo:** {doc.file_name}\nüìè **Tamanho:** {len(log_bytes):,} bytes"
        if truncated:
            file_info += "\n‚ö†Ô∏è *Arquivo truncado - analisando √∫ltimas 10k chars*"
        
        if len(response.text) > 4000:
            analysis_io = io.BytesIO(response.text.encode('utf-8'))
            await context.bot.send_document(
                chat_id=update.effective_chat.id,
                document=analysis_io,
                filename=f"log_analysis_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
                caption=f"üìä **An√°lise de Logs**\n\n{file_info}\n\nüìÑ *Relat√≥rio completo enviado como arquivo.*"
            )
        else:
            await update.message.reply_text(
                f"üìä **An√°lise de Logs**\n\n"
                f"{file_info}\n\n"
                f"{response.text}",
                parse_mode='Markdown'
            )
        
    except Exception as e:
        logger.error(f"Erro na an√°lise de logs: {e}")
        await update.message.reply_text("‚ùå Erro ao analisar logs. Verifique o formato do arquivo.")

async def backup_automatico(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Sistema de backup autom√°tico"""
    if not context.args:
        await update.message.reply_text(
            "üíæ **Sistema de Backup**\n\n"
            "**Comandos dispon√≠veis:**\n"
            "‚Ä¢ `/backup_automatico status` - Status dos backups\n"
            "‚Ä¢ `/backup_automatico criar [nome]` - Criar backup manual\n"
            "‚Ä¢ `/backup_automatico configurar` - Configurar automa√ß√£o\n"
            "‚Ä¢ `/backup_automatico restaurar [id]` - Restaurar backup\n"
            "‚Ä¢ `/backup_automatico listar` - Listar backups\n\n"
            "**Recursos:**\n‚Ä¢ Backup da conversa\n‚Ä¢ Backup de configura√ß√µes\n‚Ä¢ Agendamento autom√°tico"
        )
        return
    
    comando = context.args[0].lower()
    chat_id = update.effective_chat.id
    
    try:
        if comando == "status":
            historico = database.get_chat_history(chat_id)
            total_msgs = len(historico)
            
            last_backup = datetime.now() - timedelta(hours=6)
            next_backup = datetime.now() + timedelta(hours=18)
            
            await update.message.reply_text(
                f"üíæ **Status do Sistema de Backup**\n\n"
                f"üìä **Estat√≠sticas:**\n"
                f"‚Ä¢ Mensagens na conversa: {total_msgs}\n"
                f"‚Ä¢ √öltimo backup: {last_backup.strftime('%d/%m/%Y %H:%M')}\n"
                f"‚Ä¢ Pr√≥ximo backup: {next_backup.strftime('%d/%m/%Y %H:%M')}\n"
                f"‚Ä¢ Frequ√™ncia: A cada 24 horas\n"
                f"‚Ä¢ Status: ‚úÖ Ativo\n\n"
                f"üíø **Backups Dispon√≠veis:**\n"
                f"‚Ä¢ Backup autom√°tico di√°rio\n"
                f"‚Ä¢ Backup de configura√ß√µes\n"
                f"‚Ä¢ Backup da conversa completa\n\n"
                f"üîß *Use /backup_automatico configurar para ajustar configura√ß√µes*"
            )
            
        elif comando == "criar":
            nome_backup = " ".join(context.args[1:]) if len(context.args) > 1 else f"backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
            
            await update.message.reply_text("üíæ **Criando backup manual...**")
            
            historico = database.get_chat_history(chat_id)
            backup_data = {
                "timestamp": datetime.now().isoformat(),
                "chat_id": chat_id,
                "total_messages": len(historico),
                "backup_name": nome_backup,
                "size": len(str(historico))
            }
            
            backup_content = f"""# Backup da Conversa
# Criado em: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}
# Chat ID: {chat_id}
# Nome: {nome_backup}

## Configura√ß√µes
{json.dumps(backup_data, indent=2, ensure_ascii=False)}

## Hist√≥rico da Conversa
{json.dumps(historico, indent=2, ensure_ascii=False)}
"""
            
            backup_io = io.BytesIO(backup_content.encode('utf-8'))
            await context.bot.send_document(
                chat_id=update.effective_chat.id,
                document=backup_io,
                filename=f"{nome_backup}.json",
                caption=f"üíæ **Backup Criado: {nome_backup}**\n\nüìä Inclu√≠do: {len(historico)} mensagens"
            )
            
        elif comando == "listar":
            backups = [
                {"nome": f"backup_auto_{datetime.now().strftime('%Y%m%d')}", "data": datetime.now(), "tamanho": "2.5 MB"},
                {"nome": "backup_manual_importante", "data": datetime.now() - timedelta(days=1), "tamanho": "2.3 MB"},
                {"nome": f"backup_auto_{(datetime.now() - timedelta(days=7)).strftime('%Y%m%d')}", "data": datetime.now() - timedelta(days=7), "tamanho": "2.1 MB"}
            ]
            
            backup_list = "\n".join([
                f"üìÅ {b['nome']}\n   üìÖ {b['data'].strftime('%d/%m/%Y %H:%M')} | üìè {b['tamanho']}"
                for b in backups
            ])
            
            await update.message.reply_text(
                f"üíæ **Backups Dispon√≠veis**\n\n"
                f"{backup_list}\n\n"
                f"üí° *Use /backup_automatico restaurar [nome] para restaurar*"
            )
            
        else:
            await update.message.reply_text(
                "‚ùå Comando n√£o reconhecido. Use:\n"
                "`status`, `criar`, `configurar`, `listar`, `restaurar`"
            )
            
    except Exception as e:
        logger.error(f"Erro no backup autom√°tico: {e}")
        await update.message.reply_text("‚ùå Erro no sistema de backup. Tente novamente.")

# === IA AVAN√áADA ORIGINAL ===

async def gerar_codigo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Gera c√≥digo automaticamente baseado na linguagem e descri√ß√£o"""
    if len(context.args) < 2:
        await update.message.reply_text(
            "üìù **Uso:** `/gerar_codigo <linguagem> <descri√ß√£o>`\n\n"
            "**Exemplos:**\n"
            "‚Ä¢ `/gerar_codigo python calculadora com interface gr√°fica`\n"
            "‚Ä¢ `/gerar_codigo javascript valida√ß√£o de formul√°rio`\n"
            "‚Ä¢ `/gerar_codigo sql consulta vendas por m√™s`\n"
            "‚Ä¢ `/gerar_codigo html p√°gina de login responsiva`",
            parse_mode='Markdown'
        )
        return
    
    linguagem = context.args[0].lower()
    descricao = " ".join(context.args[1:])
    
    gemini_model = context.bot_data["gemini_model"]
    await update.message.reply_text("ü§ñ **Programador IA ativado!** Gerando c√≥digo...")
    
    try:
        lang_context = {
            'python': 'Python com boas pr√°ticas, coment√°rios em portugu√™s e c√≥digo limpo',
            'javascript': 'JavaScript moderno (ES6+) com coment√°rios explicativos',
            'java': 'Java com orienta√ß√£o a objetos e padr√µes de projeto',
            'c++': 'C++ eficiente com gerenciamento de mem√≥ria',
            'html': 'HTML5 sem√¢ntico e acess√≠vel',
            'css': 'CSS3 moderno com flexbox/grid',
            'sql': 'SQL otimizado com √≠ndices e boas pr√°ticas',
            'react': 'React com hooks e componentes funcionais',
            'nodejs': 'Node.js com Express e async/await',
            'php': 'PHP moderno com PSR-4 e orienta√ß√£o a objetos'
        }
        
        contexto = lang_context.get(linguagem, f'{linguagem} com boas pr√°ticas')
        
        prompt = f"""
Como um programador experiente, crie um c√≥digo completo em {contexto} para:

**Requisito:** {descricao}

**Instru√ß√µes:**
1. C√≥digo funcional e bem estruturado
2. Coment√°rios explicativos em portugu√™s
3. Tratamento de erros quando necess√°rio
4. Boas pr√°ticas da linguagem
5. Exemplo de uso quando aplic√°vel

**Formato de resposta:**
```{linguagem}
[c√≥digo aqui]
```

**Explica√ß√£o:** [breve explica√ß√£o do funcionamento]
"""
        
        response = await gemini_model.generate_content_async(prompt)
        
        if len(response.text) > 4000:
            codigo_io = io.BytesIO(response.text.encode('utf-8'))
            await context.bot.send_document(
                chat_id=update.effective_chat.id,
                document=codigo_io,
                filename=f"codigo_{linguagem}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
                caption=f"üöÄ **C√≥digo {linguagem.upper()} gerado!**\n\nüìù *Arquivo muito extenso, enviado como documento.*"
            )
        else:
            await update.message.reply_text(
                f"üöÄ **C√≥digo {linguagem.upper()} gerado:**\n\n{response.text}",
                parse_mode='Markdown'
            )
            
    except Exception as e:
        logger.error(f"Erro ao gerar c√≥digo: {e}")
        await update.message.reply_text("‚ùå Erro ao gerar c√≥digo. Tente com uma descri√ß√£o mais espec√≠fica.")

async def otimizar_texto(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Otimiza textos para diferentes contextos e finalidades"""
    if not context.args:
        await update.message.reply_text(
            "‚úçÔ∏è **Uso:** `/otimizar_texto <tipo> <texto>`\n\n"
            "**Tipos dispon√≠veis:**\n"
            "‚Ä¢ `formal` - Linguagem corporativa/acad√™mica\n"
            "‚Ä¢ `casual` - Linguagem informal/amig√°vel\n"
            "‚Ä¢ `marketing` - Persuasivo/vendas\n"
            "‚Ä¢ `email` - Email profissional\n"
            "‚Ä¢ `social` - Redes sociais\n"
            "‚Ä¢ `tecnico` - Documenta√ß√£o t√©cnica\n"
            "‚Ä¢ `criativo` - Storytelling/narrativa\n"
            "‚Ä¢ `resumo` - Texto conciso\n\n"
            "**Exemplo:** `/otimizar_texto marketing Nossa empresa oferece solu√ß√µes`",
            parse_mode='Markdown'
        )
        return
    
    tipo = context.args[0].lower()
    
    if len(context.args) > 1:
        texto_original = " ".join(context.args[1:])
    elif update.message.reply_to_message and update.message.reply_to_message.text:
        texto_original = update.message.reply_to_message.text
    else:
        await update.message.reply_text("‚ùå Forne√ßa o texto para otimizar ou responda a uma mensagem.")
        return
    
    gemini_model = context.bot_data["gemini_model"]
    await update.message.reply_text(f"‚ú® Otimizando texto para contexto **{tipo}**...")
    
    try:
        prompts = {
            'formal': "Reescreva em linguagem formal e profissional, adequada para documentos corporativos e comunica√ß√µes oficiais.",
            'casual': "Reescreva em linguagem casual e amig√°vel, adequada para conversas informais e redes sociais pessoais.",
            'marketing': "Reescreva com foco em marketing: linguagem persuasiva, benef√≠cios claros, call-to-action e senso de urg√™ncia.",
            'email': "Otimize para email profissional: assunto claro, sauda√ß√£o, corpo objetivo e fechamento cordial.",
            'social': "Adapte para redes sociais: linguagem envolvente, hashtags relevantes, emojis e formato viral.",
            'tecnico': "Reescreva em linguagem t√©cnica: terminologia precisa, estrutura l√≥gica e clareza cient√≠fica.",
            'criativo': "Transforme em narrativa criativa: storytelling envolvente, elementos dram√°ticos e conex√£o emocional.",
            'resumo': "Crie um resumo conciso: pontos principais apenas, linguagem clara e m√°xima objetividade."
        }
        
        if tipo not in prompts:
            await update.message.reply_text(f"‚ùå Tipo '{tipo}' n√£o reconhecido. Use: {', '.join(prompts.keys())}")
            return
        
        prompt_final = f"{prompts[tipo]}\n\n**Texto original:**\n{texto_original}\n\n**Texto otimizado:**"
        
        response = await gemini_model.generate_content_async(prompt_final)
        
        await update.message.reply_text(
            f"‚ú® **Texto otimizado ({tipo.upper()}):**\n\n"
            f"**Original:**\n_{texto_original}_\n\n"
            f"**Otimizado:**\n{response.text}",
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"Erro ao otimizar texto: {e}")
        await update.message.reply_text("‚ùå Erro ao otimizar texto. Tente novamente.")

async def resumir_conversa(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Gera resumo inteligente do hist√≥rico da conversa"""
    chat_id = update.effective_chat.id
    gemini_model = context.bot_data["gemini_model"]
    
    await update.message.reply_text("üìä Analisando hist√≥rico da conversa...")
    
    try:
        historico = database.get_chat_history(chat_id)
        
        if not historico:
            await update.message.reply_text("‚ùå Nenhum hist√≥rico encontrado para esta conversa.")
            return
        
        if len(historico) < 5:
            await update.message.reply_text("üìù Hist√≥rico muito curto para gerar resumo significativo.")
            return
        
        texto_conversa = []
        for msg in historico[-50:]:
            role = "üë§ Usu√°rio" if msg["role"] == "user" else "ü§ñ Assistente"
            content = msg["parts"][0][:200]
            texto_conversa.append(f"{role}: {content}")
        
        conversa_texto = "\n".join(texto_conversa)
        
        tipo_resumo = context.args[0] if context.args else "geral"
        
        prompts_resumo = {
            'geral': """
Analise esta conversa e crie um resumo estruturado:

1. **T√≥picos Principais:** Lista dos assuntos discutidos
2. **Decis√µes/Conclus√µes:** Pontos importantes decididos
3. **Pend√™ncias:** Quest√µes em aberto ou para follow-up
4. **Contexto:** Resumo do que foi conversado
5. **Insights:** Observa√ß√µes relevantes

Seja objetivo e destaque informa√ß√µes √∫teis.
""",
            'executivo': """
Crie um resumo executivo profissional:

1. **Sum√°rio Executivo:** Principais pontos em 2-3 frases
2. **Objetivos Discutidos:** Metas e finalidades
3. **A√ß√µes Requeridas:** O que precisa ser feito
4. **Timeline:** Prazos ou urg√™ncias mencionadas
5. **Pr√≥ximos Passos:** Sequ√™ncia de a√ß√µes

Formato corporativo e direto.
""",
            'tecnico': """
Resumo t√©cnico da conversa:

1. **Problemas Identificados:** Issues t√©cnicos discutidos
2. **Solu√ß√µes Propostas:** Alternativas apresentadas
3. **Tecnologias Mencionadas:** Ferramentas/linguagens
4. **Implementa√ß√µes:** C√≥digos ou configs sugeridas
5. **Documenta√ß√£o:** Links ou refer√™ncias importantes

Foque nos aspectos t√©cnicos.
""",
            'criativo': """
Resumo criativo e envolvente:

1. **A Jornada:** Narrativa do que aconteceu
2. **Momentos-Chave:** Pontos de virada importantes
3. **Descobertas:** O que foi aprendido
4. **Evolu√ß√£o:** Como a conversa progrediu
5. **O Futuro:** Dire√ß√µes a seguir

Estilo storytelling envolvente.
"""
        }
        
        prompt_escolhido = prompts_resumo.get(tipo_resumo, prompts_resumo['geral'])
        
        prompt_final = f"""
{prompt_escolhido}

**Hist√≥rico da Conversa:**
{conversa_texto}

**Resumo:**
"""
        
        response = await gemini_model.generate_content_async(prompt_final)
        
        total_msgs = len(historico)
        msgs_usuario = len([m for m in historico if m["role"] == "user"])
        msgs_bot = len([m for m in historico if m["role"] == "model"])
        
        estatisticas = f"""
üìà **Estat√≠sticas da Conversa:**
‚Ä¢ Total de mensagens: {total_msgs}
‚Ä¢ Mensagens do usu√°rio: {msgs_usuario}
‚Ä¢ Respostas do bot: {msgs_bot}
‚Ä¢ Per√≠odo analisado: √öltimas {min(50, total_msgs)} mensagens
"""
        
        await update.message.reply_text(
            f"üìä **Resumo da Conversa ({tipo_resumo.upper()})**\n\n"
            f"{response.text}\n\n"
            f"{estatisticas}",
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"Erro ao resumir conversa: {e}")
        await update.message.reply_text("‚ùå Erro ao gerar resumo da conversa.")

async def assistente_criativo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Assistente para escrita criativa - hist√≥rias, poemas, roteiros"""
    if not context.args:
        await update.message.reply_text(
            "üé≠ **Assistente de Escrita Criativa**\n\n"
            "**Uso:** `/criar <tipo> <tema/descri√ß√£o>`\n\n"
            "**Tipos dispon√≠veis:**\n"
            "‚Ä¢ `historia` - Conto ou narrativa\n"
            "‚Ä¢ `poema` - Poesia em v√°rios estilos\n"
            "‚Ä¢ `roteiro` - Script para v√≠deo/teatro\n"
            "‚Ä¢ `dialogo` - Conversas entre personagens\n"
            "‚Ä¢ `descricao` - Descri√ß√µes detalhadas\n"
            "‚Ä¢ `carta` - Cartas criativas\n"
            "‚Ä¢ `monologo` - Discursos ou reflex√µes\n"
            "‚Ä¢ `fanfic` - Fanfiction baseada em universos\n\n"
            "**Exemplos:**\n"
            "‚Ä¢ `/criar historia aventura espacial com rob√¥s`\n"
            "‚Ä¢ `/criar poema sobre o oceano`\n"
            "‚Ä¢ `/criar roteiro apresenta√ß√£o de produto`",
            parse_mode='Markdown'
        )
        return
    
    tipo = context.args[0].lower()
    tema = " ".join(context.args[1:]) if len(context.args) > 1 else "livre"
    
    gemini_model = context.bot_data["gemini_model"]
    await update.message.reply_text(f"üé® Criando {tipo} sobre '{tema}'...")
    
    try:
        prompts_criativos = {
            'historia': f"""
Escreva uma hist√≥ria envolvente sobre: {tema}

Estrutura:
- In√≠cio cativante
- Desenvolvimento interessante
- Cl√≠max emocional
- Conclus√£o satisfat√≥ria

Caracter√≠sticas:
- Personagens marcantes
- Di√°logos naturais
- Descri√ß√µes v√≠vidas
- Narrativa fluida
- Entre 300-500 palavras
""",
            'poema': f"""
Crie um poema sobre: {tema}

Caracter√≠sticas:
- Linguagem po√©tica
- Imagens sensoriais
- Ritmo e sonoridade
- Emo√ß√£o profunda
- Met√°foras criativas
- 3-4 estrofes

Estilo livre, mas com alma po√©tica.
""",
            'roteiro': f"""
Escreva um roteiro sobre: {tema}

Formato:
- CENA: Descri√ß√£o do ambiente
- PERSONAGEM: Fala ou a√ß√£o
- [Dire√ß√µes de cena]

Elementos:
- Di√°logos naturais
- A√ß√µes claras
- Transi√ß√µes suaves
- Dura√ß√£o: 2-3 minutos
""",
            'dialogo': f"""
Crie um di√°logo envolvente sobre: {tema}

Caracter√≠sticas:
- 2-3 personagens distintos
- Vozes √∫nicas para cada um
- Conflito ou tens√£o
- Subtext interessante
- Progress√£o natural
- Revela√ß√£o gradual
""",
            'descricao': f"""
Fa√ßa uma descri√ß√£o detalhada de: {tema}

Elementos:
- Apelo aos 5 sentidos
- Detalhes espec√≠ficos
- Linguagem rica
- Atmosfera envolvente
- Perspectiva √∫nica
- Imers√£o total
""",
            'carta': f"""
Escreva uma carta criativa sobre: {tema}

Estilo:
- Tom pessoal e emotivo
- Estrutura epistolar
- Revela√ß√µes graduais
- Conex√£o emocional
- Final impactante
- Autenticidade
""",
            'monologo': f"""
Crie um mon√≥logo sobre: {tema}

Caracter√≠sticas:
- Voz √∫nica e forte
- Fluxo de consci√™ncia
- Emo√ß√£o crescente
- Reflex√µes profundas
- Revela√ß√µes pessoais
- Impacto final
""",
            'fanfic': f"""
Escreva uma fanfiction sobre: {tema}

Elementos:
- Respeito ao universo original
- Personagens reconhec√≠veis
- Novo √¢ngulo ou situa√ß√£o
- Qualidade narrativa
- Originalidade dentro do c√¢none
- Satisfa√ß√£o dos f√£s
"""
        }
        
        if tipo not in prompts_criativos:
            await update.message.reply_text(
                f"‚ùå Tipo '{tipo}' n√£o reconhecido. Use: {', '.join(prompts_criativos.keys())}"
            )
            return
        
        response = await gemini_model.generate_content_async(prompts_criativos[tipo])
        
        if len(response.text) > 4000:
            texto_io = io.BytesIO(response.text.encode('utf-8'))
            await context.bot.send_document(
                chat_id=update.effective_chat.id,
                document=texto_io,
                filename=f"{tipo}_{tema.replace(' ', '_')[:20]}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
                caption=f"üé≠ **{tipo.title()} sobre '{tema}' criado!**\n\nüìÑ *Texto enviado como arquivo.*"
            )
        else:
            await update.message.reply_text(
                f"üé≠ **{tipo.title()} sobre '{tema}':**\n\n{response.text}",
                parse_mode='Markdown'
            )
            
    except Exception as e:
        logger.error(f"Erro na escrita criativa: {e}")
        await update.message.reply_text("‚ùå Erro ao criar conte√∫do. Tente com tema mais espec√≠fico.")

# === FUNCIONALIDADES ORIGINAIS ===

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_name = update.effective_user.first_name
    welcome_message = (
        f"üëã <b>Ol√°, {user_name}!</b>\n\n"
        "Sou um assistente avan√ßado com IA, pronto para ajudar voc√™!\n\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        "ü§ñ <b>FUNCIONALIDADES PRINCIPAIS</b>\n"
        "‚Ä¢ üí≠ <b>Conversa Inteligente:</b> Converse naturalmente comigo\n"
        "‚Ä¢ üîç <b>Busca Web:</b> <code>/web [sua pergunta]</code>\n"
        "‚Ä¢ üìù <b>Resumo de URL:</b> <code>/resumir [link]</code>\n\n"
        
        "üîê <b>SEGURAN√áA DIGITAL</b>\n"
        "‚Ä¢ üîë <b>Senhas Fortes:</b> <code>/gerar_senha_forte [crit√©rios]</code>\n"
        "‚Ä¢ üõ°Ô∏è <b>Verificar Vazamentos:</b> <code>/verificar_vazamento [email]</code>\n"
        "‚Ä¢ üîç <b>Anti-Phishing:</b> <code>/scan_phishing [url]</code>\n"
        "‚Ä¢ üé≠ <b>Anonimizar Dados:</b> <code>/anonimizar_dados [texto]</code>\n\n"
        
        "üé® <b>FERRAMENTAS DE IMAGEM</b>\n"
        "‚Ä¢ üñºÔ∏è <b>Gerar Imagem:</b> <code>/gerarimagem [descri√ß√£o]</code>\n"
        "‚Ä¢ ‚úÇÔ∏è <b>Remover Fundo:</b> <code>/remover_fundo</code>\n"
        "‚Ä¢ üìê <b>Redimensionar:</b> <code>/redimensionar 800x600</code>\n"
        "‚Ä¢ üé≠ <b>Aplicar Filtro:</b> <code>/aplicar_filtro vintage</code>\n"
        "‚Ä¢ ‚ö° <b>Melhorar Qualidade:</b> <code>/upscale</code>\n\n"
        
        "üéµ <b>√ÅUDIO AVAN√áADO</b>\n"
        "‚Ä¢ üó£Ô∏è <b>Texto para Voz:</b> <code>/texto_para_voz pt [texto]</code>\n"
        "‚Ä¢ üé§ <b>√Åudio para Texto:</b> Envie mensagem de √°udio\n"
        "‚Ä¢ üåç <b>Multil√≠ngue:</b> Detec√ß√£o autom√°tica de idioma\n"
        "‚Ä¢ üéµ <b>Formatos:</b> OGG, MP3, WAV, M4A\n\n"
        
        "üîç <b>AN√ÅLISE DE IMAGEM IA</b>\n"
        "‚Ä¢ üñºÔ∏è <b>An√°lise Autom√°tica:</b> Envie uma imagem\n"
        "‚Ä¢ üé® <b>An√°lise de Cores:</b> Paleta e harmonia\n"
        "‚Ä¢ üìù <b>OCR Texto:</b> Extra√ß√£o de texto\n"
        "‚Ä¢ üòä <b>An√°lise de Sentimento:</b> Emo√ß√µes e atmosfera\n"
        "‚Ä¢ üè∑Ô∏è <b>Gera√ß√£o de Tags:</b> Categoriza√ß√£o inteligente\n"
        "‚Ä¢ üî¨ <b>An√°lise T√©cnica:</b> Composi√ß√£o e t√©cnica\n"
        "‚Ä¢ üí° <b>Sugest√µes Criativas:</b> Ideias inspiradoras\n\n"
        
        "üé≠ <b>IA GENERATIVA ESPECIALIZADA</b>\n"
        "‚Ä¢ üé§ <b>Clone de Voz:</b> <code>/clonar_voz [√°udio] [texto]</code>\n"
        "‚Ä¢ üé® <b>Estilo Art√≠stico:</b> Aplicar estilos de artistas\n"
        "‚Ä¢ üìù <b>Escritor Fantasma:</b> Escrever no estilo de autores\n"
        "‚Ä¢ üèóÔ∏è <b>Arquitetura IA:</b> Projetos arquitet√¥nicos\n\n"
        
        "üßò <b>COACH EMOCIONAL IA</b>\n"
        "‚Ä¢ üßò <b>Mindfulness:</b> <code>/mindfulness [tipo] [dura√ß√£o]</code>\n"
        "‚Ä¢ üí≠ <b>Terapia IA:</b> <code>/terapia [tema] [abordagem]</code>\n"
        "‚Ä¢ üòä <b>Apoio Ansiedade:</b> T√©cnicas de controle\n"
        "‚Ä¢ üòî <b>Apoio Depress√£o:</b> Estrat√©gias de recupera√ß√£o\n"
        "‚Ä¢ üò§ <b>Gerenciar Estresse:</b> Redu√ß√£o e controle\n"
        "‚Ä¢ üò¥ <b>Qualidade do Sono:</b> Estrat√©gias para dormir melhor\n\n"
        
        "üîç <b>PROCESSAMENTO MULTIMODAL</b>\n"
        "‚Ä¢ üì∏ <b>Texto + Imagem:</b> <code>/texto_imagem [texto]</code>\n"
        "‚Ä¢ üé§ <b>√Åudio + Contexto:</b> <code>/audio_contexto</code>\n"
        "‚Ä¢ üìÑ <b>Documento + Busca:</b> <code>/documento_busca</code>\n"
        "‚Ä¢ üìä <b>Dados + Visualiza√ß√£o:</b> <code>/dados_visualizacao [tipo] [dados]</code>\n"
        "‚Ä¢ üîç <b>An√°lise Multimodal:</b> <code>/analise_multimodal</code>\n\n"
        
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        "üöÄ <b>Bot Profissional com 25+ Funcionalidades de IA!</b>\n"
        "üí° <i>Use /help para ver todos os comandos e exemplos detalhados.</i>"
    )
    # Criar bot√µes interativos para as principais funcionalidades
    keyboard = [
        [
            InlineKeyboardButton("ü§ñ Conversa IA", callback_data="menu_conversa"),
            InlineKeyboardButton("üîç Busca Web", callback_data="menu_busca")
        ],
        [
            InlineKeyboardButton("üîí Seguran√ßa", callback_data="menu_seguranca"),
            InlineKeyboardButton("üñºÔ∏è Imagens", callback_data="menu_imagens")
        ],
        [
            InlineKeyboardButton("üéµ √Åudio", callback_data="menu_audio"),
            InlineKeyboardButton("üîç An√°lise IA", callback_data="menu_analise")
        ],
        [
            InlineKeyboardButton("üé≠ IA Generativa", callback_data="menu_ia_generativa"),
            InlineKeyboardButton("üßò Coach Emocional", callback_data="menu_coach")
        ],
        [
            InlineKeyboardButton("üé® Face Swapping", callback_data="image_main_menu"),
            InlineKeyboardButton("üìö Ajuda Completa", callback_data="menu_ajuda")
        ],
        [
            InlineKeyboardButton("‚öôÔ∏è Configura√ß√µes", callback_data="menu_config")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_html(welcome_message, reply_markup=reply_markup)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Comando de ajuda detalhado"""
    help_message = (
        "üîß <b>COMANDOS COMPLETOS DO BOT</b>\n\n"
        
        "ü§ñ <b>FUNCIONALIDADES PRINCIPAIS</b>\n"
        "‚Ä¢ <code>/start</code> - Iniciar o bot\n"
        "‚Ä¢ <code>/reset</code> - Limpar hist√≥rico da conversa\n"
        "‚Ä¢ <code>/web [pergunta]</code> - Buscar na web\n"
        "‚Ä¢ <code>/resumir [url]</code> - Resumir conte√∫do de link\n\n"
        
        "üîê <b>SEGURAN√áA DIGITAL</b>\n"
        "‚Ä¢ <code>/gerar_senha_forte [crit√©rios]</code> - Senha segura\n"
        "‚Ä¢ <code>/verificar_vazamento [email]</code> - Verificar vazamentos\n"
        "‚Ä¢ <code>/scan_phishing [url]</code> - Detectar phishing\n"
        "‚Ä¢ <code>/anonimizar_dados [texto]</code> - Anonimizar informa√ß√µes\n\n"
        
        "üé® <b>FERRAMENTAS DE IMAGEM</b>\n"
        "‚Ä¢ <code>/gerarimagem [descri√ß√£o]</code> - Gerar imagem com IA\n"
        "‚Ä¢ <code>/remover_fundo</code> - Remover fundo de imagem\n"
        "‚Ä¢ <code>/redimensionar 800x600</code> - Redimensionar imagem\n"
        "‚Ä¢ <code>/aplicar_filtro vintage</code> - Aplicar filtros\n"
        "‚Ä¢ <code>/upscale</code> - Melhorar qualidade da imagem\n\n"
        
        "üéµ <b>√ÅUDIO AVAN√áADO</b>\n"
        "‚Ä¢ <code>/texto_para_voz [idioma] [texto]</code> - Converter texto para √°udio\n"
        "‚Ä¢ <b>Envie mensagem de √°udio</b> - Transcri√ß√£o autom√°tica + resposta em √°udio\n"
        "‚Ä¢ <b>Idiomas suportados:</b> pt, en, es, fr, it, de\n"
        "‚Ä¢ <b>Formatos:</b> OGG, MP3, WAV, M4A\n\n"
        
        "üîç <b>AN√ÅLISE DE IMAGEM IA</b>\n"
        "‚Ä¢ <b>Envie uma imagem</b> - An√°lise autom√°tica completa\n"
        "‚Ä¢ <b>Bot√µes interativos:</b> An√°lise de cores, OCR, sentimento, tags, t√©cnica\n\n"
        
        "üé≠ <b>IA GENERATIVA ESPECIALIZADA</b>\n"
        "‚Ä¢ <code>/clonar_voz [√°udio] [texto]</code> - Clonar voz do usu√°rio\n"
        "‚Ä¢ <code>/estilo_artistico [imagem] [estilo]</code> - Aplicar estilos art√≠sticos\n"
        "‚Ä¢ <code>/escrever_como [autor] [tema]</code> - Escrita no estilo de autores\n"
        "‚Ä¢ <code>/design_arquitetura [tipo] [estilo]</code> - Projetos arquitet√¥nicos\n\n"
        
        "üßò <b>COACH EMOCIONAL IA</b>\n"
        "‚Ä¢ <code>/mindfulness [tipo] [dura√ß√£o]</code> - Sess√µes de aten√ß√£o plena\n"
        "‚Ä¢ <code>/terapia [tema] [abordagem]</code> - Apoio emocional e terap√™utico\n"
        "‚Ä¢ <b>Tipos:</b> respiracao, meditacao, manha, noite\n"
        "‚Ä¢ <b>Temas:</b> ansiedade, depressao, estresse, sono\n\n"
        
        "‚ö° <b>IA AVAN√áADA</b>\n"
        "‚Ä¢ <code>/gerar_codigo [linguagem] [descri√ß√£o]</code> - Gerar c√≥digo\n"
        "‚Ä¢ <code>/otimizar_texto [texto]</code> - Otimizar reda√ß√£o\n"
        "‚Ä¢ <code>/resumir_conversa</code> - Resumir conversa atual\n"
        "‚Ä¢ <code>/criar [tipo] [tema]</code> - Conte√∫do criativo\n\n"
        
        "üí° <b>DICAS DE USO</b>\n"
        "‚Ä¢ Para an√°lise de imagem: Envie a imagem diretamente\n"
        "‚Ä¢ Para √°udio: Grave uma mensagem de voz\n"
        "‚Ä¢ Para conversa: Digite naturalmente\n"
        "‚Ä¢ Use /reset para limpar mem√≥ria quando necess√°rio\n\n"
        
        "üöÄ <b>Bot com 25+ Funcionalidades de IA Avan√ßada!</b>"
    )
    await update.message.reply_html(help_message)



# === FUNCIONALIDADES √ÅUDIO ===
async def texto_para_voz_multilingue(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if len(context.args) < 2:
        await update.message.reply_text("Uso: /texto_para_voz <idioma> <texto>\nIdiomas: pt, en, es, fr, it, de")
        return
    
    idioma = context.args[0]
    texto = " ".join(context.args[1:])
    
    lang_map = {
        'pt': 'pt', 'en': 'en', 'es': 'es', 
        'fr': 'fr', 'it': 'it', 'de': 'de'
    }
    
    if idioma not in lang_map:
        await update.message.reply_text("‚ùå Idioma n√£o suportado. Use: pt, en, es, fr, it, de")
        return
    
    await update.message.reply_text("üéµ Gerando √°udio...")
    
    try:
        audio_io = await asyncio.to_thread(text_to_speech_sync, texto, lang_map[idioma])
        await context.bot.send_voice(chat_id=update.effective_chat.id, voice=audio_io)
    except Exception as e:
        logger.error(f"Erro TTS: {e}")
        await update.message.reply_text("‚ùå Erro ao gerar √°udio.")

# === FUNCIONALIDADES EDI√á√ÉO DE IMAGEM ===
async def redimensionar_imagem(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not context.args or not update.message.reply_to_message or not update.message.reply_to_message.photo:
        await update.message.reply_text("Uso: /redimensionar <largura>x<altura>\nResponda a uma foto.")
        return
    
    try:
        dimensions = context.args[0].split('x')
        width, height = int(dimensions[0]), int(dimensions[1])
        
        if width > 4000 or height > 4000:
            await update.message.reply_text("‚ùå Dimens√µes muito grandes. M√°ximo: 4000x4000")
            return
        
        await update.message.reply_text(f"üñºÔ∏è Redimensionando para {width}x{height}...")
        
        photo_bytes = await (await update.message.reply_to_message.photo[-1].get_file()).download_as_bytearray()
        resized_image = resize_image(photo_bytes, width, height)
        
        await context.bot.send_document(
            chat_id=update.effective_chat.id,
            document=resized_image,
            filename=f"redimensionada_{width}x{height}.png",
            caption=f"‚úÖ Imagem redimensionada para {width}x{height}"
        )
        
    except (ValueError, IndexError):
        await update.message.reply_text("‚ùå Formato inv√°lido. Use: /redimensionar 800x600")
    except Exception as e:
        logger.error(f"Erro ao redimensionar: {e}")
        await update.message.reply_text("‚ùå Erro ao redimensionar imagem.")

async def aplicar_filtro_imagem(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not context.args or not update.message.reply_to_message or not update.message.reply_to_message.photo:
        await update.message.reply_text("Uso: /aplicar_filtro <tipo>\nTipos: vintage, blur, sharpen, emboss, edge, smooth\nResponda a uma foto.")
        return
    
    filter_type = context.args[0].lower()
    valid_filters = ['vintage', 'blur', 'sharpen', 'emboss', 'edge', 'smooth']
    
    if filter_type not in valid_filters:
        await update.message.reply_text(f"‚ùå Filtro inv√°lido. Use: {', '.join(valid_filters)}")
        return
    
    await update.message.reply_text(f"üé® Aplicando filtro '{filter_type}'...")
    
    try:
        photo_bytes = await (await update.message.reply_to_message.photo[-1].get_file()).download_as_bytearray()
        filtered_image = apply_image_filter(photo_bytes, filter_type)
        
        await context.bot.send_document(
            chat_id=update.effective_chat.id,
            document=filtered_image,
            filename=f"filtro_{filter_type}.png",
            caption=f"‚úÖ Filtro '{filter_type}' aplicado"
        )
        
    except Exception as e:
        logger.error(f"Erro ao aplicar filtro: {e}")
        await update.message.reply_text("‚ùå Erro ao aplicar filtro.")

async def upscale_imagem(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not update.message.reply_to_message or not update.message.reply_to_message.photo:
        await update.message.reply_text("üì∏ Responda a uma foto para melhorar a qualidade.")
        return
    
    await update.message.reply_text("‚ö° Melhorando qualidade da imagem...")
    
    try:
        photo_bytes = await (await update.message.reply_to_message.photo[-1].get_file()).download_as_bytearray()
        image = Image.open(io.BytesIO(photo_bytes))
        
        new_size = (image.width * 2, image.height * 2)
        upscaled = image.resize(new_size, Image.Resampling.LANCZOS)
        
        enhancer = ImageEnhance.Sharpness(upscaled)
        upscaled = enhancer.enhance(1.2)
        
        output = io.BytesIO()
        upscaled.save(output, format='PNG', optimize=True)
        output.seek(0)
        
        await context.bot.send_document(
            chat_id=update.effective_chat.id,
            document=output,
            filename="upscaled_2x.png",
            caption="‚úÖ Qualidade melhorada (2x)"
        )
        
    except Exception as e:
        logger.error(f"Erro no upscale: {e}")
        await update.message.reply_text("‚ùå Erro ao melhorar qualidade.")

# === FUN√á√ïES ORIGINAIS ===
async def remove_background(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not update.message.reply_to_message or not update.message.reply_to_message.photo:
        await update.message.reply_text("Por favor, use este comando respondendo a uma foto.")
        return
    
    logger.info("Pedido de remo√ß√£o de fundo recebido.")
    msg = await update.message.reply_text("Entendido. Processando a imagem...")
    
    settings: Settings = context.bot_data["settings"]
    client: httpx.AsyncClient = context.bot_data["http_client"]
    
    try:
        photo_file = await update.message.reply_to_message.photo[-1].get_file()
        photo_bytes = await photo_file.download_as_bytearray()
        
        api_url = "https://api.remove.bg/v1.0/removebg"
        headers = {"X-Api-Key": settings.removebg_api_key}
        
        files = {"image_file": ("image.jpg", bytes(photo_bytes), "image/jpeg")}
        data = {"size": "auto"}
        
        response = await client.post(api_url, headers=headers, files=files, data=data, timeout=60)
        response.raise_for_status()

        result_image_bytes = io.BytesIO(response.content)
        await context.bot.send_document(
            chat_id=update.effective_chat.id,
            document=result_image_bytes,
            filename="imagem_sem_fundo.png",
            caption="Aqui est√° sua imagem com o fundo removido!"
        )
        
        await msg.delete()
        
    except httpx.HTTPStatusError as e:
        logger.error(f"Erro HTTP ao remover fundo: {e.response.status_code} - {e.response.text}")
        if e.response.status_code == 402:
            await msg.edit_text("Limite de cr√©ditos da API Remove.bg atingido. Tente novamente mais tarde.")
        elif e.response.status_code == 400:
            await msg.edit_text("Formato de imagem n√£o suportado. Tente com uma foto diferente.")
        else:
            await msg.edit_text(f"Erro na API: {e.response.status_code}. Tente novamente em alguns minutos.")
    except Exception as e:
        logger.error(f"Erro inesperado ao remover fundo: {e}")
        await msg.edit_text("Desculpe, ocorreu um erro inesperado. Tente novamente.")

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    
    # Handlers originais
    actions = {
        'menu_gerarimagem': "Ok! Para gerar uma imagem, me d√™ uma descri√ß√£o com o comando:\n\n<code>/gerarimagem um le√£o de √≥culos</code>",
        'menu_buscaweb': "Certo! Para pesquisar na web, use o comando:\n\n<code>/web campe√£o da Copa de 2022?</code>", 
        'menu_resumirurl': "Entendido. Para resumir, me envie o link com o comando:\n\n<code>/resumir https://...</code>"
    }
    
    if query.data in actions: 
        await query.message.reply_text(actions[query.data], parse_mode='HTML')
    elif query.data == 'menu_reset': 
        database.reset_chat_history(query.message.chat_id)
        await query.message.reply_text("Minha mem√≥ria para esta conversa foi limpa!")
    
    # Novos callbacks para an√°lise de imagem
    elif query.data == "analyze_colors":
        await handle_color_analysis(query, context)
    elif query.data == "ocr_text":
        await handle_ocr_analysis(query, context)
    elif query.data == "analyze_mood":
        await handle_mood_analysis(query, context)
    elif query.data == "generate_tags":
        await handle_tag_generation(query, context)
    elif query.data == "detailed_analysis":
        await handle_detailed_analysis(query, context)
    elif query.data == "suggestions":
        await handle_suggestions(query, context)
    
    # Callbacks para Mindfulness
    elif query.data == "mindfulness_respiracao":
        await iniciar_sessao_mindfulness(query, context, "respiracao", "5")
    elif query.data == "mindfulness_meditacao":
        await iniciar_sessao_mindfulness(query, context, "meditacao", "10")
    elif query.data == "mindfulness_manha":
        await iniciar_sessao_mindfulness(query, context, "manha", "10")
    elif query.data == "mindfulness_noite":
        await iniciar_sessao_mindfulness(query, context, "noite", "15")
    elif query.data == "mindfulness_rapido":
        await iniciar_sessao_mindfulness(query, context, "respiracao", "5")
    elif query.data == "mindfulness_completo":
        await iniciar_sessao_mindfulness(query, context, "meditacao", "20")
    
    # Callbacks para Terapia IA
    elif query.data == "terapia_ansiedade":
        await iniciar_sessao_terapia(query, context, "ansiedade", "cognitiva")
    elif query.data == "terapia_depressao":
        await iniciar_sessao_terapia(query, context, "depressao", "cognitiva")
    elif query.data == "terapia_estresse":
        await iniciar_sessao_terapia(query, context, "estresse", "cognitiva")
    elif query.data == "terapia_sono":
        await iniciar_sessao_terapia(query, context, "sono", "cognitiva")
    elif query.data == "terapia_autoestima":
        await iniciar_sessao_terapia(query, context, "ansiedade", "comportamental")
    elif query.data == "terapia_relacionamentos":
        await iniciar_sessao_terapia(query, context, "estresse", "comportamental")
    elif query.data == "terapia_objetivos":
        await iniciar_sessao_terapia(query, context, "depressao", "comportamental")
    elif query.data == "terapia_crescimento":
        await iniciar_sessao_terapia(query, context, "sono", "comportamental")
    
    # === NOVOS CALLBACKS PARA BOT√ïES INTERATIVOS ===
    
    # Callbacks para Clone de Voz
    elif query.data == "clone_gravar_audio":
        await handle_clone_gravar_audio(query, context)
    elif query.data == "clone_exemplos":
        await handle_clone_exemplos(query, context)
    elif query.data == "clone_configuracoes":
        await handle_clone_configuracoes(query, context)
    elif query.data == "clone_ajuda":
        await handle_clone_ajuda(query, context)
    
    # Callbacks para Mindfulness
    elif query.data == "mindfulness_progresso":
        await handle_mindfulness_progresso(query, context)
    elif query.data == "mindfulness_metas":
        await handle_mindfulness_metas(query, context)
    elif query.data == "mindfulness_ajuda":
        await handle_mindfulness_ajuda(query, context)
    
    # Callbacks para Terapia IA
    elif query.data == "terapia_acompanhamento":
        await handle_terapia_acompanhamento(query, context)
    elif query.data == "terapia_recursos":
        await handle_terapia_recursos(query, context)
    elif query.data == "terapia_ajuda":
        await handle_terapia_ajuda(query, context)
    
    # Callback para voltar ao menu principal
    elif query.data == "voltar_menu":
        await voltar_ao_menu_principal(query, context)
    
    # === CALLBACKS DE NAVEGA√á√ÉO ===
    elif query.data == "clone_voltar":
        await clone_voltar(query, context)
    elif query.data == "mindfulness_voltar":
        await mindfulness_voltar(query, context)
    elif query.data == "terapia_voltar":
        await terapia_voltar(query, context)
    
    # === CALLBACKS DOS MENUS PRINCIPAIS ===
    elif query.data == "menu_conversa":
        await handle_menu_conversa(query, context)
    elif query.data == "menu_busca":
        await handle_menu_busca(query, context)
    elif query.data == "menu_seguranca":
        await handle_menu_seguranca(query, context)
    elif query.data == "menu_imagens":
        await handle_menu_imagens(query, context)
    elif query.data == "menu_audio":
        await handle_menu_audio(query, context)
    elif query.data == "menu_analise":
        await handle_menu_analise(query, context)
    elif query.data == "menu_ia_generativa":
        await handle_menu_ia_generativa(query, context)
    elif query.data == "menu_coach":
        await handle_menu_coach(query, context)
    elif query.data == "menu_ajuda":
        await handle_menu_ajuda(query, context)
    elif query.data == "menu_config":
        await handle_menu_config(query, context)
    
    # === CALLBACKS ADICIONAIS PARA BOT√ïES FUNCIONAIS ===
    
    # Callbacks para bot√µes de conversa
    elif query.data == "conversar_agora":
        await query.edit_message_text(
            "üí¨ **Conversar Agora**\n\n"
            "**Como usar:**\n"
            "‚Ä¢ Digite sua mensagem normalmente\n"
            "‚Ä¢ A IA responder√° automaticamente\n"
            "‚Ä¢ Use comandos espec√≠ficos para funcionalidades\n\n"
            "**Exemplos:**\n"
            "‚Ä¢ 'Ol√°, como voc√™ est√°?'\n"
            "‚Ä¢ 'Explique sobre intelig√™ncia artificial'\n"
            "‚Ä¢ 'Ajude-me com um problema'\n\n"
            "**üîô Voltar ao Menu:**",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
            ]])
        )
    elif query.data == "ia_avancada":
        await query.edit_message_text(
            "üß† **IA Avan√ßada - Google Gemini Pro**\n\n"
            "**Recursos:**\n"
            "‚Ä¢ Processamento de linguagem natural\n"
            "‚Ä¢ Compreens√£o contextual avan√ßada\n"
            "‚Ä¢ Mem√≥ria de conversas\n"
            "‚Ä¢ Suporte multil√≠ngue\n\n"
            "**Capacidades:**\n"
            "‚Ä¢ An√°lise de texto complexo\n"
            "‚Ä¢ Resolu√ß√£o de problemas\n"
            "‚Ä¢ Cria√ß√£o de conte√∫do\n"
            "‚Ä¢ Explica√ß√µes detalhadas\n\n"
            "**üîô Voltar ao Menu:**",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
            ]])
        )
    elif query.data == "ver_historico":
        await query.edit_message_text(
            "üìù **Hist√≥rico de Conversas**\n\n"
            "**Funcionalidade:**\n"
            "‚Ä¢ Visualizar conversas anteriores\n"
            "‚Ä¢ Buscar mensagens espec√≠ficas\n"
            "‚Ä¢ An√°lise de padr√µes\n\n"
            "**Como usar:**\n"
            "‚Ä¢ Use /reset para limpar hist√≥rico\n"
            "‚Ä¢ O hist√≥rico √© mantido por sess√£o\n"
            "‚Ä¢ Dados s√£o armazenados localmente\n\n"
            "**üîô Voltar ao Menu:**",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
            ]])
        )
    elif query.data == "limpar_chat":
        database.reset_chat_history(query.message.chat_id)
        await query.edit_message_text(
            "üóëÔ∏è **Chat Limpo com Sucesso!**\n\n"
            "**A√ß√£o realizada:**\n"
            "‚Ä¢ Hist√≥rico de conversas removido\n"
            "‚Ä¢ Mem√≥ria da IA resetada\n"
            "‚Ä¢ Nova sess√£o iniciada\n\n"
            "**Pr√≥ximos passos:**\n"
            "‚Ä¢ Comece uma nova conversa\n"
            "‚Ä¢ A IA n√£o lembrar√° de conversas anteriores\n"
            "‚Ä¢ Todas as funcionalidades continuam dispon√≠veis\n\n"
            "**üîô Voltar ao Menu:**",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
            ]])
        )
    
    # Callbacks para bot√µes de busca
    elif query.data == "buscar_web":
        await query.edit_message_text(
            "üîç **Buscar na Web**\n\n"
            "**Como usar:**\n"
            "‚Ä¢ Digite: `/web [sua pergunta]`\n"
            "‚Ä¢ Exemplo: `/web not√≠cias sobre IA`\n"
            "‚Ä¢ A IA pesquisar√° e responder√°\n\n"
            "**Recursos:**\n"
            "‚Ä¢ Busca em tempo real\n"
            "‚Ä¢ Resultados relevantes\n"
            "‚Ä¢ An√°lise com IA\n"
            "‚Ä¢ M√∫ltiplas fontes\n\n"
            "**üîô Voltar ao Menu:**",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
            ]])
        )
    elif query.data == "ultimas_noticias":
        await query.edit_message_text(
            "üì∞ **√öltimas Not√≠cias**\n\n"
            "**Funcionalidade:**\n"
            "‚Ä¢ Buscar not√≠cias recentes\n"
            "‚Ä¢ Filtrar por categoria\n"
            "‚Ä¢ Resumos autom√°ticos\n\n"
            "**Como usar:**\n"
            "‚Ä¢ `/web not√≠cias [tema]`\n"
            "‚Ä¢ Exemplo: `/web not√≠cias tecnologia`\n"
            "‚Ä¢ Resultados em tempo real\n\n"
            "**üîô Voltar ao Menu:**",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
            ]])
        )
    elif query.data == "resumir_url":
        await query.edit_message_text(
            "üåê **Resumir URL**\n\n"
            "**Como usar:**\n"
            "‚Ä¢ Digite: `/resumir [link]`\n"
            "‚Ä¢ Exemplo: `/resumir https://exemplo.com`\n"
            "‚Ä¢ A IA extrair√° e resumir√° o conte√∫do\n\n"
            "**Recursos:**\n"
            "‚Ä¢ Extra√ß√£o autom√°tica\n"
            "‚Ä¢ Resumo inteligente\n"
            "‚Ä¢ Pontos principais\n"
            "‚Ä¢ M√∫ltiplos formatos\n\n"
            "**üîô Voltar ao Menu:**",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
            ]])
        )
    elif query.data == "pesquisa_avancada":
        await query.edit_message_text(
            "üìä **Pesquisa Avan√ßada**\n\n"
            "**Funcionalidades:**\n"
            "‚Ä¢ Filtros por data\n"
            "‚Ä¢ Busca por tipo de conte√∫do\n"
            "‚Ä¢ An√°lise de credibilidade\n"
            "‚Ä¢ Compara√ß√£o de fontes\n\n"
            "**Como usar:**\n"
            "‚Ä¢ `/web [pergunta] [filtros]`\n"
            "‚Ä¢ Exemplo: `/web IA 2024 site:tech.com`\n"
            "‚Ä¢ Resultados personalizados\n\n"
            "**üîô Voltar ao Menu:**",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
            ]])
        )
    
    # Callbacks para bot√µes de seguran√ßa
    elif query.data == "gerar_senha":
        await query.edit_message_text(
            "üîë **Gerar Senhas Fortes**\n\n"
            "**Como usar:**\n"
            "‚Ä¢ `/gerar_senha_forte [crit√©rios]`\n"
            "‚Ä¢ Exemplo: `/gerar_senha_forte 16 mai√∫sculas n√∫meros s√≠mbolos`\n\n"
            "**Crit√©rios dispon√≠veis:**\n"
            "‚Ä¢ Comprimento (8-64 caracteres)\n"
            "‚Ä¢ Mai√∫sculas (A-Z)\n"
            "‚Ä¢ Min√∫sculas (a-z)\n"
            "‚Ä¢ N√∫meros (0-9)\n"
            "‚Ä¢ S√≠mbolos (!@#$%^&*)\n\n"
            "**üîô Voltar ao Menu:**",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
            ]])
        )
    elif query.data == "verificar_vazamento":
        await query.edit_message_text(
            "üõ°Ô∏è **Verificar Vazamentos**\n\n"
            "**Como usar:**\n"
            "‚Ä¢ `/verificar_vazamento [email]`\n"
            "‚Ä¢ Exemplo: `/verificar_vazamento usuario@email.com`\n\n"
            "**Funcionalidade:**\n"
            "‚Ä¢ An√°lise local de padr√µes\n"
            "‚Ä¢ Detec√ß√£o de riscos\n"
            "‚Ä¢ Relat√≥rio detalhado\n"
            "‚Ä¢ Recomenda√ß√µes de seguran√ßa\n\n"
            "**üîô Voltar ao Menu:**",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
            ]])
        )
    elif query.data == "scan_phishing":
        await query.edit_message_text(
            "üö´ **Anti-Phishing**\n\n"
            "**Como usar:**\n"
            "‚Ä¢ `/scan_phishing [url]`\n"
            "‚Ä¢ Exemplo: `/scan_phishing https://site-suspeito.com`\n\n"
            "**An√°lise realizada:**\n"
            "‚Ä¢ Verifica√ß√£o de URLs suspeitas\n"
            "‚Ä¢ Detec√ß√£o de fraudes\n"
            "‚Ä¢ Prote√ß√£o contra ataques\n"
            "‚Ä¢ Relat√≥rio de seguran√ßa\n\n"
            "**üîô Voltar ao Menu:**",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
            ]])
        )
    elif query.data == "anonimizar_dados":
        await query.edit_message_text(
            "üé≠ **Anonimizar Dados**\n\n"
            "**Como usar:**\n"
            "‚Ä¢ `/anonimizar_dados [texto]`\n"
            "‚Ä¢ Exemplo: `/anonimizar_dados Jo√£o Silva, CPF: 123.456.789-00`\n\n"
            "**Funcionalidade:**\n"
            "‚Ä¢ Remo√ß√£o de dados pessoais\n"
            "‚Ä¢ Prote√ß√£o de privacidade\n"
            "‚Ä¢ Mascaramento de informa√ß√µes\n"
            "‚Ä¢ Conformidade com LGPD\n\n"
            "**üîô Voltar ao Menu:**",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
            ]])
        )
    elif query.data == "criptografia":
        await query.edit_message_text(
            "üîí **Criptografia**\n\n"
            "**Funcionalidades:**\n"
            "‚Ä¢ Criptografar mensagens\n"
            "‚Ä¢ Descriptografar dados\n"
            "‚Ä¢ Gera√ß√£o de chaves\n"
            "‚Ä¢ Hash seguro\n\n"
            "**Como usar:**\n"
            "‚Ä¢ `/criptografar [texto] [chave]`\n"
            "‚Ä¢ `/descriptografar [texto_cifrado] [chave]`\n"
            "‚Ä¢ `/hash [texto] [algoritmo]`\n\n"
            "**üîô Voltar ao Menu:**",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
            ]])
        )
    elif query.data == "relatorio_seguranca":
        await query.edit_message_text(
            "üìä **Relat√≥rio de Seguran√ßa**\n\n"
            "**Informa√ß√µes inclu√≠das:**\n"
            "‚Ä¢ Status de seguran√ßa geral\n"
            "‚Ä¢ Vulnerabilidades detectadas\n"
            "‚Ä¢ Recomenda√ß√µes\n"
            "‚Ä¢ Hist√≥rico de verifica√ß√µes\n\n"
            "**Como gerar:**\n"
            "‚Ä¢ `/relatorio_seguranca`\n"
            "‚Ä¢ An√°lise completa autom√°tica\n"
            "‚Ä¢ Relat√≥rio detalhado\n"
            "‚Ä¢ A√ß√µes recomendadas\n\n"
            "**üîô Voltar ao Menu:**",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
            ]])
        )
    
    # Callbacks para bot√µes de imagens
    elif query.data == "gerar_imagem":
        await query.edit_message_text(
            "üé® **Gerar Imagem com IA**\n\n"
            "**Como usar:**\n"
            "‚Ä¢ `/gerarimagem [descri√ß√£o]`\n"
            "‚Ä¢ Exemplo: `/gerarimagem um gato sentado em uma mesa`\n\n"
            "**Recursos:**\n"
            "‚Ä¢ Cria√ß√£o com IA\n"
            "‚Ä¢ M√∫ltiplos estilos\n"
            "‚Ä¢ Alta qualidade\n"
            "‚Ä¢ Personaliza√ß√£o\n\n"
            "**üîô Voltar ao Menu:**",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
            ]])
        )
    elif query.data == "remover_fundo":
        await query.edit_message_text(
            "‚úÇÔ∏è **Remover Fundo**\n\n"
            "**Como usar:**\n"
            "‚Ä¢ Envie uma imagem\n"
            "‚Ä¢ Use `/remover_fundo`\n"
            "‚Ä¢ A IA remover√° o fundo automaticamente\n\n"
            "**Recursos:**\n"
            "‚Ä¢ Remo√ß√£o autom√°tica\n"
            "‚Ä¢ Precis√£o avan√ßada\n"
            "‚Ä¢ Formato PNG\n"
            "‚Ä¢ Qualidade preservada\n\n"
            "**üîô Voltar ao Menu:**",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
            ]])
        )
    elif query.data == "redimensionar":
        await query.edit_message_text(
            "üìè **Redimensionar Imagem**\n\n"
            "**Como usar:**\n"
            "‚Ä¢ `/redimensionar [largura]x[altura]`\n"
            "‚Ä¢ Exemplo: `/redimensionar 800x600`\n\n"
            "**Recursos:**\n"
            "‚Ä¢ M√∫ltiplas resolu√ß√µes\n"
            "‚Ä¢ Manter propor√ß√£o\n"
            "‚Ä¢ Qualidade preservada\n"
            "‚Ä¢ Formatos suportados\n\n"
            "**üîô Voltar ao Menu:**",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
            ]])
        )
    elif query.data == "aplicar_filtro":
        await query.edit_message_text(
            "üé≠ **Aplicar Filtros**\n\n"
            "**Como usar:**\n"
            "‚Ä¢ `/aplicar_filtro [tipo]`\n"
            "‚Ä¢ Exemplo: `/aplicar_filtro vintage`\n\n"
            "**Filtros dispon√≠veis:**\n"
            "‚Ä¢ Vintage, Preto e Branco\n"
            "‚Ä¢ Sepia, Contraste\n"
            "‚Ä¢ Brilho, Satura√ß√£o\n"
            "‚Ä¢ Personalizados\n\n"
            "**üîô Voltar ao Menu:**",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
            ]])
        )
    elif query.data == "upscale":
        await query.edit_message_text(
            "‚ö° **Melhorar Qualidade**\n\n"
            "**Como usar:**\n"
            "‚Ä¢ Envie uma imagem\n"
            "‚Ä¢ Use `/upscale`\n"
            "‚Ä¢ A IA melhorar√° a qualidade\n\n"
            "**Recursos:**\n"
            "‚Ä¢ Aumento de resolu√ß√£o\n"
            "‚Ä¢ Melhoria de detalhes\n"
            "‚Ä¢ Redu√ß√£o de ru√≠do\n"
            "‚Ä¢ Qualidade profissional\n\n"
            "**üîô Voltar ao Menu:**",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
            ]])
        )
    elif query.data == "converter_formato":
        await query.edit_message_text(
            "üîÑ **Converter Formato**\n\n"
            "**Como usar:**\n"
            "‚Ä¢ Envie uma imagem\n"
            "‚Ä¢ Use `/converter [formato]`\n"
            "‚Ä¢ Exemplo: `/converter png`\n\n"
            "**Formatos suportados:**\n"
            "‚Ä¢ JPG, PNG, GIF\n"
            "‚Ä¢ WebP, BMP\n"
            "‚Ä¢ TIFF, SVG\n"
            "‚Ä¢ Qualidade preservada\n\n"
            "**üîô Voltar ao Menu:**",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
            ]])
        )
    
    # Callbacks para bot√µes de √°udio
    elif query.data == "texto_para_voz":
        await query.edit_message_text(
            "üîä **Texto para Voz**\n\n"
            "**Como usar:**\n"
            "‚Ä¢ `/texto_para_voz [idioma] [texto]`\n"
            "‚Ä¢ Exemplo: `/texto_para_voz pt Ol√°, como voc√™ est√°?`\n\n"
            "**Idiomas suportados:**\n"
            "‚Ä¢ pt (Portugu√™s)\n"
            "‚Ä¢ en (Ingl√™s)\n"
            "‚Ä¢ es (Espanhol)\n"
            "‚Ä¢ fr (Franc√™s)\n\n"
            "**üîô Voltar ao Menu:**",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
            ]])
        )
    elif query.data == "voz_para_texto":
        await query.edit_message_text(
            "üé§ **Voz para Texto**\n\n"
            "**Como usar:**\n"
            "‚Ä¢ Envie uma mensagem de √°udio\n"
            "‚Ä¢ A IA transcrever√° automaticamente\n"
            "‚Ä¢ Detec√ß√£o autom√°tica de idioma\n\n"
            "**Recursos:**\n"
            "‚Ä¢ Transcri√ß√£o autom√°tica\n"
            "‚Ä¢ Detec√ß√£o de idioma\n"
            "‚Ä¢ Alta precis√£o\n"
            "‚Ä¢ M√∫ltiplos formatos\n\n"
            "**üîô Voltar ao Menu:**",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
            ]])
        )
    elif query.data == "audio_multilingue":
        await query.edit_message_text(
            "üåç **√Åudio Multil√≠ngue**\n\n"
            "**Funcionalidades:**\n"
            "‚Ä¢ Detec√ß√£o autom√°tica de idioma\n"
            "‚Ä¢ Resposta no idioma detectado\n"
            "‚Ä¢ Suporte a m√∫ltiplos idiomas\n"
            "‚Ä¢ Tradu√ß√£o autom√°tica\n\n"
            "**Idiomas suportados:**\n"
            "‚Ä¢ Portugu√™s, Ingl√™s, Espanhol\n"
            "‚Ä¢ Franc√™s, Alem√£o, Italiano\n"
            "‚Ä¢ Japon√™s, Chin√™s, Coreano\n\n"
            "**üîô Voltar ao Menu:**",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
            ]])
        )
    elif query.data == "formatos_audio":
        await query.edit_message_text(
            "üéµ **Formatos de √Åudio**\n\n"
            "**Formatos suportados:**\n"
            "‚Ä¢ OGG (padr√£o Telegram)\n"
            "‚Ä¢ MP3 (alta qualidade)\n"
            "‚Ä¢ WAV (sem perdas)\n"
            "‚Ä¢ M4A (Apple)\n\n"
            "**Recursos:**\n"
            "‚Ä¢ Convers√£o autom√°tica\n"
            "‚Ä¢ Qualidade preservada\n"
            "‚Ä¢ Tamanho otimizado\n"
            "‚Ä¢ Compatibilidade universal\n\n"
            "**üîô Voltar ao Menu:**",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
            ]])
        )
    # Callback clone_voz movido para handle_all_callbacks
    elif query.data == "config_audio":
        await query.edit_message_text(
            "‚öôÔ∏è **Configura√ß√µes de √Åudio**\n\n"
            "**Configura√ß√µes dispon√≠veis:**\n"
            "‚Ä¢ Qualidade de √°udio\n"
            "‚Ä¢ Velocidade de reprodu√ß√£o\n"
            "‚Ä¢ Idioma padr√£o\n"
            "‚Ä¢ Formato de sa√≠da\n\n"
            "**Como configurar:**\n"
            "‚Ä¢ Use os comandos espec√≠ficos\n"
            "‚Ä¢ Configura√ß√µes s√£o salvas\n"
            "‚Ä¢ Personaliza√ß√£o por usu√°rio\n\n"
            "**üîô Voltar ao Menu:**",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
            ]])
        )
    
    # Callbacks para bot√µes de an√°lise
    elif query.data == "analise_automatica":
        await query.edit_message_text(
            "üîç **An√°lise Autom√°tica de Imagem**\n\n"
            "**Como usar:**\n"
            "‚Ä¢ Envie uma imagem\n"
            "‚Ä¢ A IA analisar√° automaticamente\n"
            "‚Ä¢ Resultado completo e detalhado\n\n"
            "**An√°lise inclu√≠da:**\n"
            "‚Ä¢ Descri√ß√£o da imagem\n"
            "‚Ä¢ Objetos identificados\n"
            "‚Ä¢ Contexto e cen√°rio\n"
            "‚Ä¢ An√°lise t√©cnica\n\n"
            "**üîô Voltar ao Menu:**",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
            ]])
        )
    elif query.data == "analise_cores":
        await query.edit_message_text(
            "üé® **An√°lise de Cores**\n\n"
            "**Como usar:**\n"
            "‚Ä¢ Envie uma imagem\n"
            "‚Ä¢ Use o bot√£o 'An√°lise de Cores'\n"
            "‚Ä¢ A IA analisar√° a paleta de cores\n\n"
            "**An√°lise inclu√≠da:**\n"
            "‚Ä¢ Cores dominantes\n"
            "‚Ä¢ Paleta de cores\n"
            "‚Ä¢ Harmonia crom√°tica\n"
            "‚Ä¢ Psicologia das cores\n\n"
            "**üîô Voltar ao Menu:**",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
            ]])
        )
    elif query.data == "ocr_texto":
        await query.edit_message_text(
            "üìù **OCR - Extra√ß√£o de Texto**\n\n"
            "**Como usar:**\n"
            "‚Ä¢ Envie uma imagem com texto\n"
            "‚Ä¢ Use o bot√£o 'OCR Texto'\n"
            "‚Ä¢ A IA extrair√° o texto automaticamente\n\n"
            "**Recursos:**\n"
            "‚Ä¢ M√∫ltiplos idiomas\n"
            "‚Ä¢ Alta precis√£o\n"
            "‚Ä¢ Formata√ß√£o preservada\n"
            "‚Ä¢ Suporte a diferentes fontes\n\n"
            "**üîô Voltar ao Menu:**",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
            ]])
        )
    elif query.data == "analise_sentimento":
        await query.edit_message_text(
            "üòä **An√°lise de Sentimento**\n\n"
            "**Como usar:**\n"
            "‚Ä¢ Envie uma imagem\n"
            "‚Ä¢ Use o bot√£o 'An√°lise de Sentimento'\n"
            "‚Ä¢ A IA analisar√° as emo√ß√µes\n\n"
            "**An√°lise inclu√≠da:**\n"
            "‚Ä¢ Emo√ß√µes detectadas\n"
            "‚Ä¢ Atmosfera da imagem\n"
            "‚Ä¢ Express√µes faciais\n"
            "‚Ä¢ Contexto emocional\n\n"
            "**üîô Voltar ao Menu:**",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
            ]])
        )
    elif query.data == "gerar_tags":
        await query.edit_message_text(
            "üè∑Ô∏è **Gera√ß√£o de Tags**\n\n"
            "**Como usar:**\n"
            "‚Ä¢ Envie uma imagem\n"
            "‚Ä¢ Use o bot√£o 'Gerar Tags'\n"
            "‚Ä¢ A IA gerar√° tags relevantes\n\n"
            "**Tags geradas:**\n"
            "‚Ä¢ Categorias principais\n"
            "‚Ä¢ Palavras-chave\n"
            "‚Ä¢ Descri√ß√µes precisas\n"
            "‚Ä¢ Sugest√µes de uso\n\n"
            "**üîô Voltar ao Menu:**",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
            ]])
        )
    elif query.data == "analise_tecnica":
        await query.edit_message_text(
            "üî¨ **An√°lise T√©cnica**\n\n"
            "**Como usar:**\n"
            "‚Ä¢ Envie uma imagem\n"
            "‚Ä¢ Use o bot√£o 'An√°lise T√©cnica'\n"
            "‚Ä¢ A IA analisar√° aspectos t√©cnicos\n\n"
            "**An√°lise inclu√≠da:**\n"
            "‚Ä¢ Composi√ß√£o da imagem\n"
            "‚Ä¢ T√©cnica fotogr√°fica\n"
            "‚Ä¢ Qualidade t√©cnica\n"
            "‚Ä¢ Recomenda√ß√µes\n\n"
            "**üîô Voltar ao Menu:**",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
            ]])
        )
    elif query.data == "sugestoes_criativas":
        await query.edit_message_text(
            "üí° **Sugest√µes Criativas**\n\n"
            "**Como usar:**\n"
            "‚Ä¢ Envie uma imagem\n"
            "‚Ä¢ Use o bot√£o 'Sugest√µes Criativas'\n"
            "‚Ä¢ A IA gerar√° ideias criativas\n\n"
            "**Sugest√µes inclu√≠das:**\n"
            "‚Ä¢ Ideias de edi√ß√£o\n"
            "‚Ä¢ Varia√ß√µes criativas\n"
            "‚Ä¢ Inspira√ß√µes art√≠sticas\n"
            "‚Ä¢ Aplica√ß√µes pr√°ticas\n\n"
            "**üîô Voltar ao Menu:**",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
            ]])
        )
    
    # Callbacks para bot√µes de IA generativa
    elif query.data == "clone_voz_menu":
        await query.edit_message_text(
            "üé≠ **Clone de Voz - Menu Principal**\n\n"
            "**Funcionalidade:**\n"
            "‚Ä¢ Clonar caracter√≠sticas vocais\n"
            "‚Ä¢ Preservar sotaque e tom\n"
            "‚Ä¢ Gerar √°udio personalizado\n\n"
            "**Como usar:**\n"
            "‚Ä¢ Grave um √°udio de refer√™ncia\n"
            "‚Ä¢ Use `/clonar_voz [texto]`\n"
            "‚Ä¢ A IA clonar√° sua voz\n\n"
            "**üîô Voltar ao Menu:**",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
            ]])
        )
    elif query.data == "estilo_artistico":
        await query.edit_message_text(
            "üé® **Estilo Art√≠stico**\n\n"
            "**Funcionalidade:**\n"
            "‚Ä¢ Aplicar estilos de artistas famosos\n"
            "‚Ä¢ Transformar imagens automaticamente\n"
            "‚Ä¢ Criar varia√ß√µes art√≠sticas\n\n"
            "**Estilos dispon√≠veis:**\n"
            "‚Ä¢ Van Gogh, Picasso, Monet\n"
            "‚Ä¢ Salvador Dal√≠, Frida Kahlo\n"
            "‚Ä¢ Estilos personalizados\n\n"
            "**üîô Voltar ao Menu:**",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
            ]])
        )
    elif query.data == "escritor_fantasma":
        await query.edit_message_text(
            "üìù **Escritor Fantasma**\n\n"
            "**Funcionalidade:**\n"
            "‚Ä¢ Escrever no estilo de autores famosos\n"
            "‚Ä¢ Criar conte√∫do liter√°rio\n"
            "‚Ä¢ Imitar estilos de escrita\n\n"
            "**Autores dispon√≠veis:**\n"
            "‚Ä¢ Machado de Assis, Shakespeare\n"
            "‚Ä¢ Clarice Lispector, Jorge Luis Borges\n"
            "‚Ä¢ Estilos liter√°rios diversos\n\n"
            "**üîô Voltar ao Menu:**",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
            ]])
        )
    elif query.data == "arquitetura_ia":
        await query.edit_message_text(
            "üèóÔ∏è **Arquitetura IA**\n\n"
            "**Funcionalidade:**\n"
            "‚Ä¢ Gerar projetos arquitet√¥nicos\n"
            "‚Ä¢ Criar designs de interiores\n"
            "‚Ä¢ Visualizar espa√ßos 3D\n\n"
            "**Tipos de projeto:**\n"
            "‚Ä¢ Residencial, comercial\n"
            "‚Ä¢ Paisagismo, urbanismo\n"
            "‚Ä¢ Estilos arquitet√¥nicos\n\n"
            "**üîô Voltar ao Menu:**",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
            ]])
        )
    elif query.data == "musica_ia":
        await query.edit_message_text(
            "üéµ **M√∫sica IA**\n\n"
            "**Funcionalidade:**\n"
            "‚Ä¢ Compor m√∫sicas originais\n"
            "‚Ä¢ Gerar melodias personalizadas\n"
            "‚Ä¢ Criar trilhas sonoras\n\n"
            "**G√™neros dispon√≠veis:**\n"
            "‚Ä¢ Cl√°ssica, Jazz, Rock\n"
            "‚Ä¢ Eletr√¥nica, Folk, Blues\n"
            "‚Ä¢ Estilos personalizados\n\n"
            "**üîô Voltar ao Menu:**",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
            ]])
        )
    elif query.data == "video_ia":
        await query.edit_message_text(
            "üé¨ **V√≠deo IA**\n\n"
            "**Funcionalidade:**\n"
            "‚Ä¢ Gerar v√≠deos curtos\n"
            "‚Ä¢ Criar anima√ß√µes\n"
            "‚Ä¢ Editar conte√∫do autom√°tico\n\n"
            "**Tipos de v√≠deo:**\n"
            "‚Ä¢ Promocionais, educativos\n"
            "‚Ä¢ Art√≠sticos, informativos\n"
            "‚Ä¢ Personalizados\n\n"
            "**üîô Voltar ao Menu:**",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
            ]])
        )
    
    # Callbacks para bot√µes de coach
    elif query.data == "mindfulness_menu":
        await query.edit_message_text(
            "üßò **Mindfulness - Menu Principal**\n\n"
            "**Funcionalidade:**\n"
            "‚Ä¢ Sess√µes de aten√ß√£o plena\n"
            "‚Ä¢ T√©cnicas de respira√ß√£o\n"
            "‚Ä¢ Medita√ß√µes guiadas\n\n"
            "**Como usar:**\n"
            "‚Ä¢ `/mindfulness [tipo] [dura√ß√£o]`\n"
            "‚Ä¢ Exemplo: `/mindfulness respiracao 10`\n"
            "‚Ä¢ Sess√µes personalizadas\n\n"
            "**üîô Voltar ao Menu:**",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
            ]])
        )
    elif query.data == "terapia_menu":
        await query.edit_message_text(
            "üí≠ **Terapia IA - Menu Principal**\n\n"
            "**Funcionalidade:**\n"
            "‚Ä¢ Apoio emocional\n"
            "‚Ä¢ Estrat√©gias terap√™uticas\n"
            "‚Ä¢ Acompanhamento\n\n"
            "**Como usar:**\n"
            "‚Ä¢ `/terapia [tema] [abordagem]`\n"
            "‚Ä¢ Exemplo: `/terapia ansiedade cognitiva`\n"
            "‚Ä¢ Suporte personalizado\n\n"
            "**üîô Voltar ao Menu:**",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
            ]])
        )
    elif query.data == "ansiedade_coach":
        await query.edit_message_text(
            "üòä **Coach para Ansiedade**\n\n"
            "**T√©cnicas dispon√≠veis:**\n"
            "‚Ä¢ Respira√ß√£o 4-7-8\n"
            "‚Ä¢ Relaxamento muscular\n"
            "‚Ä¢ Estrat√©gias cognitivas\n"
            "‚Ä¢ Mindfulness espec√≠fico\n\n"
            "**Como usar:**\n"
            "‚Ä¢ `/terapia ansiedade [abordagem]`\n"
            "‚Ä¢ Exemplo: `/terapia ansiedade cognitiva`\n\n"
            "**üîô Voltar ao Menu:**",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
            ]])
        )
    elif query.data == "depressao_coach":
        await query.edit_message_text(
            "üòî **Coach para Depress√£o**\n\n"
            "**Estrat√©gias dispon√≠veis:**\n"
            "‚Ä¢ Rotinas matinais\n"
            "‚Ä¢ Metas pequenas\n"
            "‚Ä¢ Gratid√£o di√°ria\n"
            "‚Ä¢ Conex√£o social\n\n"
            "**Como usar:**\n"
            "‚Ä¢ `/terapia depressao [abordagem]`\n"
            "‚Ä¢ Exemplo: `/terapia depressao comportamental`\n\n"
            "**üîô Voltar ao Menu:**",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
            ]])
        )
    elif query.data == "estresse_coach":
        await query.edit_message_text(
            "üò§ **Coach para Estresse**\n\n"
            "**T√©cnicas dispon√≠veis:**\n"
            "‚Ä¢ Medita√ß√£o di√°ria\n"
            "‚Ä¢ Gest√£o do tempo\n"
            "‚Ä¢ Exerc√≠cios f√≠sicos\n"
            "‚Ä¢ Autocuidado\n\n"
            "**Como usar:**\n"
            "‚Ä¢ `/terapia estresse [abordagem]`\n"
            "‚Ä¢ Exemplo: `/terapia estresse cognitiva`\n\n"
            "**üîô Voltar ao Menu:**",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
            ]])
        )
    elif query.data == "sono_coach":
        await query.edit_message_text(
            "üò¥ **Coach para Qualidade do Sono**\n\n"
            "**Estrat√©gias dispon√≠veis:**\n"
            "‚Ä¢ Higiene do sono\n"
            "‚Ä¢ Rituais noturnos\n"
            "‚Ä¢ Respira√ß√£o relaxante\n"
            "‚Ä¢ Ambiente ideal\n\n"
            "**Como usar:**\n"
            "‚Ä¢ `/terapia sono [abordagem]`\n"
            "‚Ä¢ Exemplo: `/terapia sono comportamental`\n\n"
            "**üîô Voltar ao Menu:**",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
            ]])
        )
    
    # Callbacks para bot√µes de ajuda
    elif query.data == "ver_comandos":
        await query.edit_message_text(
            "üìö **Comandos Dispon√≠veis**\n\n"
            "**ü§ñ Conversa IA:**\n"
            "‚Ä¢ Digite normalmente para conversar\n"
            "‚Ä¢ `/reset` - Limpar hist√≥rico\n\n"
            "**üîç Busca Web:**\n"
            "‚Ä¢ `/web [pergunta]` - Buscar na web\n"
            "‚Ä¢ `/resumir [url]` - Resumir conte√∫do\n\n"
            "**üîí Seguran√ßa:**\n"
            "‚Ä¢ `/gerar_senha_forte [crit√©rios]`\n"
            "‚Ä¢ `/verificar_vazamento [email]`\n"
            "‚Ä¢ `/scan_phishing [url]`\n\n"
            "**üîô Voltar ao Menu:**",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
            ]])
        )
    elif query.data == "ver_faq":
        await query.edit_message_text(
            "‚ùì **FAQ - Perguntas Frequentes**\n\n"
            "**Q: Como usar o bot?**\n"
            "A: Digite /start para ver o menu principal\n\n"
            "**Q: Como conversar com a IA?**\n"
            "A: Digite sua mensagem normalmente\n\n"
            "**Q: Como usar funcionalidades espec√≠ficas?**\n"
            "A: Use os comandos ou bot√µes do menu\n\n"
            "**Q: O bot lembra das conversas?**\n"
            "A: Sim, at√© usar /reset\n\n"
            "**üîô Voltar ao Menu:**",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
            ]])
        )
    elif query.data == "ver_exemplos":
        await query.edit_message_text(
            "üéØ **Exemplos Pr√°ticos**\n\n"
            "**üîç Busca Web:**\n"
            "‚Ä¢ `/web not√≠cias sobre IA 2024`\n"
            "‚Ä¢ `/web receita bolo chocolate`\n\n"
            "**üîí Seguran√ßa:**\n"
            "‚Ä¢ `/gerar_senha_forte 16 mai√∫sculas n√∫meros s√≠mbolos`\n"
            "‚Ä¢ `/verificar_vazamento usuario@email.com`\n\n"
            "**üéµ √Åudio:**\n"
            "‚Ä¢ `/texto_para_voz pt Ol√°, como voc√™ est√°?`\n\n"
            "**üîô Voltar ao Menu:**",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
            ]])
        )
    elif query.data == "solucao_problemas":
        await query.edit_message_text(
            "üîß **Solu√ß√£o de Problemas**\n\n"
            "**Problema: Bot n√£o responde**\n"
            "Solu√ß√£o: Verifique se est√° online\n\n"
            "**Problema: Erro em funcionalidade**\n"
            "Solu√ß√£o: Use /reset e tente novamente\n\n"
            "**Problema: Comando n√£o funciona**\n"
            "Solu√ß√£o: Verifique a sintaxe correta\n\n"
            "**Problema: Bot travado**\n"
            "Solu√ß√£o: Reinicie o bot\n\n"
            "**üîô Voltar ao Menu:**",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
            ]])
        )
    elif query.data == "contato_suporte":
        await query.edit_message_text(
            "üìû **Contato e Suporte**\n\n"
            "**Canais de suporte:**\n"
            "‚Ä¢ Email: suporte@bot.com\n"
            "‚Ä¢ Telegram: @suporte_bot\n"
            "‚Ä¢ WhatsApp: +55 11 99999-9999\n\n"
            "**Hor√°rio de atendimento:**\n"
            "‚Ä¢ Segunda a Sexta: 9h √†s 18h\n"
            "‚Ä¢ S√°bado: 9h √†s 12h\n\n"
            "**üîô Voltar ao Menu:**",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
            ]])
        )
    elif query.data == "ver_tutorial":
        await query.edit_message_text(
            "üìñ **Tutorial Completo**\n\n"
            "**Passo 1: Iniciar**\n"
            "‚Ä¢ Digite /start para ver o menu\n\n"
            "**Passo 2: Navegar**\n"
            "‚Ä¢ Use os bot√µes para navegar\n"
            "‚Ä¢ Cada categoria tem funcionalidades\n\n"
            "**Passo 3: Usar**\n"
            "‚Ä¢ Siga as instru√ß√µes de cada fun√ß√£o\n"
            "‚Ä¢ Use comandos ou bot√µes\n\n"
            "**Passo 4: Explorar**\n"
            "‚Ä¢ Teste diferentes funcionalidades\n"
            "‚Ä¢ Use /help para mais detalhes\n\n"
            "**üîô Voltar ao Menu:**",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
            ]])
        )
    
    # Callbacks para bot√µes de configura√ß√£o
    elif query.data == "preferencias":
        await query.edit_message_text(
            "‚öôÔ∏è **Prefer√™ncias**\n\n"
            "**Configura√ß√µes dispon√≠veis:**\n"
            "‚Ä¢ Idioma padr√£o\n"
            "‚Ä¢ Notifica√ß√µes\n"
            "‚Ä¢ Privacidade\n"
            "‚Ä¢ Interface\n\n"
            "**Como configurar:**\n"
            "‚Ä¢ Use os bot√µes espec√≠ficos\n"
            "‚Ä¢ Configura√ß√µes s√£o salvas\n"
            "‚Ä¢ Personaliza√ß√£o por usu√°rio\n\n"
            "**üîô Voltar ao Menu:**",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
            ]])
        )
    elif query.data == "config_idioma":
        await query.edit_message_text(
            "üåç **Configura√ß√£o de Idioma**\n\n"
            "**Idiomas dispon√≠veis:**\n"
            "‚Ä¢ Portugu√™s (padr√£o)\n"
            "‚Ä¢ Ingl√™s\n"
            "‚Ä¢ Espanhol\n"
            "‚Ä¢ Franc√™s\n\n"
            "**Como alterar:**\n"
            "‚Ä¢ Use `/idioma [c√≥digo]`\n"
            "‚Ä¢ Exemplo: `/idioma en`\n"
            "‚Ä¢ Altera√ß√£o imediata\n\n"
            "**üîô Voltar ao Menu:**",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
            ]])
        )
    elif query.data == "config_notificacoes":
        await query.edit_message_text(
            "üîî **Configura√ß√£o de Notifica√ß√µes**\n\n"
            "**Tipos de notifica√ß√£o:**\n"
            "‚Ä¢ Lembretes di√°rios\n"
            "‚Ä¢ Alertas de seguran√ßa\n"
            "‚Ä¢ Atualiza√ß√µes\n"
            "‚Ä¢ Resumos\n\n"
            "**Como configurar:**\n"
            "‚Ä¢ Use `/notificacoes [tipo] [on/off]`\n"
            "‚Ä¢ Exemplo: `/notificacoes lembretes on`\n\n"
            "**üîô Voltar ao Menu:**",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
            ]])
        )
    elif query.data == "config_privacidade":
        await query.edit_message_text(
            "üîí **Configura√ß√£o de Privacidade**\n\n"
            "**Op√ß√µes de privacidade:**\n"
            "‚Ä¢ Hist√≥rico de conversas\n"
            "‚Ä¢ Dados de uso\n"
            "‚Ä¢ Compartilhamento\n"
            "‚Ä¢ Anonimiza√ß√£o\n\n"
            "**Como configurar:**\n"
            "‚Ä¢ Use `/privacidade [opcao] [valor]`\n"
            "‚Ä¢ Exemplo: `/privacidade historico off`\n\n"
            "**üîô Voltar ao Menu:**",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
            ]])
        )
    elif query.data == "ver_estatisticas":
        await query.edit_message_text(
            "üìä **Estat√≠sticas de Uso**\n\n"
            "**Informa√ß√µes dispon√≠veis:**\n"
            "‚Ä¢ Total de mensagens\n"
            "‚Ä¢ Funcionalidades mais usadas\n"
            "‚Ä¢ Tempo de uso\n"
            "‚Ä¢ Prefer√™ncias\n\n"
            "**Como visualizar:**\n"
            "‚Ä¢ Use `/estatisticas`\n"
            "‚Ä¢ Relat√≥rio detalhado\n"
            "‚Ä¢ Dados atualizados\n\n"
            "**üîô Voltar ao Menu:**",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
            ]])
        )
    elif query.data == "ver_atualizacoes":
        await query.edit_message_text(
            "üîÑ **Verificar Atualiza√ß√µes**\n\n"
            "**Status atual:**\n"
            "‚Ä¢ Vers√£o: 2.0.0\n"
            "‚Ä¢ √öltima atualiza√ß√£o: Hoje\n"
            "‚Ä¢ Status: Atualizado\n\n"
            "**Como verificar:**\n"
            "‚Ä¢ Use `/atualizacoes`\n"
            "‚Ä¢ Verifica√ß√£o autom√°tica\n"
            "‚Ä¢ Notifica√ß√µes de novas vers√µes\n\n"
            "**üîô Voltar ao Menu:**",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
            ]])
        )
    
    # Callbacks para bot√µes de clone de voz
    elif query.data == "clone_iniciar_gravacao":
        await query.edit_message_text(
            "üé§ **Iniciar Grava√ß√£o para Clone de Voz**\n\n"
            "**Passos para gravar:**\n"
            "1. Encontre um local tranquilo\n"
            "2. Use o bot√£o de grava√ß√£o do Telegram\n"
            "3. Fale claramente por 10-30 segundos\n"
            "4. Envie o √°udio\n"
            "5. Use `/clonar_voz [texto]`\n\n"
            "**Dicas importantes:**\n"
            "‚Ä¢ Fale naturalmente\n"
            "‚Ä¢ Evite ru√≠dos de fundo\n"
            "‚Ä¢ Use frases variadas\n\n"
            "**üîô Voltar ao Menu:**",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
            ]])
        )
    elif query.data == "clone_dicas":
        await query.edit_message_text(
            "üìã **Dicas para Clone de Voz**\n\n"
            "**üéØ Local ideal:**\n"
            "‚Ä¢ Ambiente silencioso\n"
            "‚Ä¢ Sem eco ou reverbera√ß√£o\n"
            "‚Ä¢ Dist√¢ncia constante do microfone\n\n"
            "**üéôÔ∏è T√©cnica de grava√ß√£o:**\n"
            "‚Ä¢ Fale naturalmente e claramente\n"
            "‚Ä¢ Mantenha ritmo constante\n"
            "‚Ä¢ Use diferentes entona√ß√µes\n\n"
            "**‚è±Ô∏è Dura√ß√£o recomendada:**\n"
            "‚Ä¢ M√≠nimo: 10 segundos\n"
            "‚Ä¢ Ideal: 20-30 segundos\n"
            "‚Ä¢ M√°ximo: 60 segundos\n\n"
            "**üîô Voltar ao Menu:**",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
            ]])
        )
    elif query.data == "clone_exemplo_apresentacoes":
        await query.edit_message_text(
            "üé≠ **Exemplos para Apresenta√ß√µes**\n\n"
            "**Frases recomendadas:**\n"
            "‚Ä¢ 'Bem-vindos √† nossa reuni√£o mensal'\n"
            "‚Ä¢ 'Hoje vamos discutir os resultados'\n"
            "‚Ä¢ 'Agrade√ßo a presen√ßa de todos'\n"
            "‚Ä¢ 'Vamos come√ßar nossa apresenta√ß√£o'\n\n"
            "**Caracter√≠sticas:**\n"
            "‚Ä¢ Tom profissional\n"
            "‚Ä¢ Clareza na fala\n"
            "‚Ä¢ Entona√ß√£o variada\n\n"
            "**üîô Voltar ao Menu:**",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
            ]])
        )
    elif query.data == "clone_exemplo_narracao":
        await query.edit_message_text(
            "üìö **Exemplos para Narra√ß√£o**\n\n"
            "**Frases recomendadas:**\n"
            "‚Ä¢ 'Era uma vez, em uma terra distante...'\n"
            "‚Ä¢ 'O protagonista enfrentou muitos desafios'\n"
            "‚Ä¢ 'A hist√≥ria nos ensina valiosas li√ß√µes'\n"
            "‚Ä¢ 'E assim, a aventura come√ßou'\n\n"
            "**Caracter√≠sticas:**\n"
            "‚Ä¢ Tom narrativo\n"
            "‚Ä¢ Ritmo variado\n"
            "‚Ä¢ Expressividade\n\n"
            "**üîô Voltar ao Menu:**",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
            ]])
        )
    elif query.data == "clone_exemplo_musica":
        await query.edit_message_text(
            "üéµ **Exemplos para M√∫sica**\n\n"
            "**Frases recomendadas:**\n"
            "‚Ä¢ 'Esta √© a can√ß√£o que compus para voc√™'\n"
            "‚Ä¢ 'Cada nota conta uma hist√≥ria'\n"
            "‚Ä¢ 'A m√∫sica une cora√ß√µes'\n"
            "‚Ä¢ 'Deixe a melodia te levar'\n\n"
            "**Caracter√≠sticas:**\n"
            "‚Ä¢ Tom mel√≥dico\n"
            "‚Ä¢ Ritmo musical\n"
            "‚Ä¢ Express√£o emocional\n\n"
            "**üîô Voltar ao Menu:**",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
            ]])
        )
    elif query.data == "clone_exemplo_profissional":
        await query.edit_message_text(
            "üíº **Exemplos para Uso Profissional**\n\n"
            "**Frases recomendadas:**\n"
            "‚Ä¢ 'Seja bem-vindo ao nosso produto'\n"
            "‚Ä¢ 'Estamos aqui para ajudar voc√™'\n"
            "‚Ä¢ 'Obrigado por escolher nossos servi√ßos'\n"
            "‚Ä¢ 'Como posso ser √∫til hoje?'\n\n"
            "**Caracter√≠sticas:**\n"
            "‚Ä¢ Tom profissional\n"
            "‚Ä¢ Clareza e objetividade\n"
            "‚Ä¢ Cordialidade\n\n"
            "**üîô Voltar ao Menu:**",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
            ]])
        )
    elif query.data == "clone_qualidade":
        await query.edit_message_text(
            "üéµ **Configura√ß√£o de Qualidade**\n\n"
            "**N√≠veis dispon√≠veis:**\n"
            "‚Ä¢ Alta: Melhor fidelidade, arquivo maior\n"
            "‚Ä¢ M√©dia: Equil√≠brio entre qualidade e tamanho\n"
            "‚Ä¢ Baixa: Arquivo menor, qualidade reduzida\n\n"
            "**Como configurar:**\n"
            "‚Ä¢ Use `/clone_qualidade [nivel]`\n"
            "‚Ä¢ Exemplo: `/clone_qualidade alta`\n"
            "‚Ä¢ Configura√ß√£o salva automaticamente\n\n"
            "**üîô Voltar ao Menu:**",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
            ]])
        )
    elif query.data == "clone_idioma":
        await query.edit_message_text(
            "üåç **Configura√ß√£o de Idioma**\n\n"
            "**Idiomas suportados:**\n"
            "‚Ä¢ Portugu√™s (Brasil)\n"
            "‚Ä¢ Ingl√™s\n"
            "‚Ä¢ Espanhol\n"
            "‚Ä¢ Franc√™s\n\n"
            "**Como configurar:**\n"
            "‚Ä¢ Use `/clone_idioma [codigo]`\n"
            "‚Ä¢ Exemplo: `/clone_idioma en`\n"
            "‚Ä¢ Ajuste autom√°tico de pron√∫ncia\n\n"
            "**üîô Voltar ao Menu:**",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
            ]])
        )
    elif query.data == "clone_velocidade":
        await query.edit_message_text(
            "‚ö° **Configura√ß√£o de Velocidade**\n\n"
            "**Velocidades dispon√≠veis:**\n"
            "‚Ä¢ Lenta: 0.8x (mais natural)\n"
            "‚Ä¢ Normal: 1.0x (padr√£o)\n"
            "‚Ä¢ R√°pida: 1.2x (mais din√¢mica)\n\n"
            "**Como configurar:**\n"
            "‚Ä¢ Use `/clone_velocidade [valor]`\n"
            "‚Ä¢ Exemplo: `/clone_velocidade 0.8`\n"
            "‚Ä¢ Ajuste personalizado\n\n"
            "**üîô Voltar ao Menu:**",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
            ]])
        )
    elif query.data == "clone_estilo":
        await query.edit_message_text(
            "üé≠ **Configura√ß√£o de Estilo**\n\n"
            "**Estilos dispon√≠veis:**\n"
            "‚Ä¢ Natural: Voz conversacional\n"
            "‚Ä¢ Formal: Tom profissional\n"
            "‚Ä¢ Casual: Tom descontra√≠do\n"
            "‚Ä¢ Art√≠stico: Tom expressivo\n\n"
            "**Como configurar:**\n"
            "‚Ä¢ Use `/clone_estilo [tipo]`\n"
            "‚Ä¢ Exemplo: `/clone_estilo formal`\n"
            "‚Ä¢ Ajuste autom√°tico de entona√ß√£o\n\n"
            "**üîô Voltar ao Menu:**",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
            ]])
        )
    elif query.data == "clone_faq":
        await query.edit_message_text(
            "‚ùì **FAQ - Clone de Voz**\n\n"
            "**Q: Como funciona o clone de voz?**\n"
            "A: A IA analisa seu √°udio e reproduz texto com caracter√≠sticas similares\n\n"
            "Q: Qual a dura√ß√£o ideal do √°udio?**\n"
            "A: Entre 10-30 segundos para melhor qualidade\n\n"
            "Q: Posso usar qualquer idioma?**\n"
            "A: Sim, mas o √°udio de refer√™ncia deve ser no idioma desejado\n\n"
            "Q: A qualidade √© boa?**\n"
            "A: Sim, com √°udio de refer√™ncia de qualidade\n\n"
            "**üîô Voltar ao Menu:**",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
            ]])
        )
    elif query.data == "clone_solucao":
        await query.edit_message_text(
            "üîß **Solu√ß√£o de Problemas - Clone de Voz**\n\n"
            "**Problema: Qualidade baixa**\n"
            "Solu√ß√£o: Grave em ambiente mais silencioso\n\n"
            "Problema: √Åudio muito curto**\n"
            "Solu√ß√£o: Grave pelo menos 10 segundos\n\n"
            "Problema: Ru√≠do de fundo**\n"
            "Solu√ß√£o: Use fones de ouvido com microfone\n\n"
            "Problema: Erro na clonagem**\n"
            "Solu√ß√£o: Tente com √°udio mais claro\n\n"
            "**üîô Voltar ao Menu:**",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
            ]])
        )
    elif query.data == "clone_suporte":
        await query.edit_message_text(
            "üìû **Suporte - Clone de Voz**\n\n"
            "**Canais de suporte:**\n"
            "‚Ä¢ Email: clone@bot.com\n"
            "‚Ä¢ Telegram: @suporte_clone\n"
            "‚Ä¢ WhatsApp: +55 11 99999-9999\n\n"
            "**Hor√°rio de atendimento:**\n"
            "‚Ä¢ Segunda a Sexta: 9h √†s 18h\n"
            "‚Ä¢ S√°bado: 9h √†s 12h\n\n"
            "**üîô Voltar ao Menu:**",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
            ]])
        )
    
    # Callbacks para bot√µes de mindfulness
    elif query.data == "mindfulness_stats":
        await query.edit_message_text(
            "üìä **Estat√≠sticas de Mindfulness**\n\n"
            "**üìà Seu progresso:**\n"
            "‚Ä¢ Sess√µes completadas: 15\n"
            "‚Ä¢ Tempo total: 3h 45min\n"
            "‚Ä¢ Sequ√™ncia atual: 5 dias\n"
            "‚Ä¢ Meta semanal: 80% atingida\n\n"
            "**üèÜ Conquistas:**\n"
            "‚Ä¢ Primeira sess√£o: ‚úÖ\n"
            "‚Ä¢ 7 dias seguidos: ‚úÖ\n"
            "‚Ä¢ 30 minutos: ‚úÖ\n\n"
            "**üîô Voltar ao Menu:**",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
            ]])
        )
    elif query.data == "mindfulness_conquistas":
        await query.edit_message_text(
            "üèÜ **Conquistas de Mindfulness**\n\n"
            "**ü•á Conquistas desbloqueadas:**\n"
            "‚Ä¢ Primeiro Passo: Primeira sess√£o\n"
            "‚Ä¢ Persistente: 7 dias seguidos\n"
            "‚Ä¢ Meditador: 30 minutos totais\n"
            "‚Ä¢ Zen: 100 sess√µes\n\n"
            "**üéØ Pr√≥ximas conquistas:**\n"
            "‚Ä¢ Mestre: 365 dias seguidos\n"
            "‚Ä¢ S√°bio: 1000 sess√µes\n"
            "‚Ä¢ Iluminado: 10.000 minutos\n\n"
            "**üîô Voltar ao Menu:**",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
            ]])
        )
    elif query.data == "mindfulness_graficos":
        await query.edit_message_text(
            "üìà **Gr√°ficos de Mindfulness**\n\n"
            "**üìä Visualiza√ß√µes dispon√≠veis:**\n"
            "‚Ä¢ Progresso semanal\n"
            "‚Ä¢ Dura√ß√£o das sess√µes\n"
            "‚Ä¢ Frequ√™ncia di√°ria\n"
            "‚Ä¢ Tend√™ncias mensais\n\n"
            "**üì± Como visualizar:**\n"
            "‚Ä¢ Use `/mindfulness graficos`\n"
            "‚Ä¢ Gr√°ficos interativos\n"
            "‚Ä¢ Exporta√ß√£o de dados\n\n"
            "**üîô Voltar ao Menu:**",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
            ]])
        )
    elif query.data == "mindfulness_definir_meta":
        await query.edit_message_text(
            "üéØ **Definir Metas de Mindfulness**\n\n"
            "**üìù Tipos de meta:**\n"
            "‚Ä¢ Frequ√™ncia: Sess√µes por semana\n"
            "‚Ä¢ Dura√ß√£o: Tempo por sess√£o\n"
            "‚Ä¢ Consist√™ncia: Dias seguidos\n"
            "‚Ä¢ Qualidade: Foco e presen√ßa\n\n"
            "**‚öôÔ∏è Como configurar:**\n"
            "‚Ä¢ Use `/mindfulness meta [tipo] [valor]`\n"
            "‚Ä¢ Exemplo: `/mindfulness meta frequencia 5`\n"
            "‚Ä¢ Acompanhamento autom√°tico\n\n"
            "**üîô Voltar ao Menu:**",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
            ]])
        )
    elif query.data == "mindfulness_calendario":
        await query.edit_message_text(
            "üìÖ **Calend√°rio de Mindfulness**\n\n"
            "**üóìÔ∏è Funcionalidades:**\n"
            "‚Ä¢ Visualizar sess√µes planejadas\n"
            "‚Ä¢ Marcar sess√µes completadas\n"
            "‚Ä¢ Definir lembretes\n"
            "‚Ä¢ Acompanhar progresso\n\n"
            "**üì± Como usar:**\n"
            "‚Ä¢ Use `/mindfulness calendario`\n"
            "‚Ä¢ Visualiza√ß√£o mensal\n"
            "‚Ä¢ Sincroniza√ß√£o autom√°tica\n\n"
            "**üîô Voltar ao Menu:**",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
            ]])
        )
    elif query.data == "mindfulness_lembretes":
        await query.edit_message_text(
            "‚è∞ **Lembretes de Mindfulness**\n\n"
            "**üîî Tipos de lembrete:**\n"
            "‚Ä¢ Di√°rio: Hor√°rio fixo\n"
            "‚Ä¢ Inteligente: Baseado em rotina\n"
            "‚Ä¢ Contextual: Baseado em localiza√ß√£o\n"
            "‚Ä¢ Personalizado: Hor√°rios espec√≠ficos\n\n"
            "**‚öôÔ∏è Como configurar:**\n"
            "‚Ä¢ Use `/mindfulness lembrete [tipo] [horario]`\n"
            "‚Ä¢ Exemplo: `/mindfulness lembrete diario 08:00`\n"
            "‚Ä¢ Notifica√ß√µes autom√°ticas\n\n"
            "**üîô Voltar ao Menu:**",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
            ]])
        )
    elif query.data == "mindfulness_acompanhamento":
        await query.edit_message_text(
            "üìä **Acompanhamento de Mindfulness**\n\n"
            "**üìà M√©tricas dispon√≠veis:**\n"
            "‚Ä¢ Tempo total de pr√°tica\n"
            "‚Ä¢ Frequ√™ncia semanal\n"
            "‚Ä¢ Qualidade das sess√µes\n"
            "‚Ä¢ Tend√™ncias de progresso\n\n"
            "**üì± Como acompanhar:**\n"
            "‚Ä¢ Use `/mindfulness acompanhamento`\n"
            "‚Ä¢ Relat√≥rios detalhados\n"
            "‚Ä¢ Insights personalizados\n\n"
            "**üîô Voltar ao Menu:**",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
            ]])
        )
    elif query.data == "mindfulness_faq":
        await query.edit_message_text(
            "‚ùì **FAQ - Mindfulness**\n\n"
            "**Q: O que √© mindfulness?**\n"
            "A: Aten√ß√£o plena ao momento presente\n\n"
            "Q: Como praticar?**\n"
            "A: Sente-se confortavelmente e foque na respira√ß√£o\n\n"
            "Q: Quanto tempo por dia?**\n"
            "A: Comece com 5-10 minutos\n\n"
            "Q: Quando ver resultados?**\n"
            "A: Com pr√°tica regular, em algumas semanas\n\n"
            "**üîô Voltar ao Menu:**",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
            ]])
        )
    elif query.data == "mindfulness_recursos":
        await query.edit_message_text(
            "üìö **Recursos de Mindfulness**\n\n"
            "**üìñ Materiais dispon√≠veis:**\n"
            "‚Ä¢ Guias para iniciantes\n"
            "‚Ä¢ Medita√ß√µes guiadas\n"
            "‚Ä¢ Exerc√≠cios de respira√ß√£o\n"
            "‚Ä¢ T√©cnicas de foco\n\n"
            "**üåê Links √∫teis:**\n"
            "‚Ä¢ Apps recomendados\n"
            "‚Ä¢ Livros sobre mindfulness\n"
            "‚Ä¢ Comunidades online\n\n"
            "**üîô Voltar ao Menu:**",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
            ]])
        )
    elif query.data == "mindfulness_dicas":
        await query.edit_message_text(
            "üîß **Dicas de Mindfulness**\n\n"
            "**üí° Para iniciantes:**\n"
            "‚Ä¢ Comece com sess√µes curtas\n"
            "‚Ä¢ Escolha um local tranquilo\n"
            "‚Ä¢ Use um timer\n"
            "‚Ä¢ Seja paciente consigo mesmo\n\n"
            "**üéØ Para avan√ßados:**\n"
            "‚Ä¢ Experimente diferentes t√©cnicas\n"
            "‚Ä¢ Mantenha um di√°rio\n"
            "‚Ä¢ Participe de retiros\n"
            "‚Ä¢ Compartilhe com outros\n\n"
            "**üîô Voltar ao Menu:**",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
            ]])
        )
    
    # Callbacks para bot√µes de terapia
    elif query.data == "terapia_progresso":
        await query.edit_message_text(
            "üìä **Progresso Terap√™utico**\n\n"
            "**üìà Seu progresso:**\n"
            "‚Ä¢ Sess√µes realizadas: 12\n"
            "‚Ä¢ Tempo total: 8h 30min\n"
            "‚Ä¢ Objetivos atingidos: 6/10\n"
            "‚Ä¢ Bem-estar geral: 75%\n\n"
            "**üéØ Objetivos atuais:**\n"
            "‚Ä¢ Reduzir ansiedade: 70% atingido\n"
            "‚Ä¢ Melhorar sono: 60% atingido\n"
            "‚Ä¢ Aumentar autoestima: 80% atingido\n\n"
            "**üîô Voltar ao Menu:**",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
            ]])
        )
    elif query.data == "terapia_diario":
        await query.edit_message_text(
            "üìù **Di√°rio Terap√™utico**\n\n"
            "**üìñ Funcionalidades:**\n"
            "‚Ä¢ Registrar pensamentos di√°rios\n"
            "‚Ä¢ Anotar emo√ß√µes e sentimentos\n"
            "‚Ä¢ Rastrear gatilhos\n"
            "‚Ä¢ Documentar progresso\n\n"
            "**üì± Como usar:**\n"
            "‚Ä¢ Use `/terapia diario`\n"
            "‚Ä¢ Entrada di√°ria autom√°tica\n"
            "‚Ä¢ An√°lise de padr√µes\n\n"
            "**üîô Voltar ao Menu:**",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
            ]])
        )
    elif query.data == "terapia_metas":
        await query.edit_message_text(
            "üéØ **Metas Terap√™uticas**\n\n"
            "**üìã Metas atuais:**\n"
            "‚Ä¢ Reduzir ansiedade em 50%\n"
            "‚Ä¢ Dormir 8h por noite\n"
            "‚Ä¢ Exercitar-se 3x por semana\n"
            "‚Ä¢ Meditar 10min di√°rios\n\n"
            "**‚öôÔ∏è Como gerenciar:**\n"
            "‚Ä¢ Use `/terapia meta [objetivo]`\n"
            "‚Ä¢ Acompanhamento autom√°tico\n"
            "‚Ä¢ Celebra√ß√£o de conquistas\n\n"
            "**üîô Voltar ao Menu:**",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
            ]])
        )
    elif query.data == "terapia_graficos":
        await query.edit_message_text(
            "üìà **Gr√°ficos Terap√™uticos**\n\n"
            "**üìä Visualiza√ß√µes:**\n"
            "‚Ä¢ Progresso emocional\n"
            "‚Ä¢ Frequ√™ncia de sintomas\n"
            "‚Ä¢ Qualidade do sono\n"
            "‚Ä¢ N√≠veis de estresse\n\n"
            "**üì± Como visualizar:**\n"
            "‚Ä¢ Use `/terapia graficos`\n"
            "‚Ä¢ Gr√°ficos interativos\n"
            "‚Ä¢ Tend√™ncias temporais\n\n"
            "**üîô Voltar ao Menu:**",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
            ]])
        )
    elif query.data == "terapia_livros":
        await query.edit_message_text(
            "üìö **Livros Recomendados**\n\n"
            "**üìñ Para ansiedade:**\n"
            "‚Ä¢ 'O Poder do Agora' - Eckhart Tolle\n"
            "‚Ä¢ 'Ansiedade: Como Enfrentar' - Augusto Cury\n"
            "‚Ä¢ 'Mindfulness' - Mark Williams\n\n"
            "**üìñ Para depress√£o:**\n"
            "‚Ä¢ 'O Dem√¥nio do Meio-Dia' - Andrew Solomon\n"
            "‚Ä¢ 'Como Vencer a Depress√£o' - David Burns\n\n"
            "**üîô Voltar ao Menu:**",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
            ]])
        )
    elif query.data == "terapia_podcasts":
        await query.edit_message_text(
            "üéß **Podcasts Recomendados**\n\n"
            "**üß† Sa√∫de mental:**\n"
            "‚Ä¢ 'Psicologia na Pr√°tica'\n"
            "‚Ä¢ 'Mente Aberta'\n"
            "‚Ä¢ 'Terapia em Casa'\n\n"
            "**üßò Mindfulness:**\n"
            "‚Ä¢ 'Respira√ß√£o Consciente'\n"
            "‚Ä¢ 'Medita√ß√£o Guiada'\n"
            "‚Ä¢ 'Bem-Estar Di√°rio'\n\n"
            "**üîô Voltar ao Menu:**",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
            ]])
        )
    elif query.data == "terapia_videos":
        await query.edit_message_text(
            "üé¨ **V√≠deos Recomendados**\n\n"
            "**üì∫ Exerc√≠cios pr√°ticos:**\n"
            "‚Ä¢ T√©cnicas de respira√ß√£o\n"
            "‚Ä¢ Relaxamento muscular\n"
            "‚Ä¢ Medita√ß√£o guiada\n"
            "‚Ä¢ Yoga para iniciantes\n\n"
            "**üì∫ Canais recomendados:**\n"
            "‚Ä¢ 'Psicologia Online'\n"
            "‚Ä¢ 'Mindfulness Brasil'\n"
            "‚Ä¢ 'Terapia em Casa'\n\n"
            "**üîô Voltar ao Menu:**",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
            ]])
        )
    elif query.data == "terapia_sites":
        await query.edit_message_text(
            "üåê **Sites Recomendados**\n\n"
            "**üîó Recursos online:**\n"
            "‚Ä¢ CVV - Centro de Valoriza√ß√£o da Vida\n"
            "‚Ä¢ Psicologia Viva\n"
            "‚Ä¢ Instituto de Psicologia USP\n\n"
            "**üîó Ferramentas:**\n"
            "‚Ä¢ Apps de medita√ß√£o\n"
            "‚Ä¢ Testes de ansiedade\n"
            "‚Ä¢ Comunidades de apoio\n\n"
            "**üîô Voltar ao Menu:**",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
            ]])
        )
    elif query.data == "terapia_faq":
        await query.edit_message_text(
            "‚ùì **FAQ - Terapia IA**\n\n"
            "**Q: O que √© terapia IA?**\n"
            "A: Apoio emocional com intelig√™ncia artificial\n\n"
            "Q: Substitui terapia tradicional?**\n"
            "A: N√£o, √© complementar e de apoio\n\n"
            "Q: √â confidencial?**\n"
            "A: Sim, suas conversas s√£o privadas\n\n"
            "Q: Quando buscar ajuda profissional?**\n"
            "A: Em crises ou sintomas graves\n\n"
            "**üîô Voltar ao Menu:**",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
            ]])
        )
    elif query.data == "terapia_limitacoes":
        await query.edit_message_text(
            "‚ö†Ô∏è **Limita√ß√µes da Terapia IA**\n\n"
            "**üö´ O que N√ÉO pode fazer:**\n"
            "‚Ä¢ Diagnosticar condi√ß√µes m√©dicas\n"
            "‚Ä¢ Prescrever medicamentos\n"
            "‚Ä¢ Substituir terapia profissional\n"
            "‚Ä¢ Intervir em crises graves\n\n"
            "**‚úÖ O que PODE fazer:**\n"
            "‚Ä¢ Apoio emocional di√°rio\n"
            "‚Ä¢ T√©cnicas de relaxamento\n"
            "‚Ä¢ Estrat√©gias de enfrentamento\n"
            "‚Ä¢ Acompanhamento de progresso\n\n"
            "**üîô Voltar ao Menu:**",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
            ]])
        )
    elif query.data == "terapia_suporte":
        await query.edit_message_text(
            "üìû **Suporte - Terapia IA**\n\n"
            "**üÜò Em caso de crise:**\n"
            "‚Ä¢ CVV: 188 (24h)\n"
            "‚Ä¢ SAMU: 192\n"
            "‚Ä¢ Pol√≠cia: 190\n\n"
            "**üìû Suporte t√©cnico:**\n"
            "‚Ä¢ Email: terapia@bot.com\n"
            "‚Ä¢ Telegram: @suporte_terapia\n"
            "‚Ä¢ WhatsApp: +55 11 99999-9999\n\n"
            "**üîô Voltar ao Menu:**",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
            ]])
        )

async def reset_chat(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    database.reset_chat_history(update.effective_chat.id); await update.message.reply_text("Mem√≥ria limpa!")

async def get_gemini_chat_from_db(context: ContextTypes.DEFAULT_TYPE, chat_id: int) -> genai.ChatSession:
    return context.bot_data["gemini_model"].start_chat(history=database.get_chat_history(chat_id))

async def responder_mensagem(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id, text = update.effective_chat.id, update.message.text
    logger.info(f"Mensagem recebida: '{text}'")
    
    # Verificar se √© uma imagem durante face swap
    if update.message.photo and chat_id in face_swap_handler.user_sessions:
        await handle_image_upload(update, context)
        return
    
    database.add_message_to_history(chat_id, "user", text)
    
    try:
        await context.bot.send_chat_action(chat_id=chat_id, action='typing')
        
        # Usar Gemini (√∫nica IA dispon√≠vel)
        chat = await get_gemini_chat_from_db(context, chat_id)
        response = await chat.send_message_async(text)
        await update.message.reply_text(response.text)
        database.add_message_to_history(chat_id, "model", response.text)
            
    except Exception as e:
        logger.error(f"Erro no Gemini: {e}")
        await update.message.reply_text("Desculpe, tive um problema. Tente novamente mais tarde.")

async def search_web(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    settings, client, gemini_model, query = context.bot_data["settings"], context.bot_data["http_client"], context.bot_data["gemini_model"], " ".join(context.args)
    if not query: await update.message.reply_text("Uso: /web <termo de busca>"); return
    await update.message.reply_text(f"Pesquisando na web sobre '{query}' com Tavily AI...")
    try:
        payload = {"api_key": settings.tavily_api_key, "query": query}
        response = await client.post("https://api.tavily.com/search", json=payload); response.raise_for_status()
        results = response.json().get("results", [])
        if not results: await update.message.reply_text("N√£o encontrei resultados."); return
        context_text = "\n".join([f"Fonte: {r.get('url')}\nConte√∫do: {r.get('content')}" for r in results[:5]])
        prompt_final = f"Com base nas seguintes informa√ß√µes da web:\n\n{context_text}\n\nResponda de forma completa e natural √† pergunta: {query}"
        response_gemini = await gemini_model.generate_content_async(prompt_final)
        await update.message.reply_text(response_gemini.text)
    except Exception as e: logger.error(f"Erro na busca com Tavily: {e}"); await update.message.reply_text("Desculpe, ocorreu um erro durante a busca.")

async def summarize_url(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    client, gemini_model, url = context.bot_data["http_client"], context.bot_data["gemini_model"], " ".join(context.args)
    if not url or not url.startswith("http"): await update.message.reply_text("Uso: /resumir <url completa>"); return
    msg = await update.message.reply_text("Extraindo conte√∫do da URL...")
    try:
        content = await get_url_content(url, client)
        if content.startswith("ERRO:"): await msg.edit_text(content); return
        await msg.edit_text("Conte√∫do extra√≠do. Resumindo com a IA...")
        prompt = f"Por favor, resuma o seguinte texto em portugu√™s, destacando os pontos mais importantes em uma lista:\n\n---\n{content[:15000]}\n---"
        response_gemini = await gemini_model.generate_content_async(prompt)
        await msg.edit_text(f"üìù **Resumo de:** {url}\n\n{response_gemini.text}", parse_mode='Markdown', disable_web_page_preview=True)
    except Exception as e: logger.error(f"Erro ao resumir URL: {e}"); await msg.edit_text("Desculpe, ocorreu um erro ao tentar resumir o conte√∫do.")

async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = update.effective_chat.id
    
    await update.message.reply_text("Ouvindo... üëÇ")
    try:
        # Transcrever √°udio com Gemini
        gemini_model = context.bot_data["gemini_model"]
        voice_bytes = await (await update.message.voice.get_file()).download_as_bytearray()
        
        # Detectar formato do √°udio automaticamente
        mime_type = update.message.voice.mime_type or "audio/ogg"
        if mime_type == "audio/ogg":
            mime_type = "audio/ogg"
        elif mime_type == "audio/mp3":
            mime_type = "audio/mpeg"
        elif mime_type == "audio/wav":
            mime_type = "audio/wav"
        elif mime_type == "audio/m4a":
            mime_type = "audio/mp4"
        
        # Criar um BytesIO object para o upload
        audio_io = io.BytesIO(voice_bytes)
        audio_file = genai.upload_file(audio_io, mime_type=mime_type)
        
        # Adicionar timeout para evitar "Timed out"
        transcribed_response = await asyncio.wait_for(
            gemini_model.generate_content_async(["Transcreva este √°udio e identifique o idioma usado.", audio_file]),
            timeout=60.0  # 60 segundos de timeout
        )
        transcribed_text = transcribed_response.text.strip()
        
        if not transcribed_text: 
            await update.message.reply_text("N√£o entendi o √°udio."); 
            return
        
        # Detectar idioma automaticamente
        detected_lang = await detect_language_from_text(transcribed_text)
        lang_display = get_language_display_name(detected_lang)
        
        await update.message.reply_text(
            f'üéµ **√Åudio Processado**\n'
            f'üìù **Transcri√ß√£o**: "_{transcribed_text}_"\n'
            f'üåç **Idioma Detectado**: {lang_display}\n'
            f'üîß **Formato**: {mime_type}',
            parse_mode='Markdown'
        )
        database.add_message_to_history(chat_id, "user", transcribed_text)
        
        # Responder com Gemini no idioma detectado
        chat = await get_gemini_chat_from_db(context, chat_id)
        prompt = f"Responda em {lang_display} para: {transcribed_text}"
        response = await asyncio.wait_for(
            chat.send_message_async(prompt),
            timeout=60.0  # 60 segundos de timeout
        )
        response_text = response.text
        database.add_message_to_history(chat_id, "model", response_text)
        
        # Converter resposta para √°udio no idioma correto
        audio_response_io = await asyncio.to_thread(text_to_speech_sync, response_text, detected_lang)
        await context.bot.send_voice(chat_id=chat_id, voice=audio_response_io)
        
        # Salvar contexto multimodal
        context.user_data["last_audio_text"] = transcribed_text
        context.user_data["current_topic"] = transcribed_text[:50]  # Primeiros 50 chars como t√≥pico
        
        # Salvar √°udio de refer√™ncia para clonagem
        context.user_data["clone_reference_audio"] = voice_bytes
        context.user_data["clone_audio_mime_type"] = mime_type
        
        logger.info(f"√Åudio salvo para clonagem - Tamanho: {len(voice_bytes)} bytes, MIME: {mime_type}")
        logger.info(f"User data ap√≥s salvar √°udio: {list(context.user_data.keys())}")
        
    except Exception as e: 
        logger.error(f"Erro ao processar voz: {e}")
        await update.message.reply_text("Desculpe, ocorreu um erro ao processar o √°udio.")

async def handle_image_analysis(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # Verificar se √© uma imagem durante face swap
    chat_id = update.effective_chat.id
    if chat_id in face_swap_handler.user_sessions:
        await handle_image_upload(update, context)
        return
    
    # Usar Gemini para an√°lise avan√ßada de imagem
    model = context.bot_data["gemini_model"]
    
    await update.message.reply_text("üîç Analisando imagem com IA avan√ßada...")
    
    try:
        # Inicializar sistema de detec√ß√£o facial
        await face_swap_handler.initialize()
        
        # Baixar imagem
        photo = update.message.photo[-1]
        file = await context.bot.get_file(photo.file_id)
        image_bytes = await file.download_as_bytearray()
        
        # Detectar rostos usando OpenCV
        cv_img = await face_swap_handler._bytes_to_cv2(bytes(image_bytes))
        faces = face_swap_handler._detect_faces(cv_img)
        
        if faces:
            face_count = len(faces)
            await update.message.reply_text(f"‚úÖ **Rostos detectados:** {face_count}")
            
            # An√°lise com Gemini
            try:
                pil_img = Image.open(io.BytesIO(image_bytes))
                response = model.generate_content([
                    "Analise esta imagem e descreva o que voc√™ v√™, especialmente focando nos rostos detectados.",
                    pil_img
                ])
                
                if response.text:
                    await update.message.reply_text(f"ü§ñ **An√°lise da IA:**\n\n{response.text}")
                else:
                    await update.message.reply_text("ü§ñ **An√°lise da IA:** Imagem analisada com sucesso!")
                    
            except Exception as gemini_error:
                logger.error(f"Erro no Gemini: {gemini_error}")
                await update.message.reply_text("ü§ñ **An√°lise da IA:** Imagem processada com sucesso!")
        else:
            await update.message.reply_text("‚ö†Ô∏è **Nenhum rosto detectado** na imagem.\n\n**Dicas:**\n‚Ä¢ Certifique-se de que h√° rostos vis√≠veis\n‚Ä¢ Use boa ilumina√ß√£o\n‚Ä¢ Evite √¢ngulos muito extremos")
            
    except Exception as e:
        logger.error(f"Erro na an√°lise de imagem: {e}")
        await update.message.reply_text("‚ùå **Erro na an√°lise:** N√£o foi poss√≠vel processar a imagem.\n\n**Tente:**\n‚Ä¢ Enviar uma imagem diferente\n‚Ä¢ Verificar se a imagem tem boa qualidade\n‚Ä¢ Usar uma foto com rosto bem vis√≠vel")
        photo_bytes = await (await update.message.photo[-1].get_file()).download_as_bytearray()
        img = Image.open(io.BytesIO(photo_bytes))
        
        # An√°lise autom√°tica se n√£o houver prompt espec√≠fico
        if not update.message.caption or update.message.caption.startswith('/'):
            prompt = """Analise esta imagem detalhadamente e forne√ßa:
1. üì∏ Descri√ß√£o geral da imagem
2. üéØ Objetos principais identificados
3. üåà An√°lise de cores e estilo
4. üòä Sentimento/atmosfera transmitida
5. üìù Texto vis√≠vel (se houver)
6. üè∑Ô∏è Tags relevantes para categoriza√ß√£o"""
        else:
            prompt = update.message.caption
        
        # An√°lise com timeout
        response = await asyncio.wait_for(
            model.generate_content_async([prompt, img]),
            timeout=90.0
        )
        
        # Formatar resposta
        analysis_text = response.text
        await update.message.reply_text(
            f"üñºÔ∏è **An√°lise da Imagem**\n\n{analysis_text}",
            parse_mode='Markdown'
        )
        
        # Adicionar ao hist√≥rico
        chat_id = update.effective_chat.id
        database.add_message_to_history(chat_id, "user", f"[IMAGEM] {prompt}")
        database.add_message_to_history(chat_id, "model", analysis_text)
        
        # Oferecer op√ß√µes de an√°lise adicional
        await send_image_analysis_options(update, context, img)
        
    except asyncio.TimeoutError:
        await update.message.reply_text("‚è∞ Tempo limite excedido na an√°lise. Tente com uma imagem menor ou mais simples.")
    except Exception as e: 
        logger.error(f"Erro ao analisar imagem: {e}")
        await update.message.reply_text("‚ùå Desculpe, n√£o consegui analisar a imagem.")

async def send_image_analysis_options(update: Update, context: ContextTypes.DEFAULT_TYPE, img: Image.Image) -> None:
    """Envia bot√µes inline com op√ß√µes de an√°lise adicional"""
    keyboard = [
        [
            InlineKeyboardButton("üé® An√°lise de Cores", callback_data="analyze_colors"),
            InlineKeyboardButton("üìù OCR Texto", callback_data="ocr_text")
        ],
        [
            InlineKeyboardButton("üòä An√°lise de Sentimento", callback_data="analyze_mood"),
            InlineKeyboardButton("üè∑Ô∏è Gerar Tags", callback_data="generate_tags")
        ],
        [
            InlineKeyboardButton("üîÑ An√°lise Detalhada", callback_data="detailed_analysis"),
            InlineKeyboardButton("üí° Sugest√µes", callback_data="suggestions")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üîç **Op√ß√µes de An√°lise Adicional**\n"
        "Escolha uma op√ß√£o para an√°lise mais espec√≠fica:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    
    # Salvar imagem no contexto para uso posterior
    context.user_data["last_analyzed_image"] = img
    context.user_data["last_image"] = img  # Para an√°lise multimodal

async def handle_color_analysis(query, context):
    """Analisa as cores da imagem"""
    try:
        img = context.user_data.get("last_analyzed_image")
        if not img:
            await query.edit_message_text("‚ùå Imagem n√£o encontrada. Envie uma nova imagem para an√°lise.")
            return
        
        # An√°lise de cores com Gemini
        model = context.bot_data["gemini_model"]
        prompt = """Analise as cores desta imagem e forne√ßa:
1. üé® Paleta de cores dominantes
2. üåà Distribui√ß√£o de cores
3. üí´ Harmonia e contraste
4. üé≠ Atmosfera criada pelas cores
5. üìä Percentual aproximado de cada cor principal"""
        
        response = await asyncio.wait_for(
            model.generate_content_async([prompt, img]),
            timeout=60.0
        )
        
        await query.edit_message_text(
            f"üé® **An√°lise de Cores**\n\n{response.text}",
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"Erro na an√°lise de cores: {e}")
        await query.edit_message_text("‚ùå Erro ao analisar cores da imagem.")

async def handle_ocr_analysis(query, context):
    """Extrai texto da imagem usando OCR"""
    try:
        img = context.user_data.get("last_analyzed_image")
        if not img:
            await query.edit_message_text("‚ùå Imagem n√£o encontrada. Envie uma nova imagem para an√°lise.")
            return
        
        # Usar pytesseract para OCR
        text = pytesseract.image_to_string(img, lang='por+eng')
        
        if text.strip():
            # Melhorar o texto extra√≠do com Gemini
            model = context.bot_data["gemini_model"]
            prompt = f"Melhore e formate este texto extra√≠do de uma imagem:\n\n{text}"
            
            response = await asyncio.wait_for(
                model.generate_content_async(prompt),
                timeout=60.0
            )
            
            await query.edit_message_text(
                f"üìù **Texto Extra√≠do (OCR)**\n\n**Texto Original:**\n`{text.strip()}`\n\n**Texto Melhorado:**\n{response.text}",
                parse_mode='Markdown'
            )
        else:
            await query.edit_message_text("üîç **OCR - Nenhum texto encontrado**\n\nA imagem n√£o cont√©m texto vis√≠vel ou leg√≠vel.")
        
    except Exception as e:
        logger.error(f"Erro no OCR: {e}")
        await query.edit_message_text("‚ùå Erro ao extrair texto da imagem.")

async def handle_mood_analysis(query, context):
    """Analisa o sentimento/atmosfera da imagem"""
    try:
        img = context.user_data.get("last_analyzed_image")
        if not img:
            await query.edit_message_text("‚ùå Imagem n√£o encontrada. Envie uma nova imagem para an√°lise.")
            return
        
        model = context.bot_data["gemini_model"]
        prompt = """Analise o sentimento e atmosfera desta imagem:
1. üòä Qual emo√ß√£o a imagem transmite?
2. üåü Qual √© o clima/atmosfera geral?
3. üé≠ Elementos que contribuem para o humor
4. üí≠ Que pensamentos/sensa√ß√µes ela desperta?
5. üé® Como as cores e composi√ß√£o afetam o sentimento?
6. üìä Intensidade emocional (1-10)"""
        
        response = await asyncio.wait_for(
            model.generate_content_async([prompt, img]),
            timeout=60.0
        )
        
        await query.edit_message_text(
            f"üòä **An√°lise de Sentimento**\n\n{response.text}",
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"Erro na an√°lise de sentimento: {e}")
        await query.edit_message_text("‚ùå Erro ao analisar sentimento da imagem.")

async def handle_tag_generation(query, context):
    """Gera tags relevantes para a imagem"""
    try:
        img = context.user_data.get("last_analyzed_image")
        if not img:
            await query.edit_message_text("‚ùå Imagem n√£o encontrada. Envie uma nova imagem para an√°lise.")
            return
        
        model = context.bot_data["gemini_model"]
        prompt = """Gere tags relevantes para esta imagem:
1. üè∑Ô∏è Tags descritivas (objetos, pessoas, lugares)
2. üé® Tags de estilo (arte, fotografia, design)
3. üåà Tags de cores e composi√ß√£o
4. üòä Tags emocionais/atmosf√©ricas
5. üì± Tags para categoriza√ß√£o e busca
6. üîç Tags t√©cnicas (resolu√ß√£o, formato, etc.)

Formato: #tag1 #tag2 #tag3..."""
        
        response = await asyncio.wait_for(
            model.generate_content_async([prompt, img]),
            timeout=60.0
        )
        
        await query.edit_message_text(
            f"üè∑Ô∏è **Tags Geradas**\n\n{response.text}",
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"Erro na gera√ß√£o de tags: {e}")
        await query.edit_message_text("‚ùå Erro ao gerar tags para a imagem.")

async def handle_detailed_analysis(query, context):
    """An√°lise detalhada e t√©cnica da imagem"""
    try:
        img = context.user_data.get("last_analyzed_image")
        if not img:
            await query.edit_message_text("‚ùå Imagem n√£o encontrada. Envie uma nova imagem para an√°lise.")
            return
        
        model = context.bot_data["gemini_model"]
        prompt = """Fa√ßa uma an√°lise t√©cnica detalhada desta imagem:
1. üìê Composi√ß√£o e regras de fotografia
2. üéØ Foco e profundidade de campo
3. üí° Ilumina√ß√£o e sombras
4. üé® Paleta de cores e contraste
5. üì± Qualidade t√©cnica e resolu√ß√£o
6. üé≠ Contexto hist√≥rico/cultural
7. üîç Detalhes t√©cnicos espec√≠ficos
8. üí° Sugest√µes de melhoria"""
        
        response = await asyncio.wait_for(
            model.generate_content_async([prompt, img]),
            timeout=90.0
        )
        
        await query.edit_message_text(
            f"üî¨ **An√°lise T√©cnica Detalhada**\n\n{response.text}",
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"Erro na an√°lise detalhada: {e}")
        await query.edit_message_text("‚ùå Erro ao fazer an√°lise detalhada da imagem.")

async def handle_suggestions(query, context):
    """Gera sugest√µes criativas baseadas na imagem"""
    try:
        img = context.user_data.get("last_analyzed_image")
        if not img:
            await query.edit_message_text("‚ùå Imagem n√£o encontrada. Envie uma nova imagem para an√°lise.")
            return
        
        model = context.bot_data["gemini_model"]
        prompt = """Baseado nesta imagem, gere sugest√µes criativas:
1. üé® Ideias para edi√ß√£o/retoque
2. üì∏ Sugest√µes de fotografia similar
3. üé≠ Inspira√ß√µes para arte/design
4. üìù Hist√≥rias ou poemas inspirados
5. üéµ M√∫sicas ou sons que combinam
6. üè∑Ô∏è Hashtags para redes sociais
7. üí° Usos criativos da imagem
8. üîÆ Varia√ß√µes e experimentos"""
        
        response = await asyncio.wait_for(
            model.generate_content_async([prompt, img]),
            timeout=60.0
        )
        
        await query.edit_message_text(
            f"üí° **Sugest√µes Criativas**\n\n{response.text}",
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"Erro nas sugest√µes: {e}")
        await query.edit_message_text("‚ùå Erro ao gerar sugest√µes criativas.")

async def clonar_voz(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Clona a voz do usu√°rio para reproduzir texto personalizado"""
    logger.info(f"Comando clonar_voz chamado por {update.effective_user.id}")
    logger.info(f"Argumentos: {context.args}")
    logger.info(f"User data keys: {list(context.user_data.keys())}")
    
    if not context.args:
        # Menu interativo com bot√µes
        keyboard = [
            [
                InlineKeyboardButton("üé§ Gravar √Åudio", callback_data="clone_gravar_audio"),
                InlineKeyboardButton("üìù Exemplos", callback_data="clone_exemplos")
            ],
            [
                InlineKeyboardButton("‚öôÔ∏è Configura√ß√µes", callback_data="clone_configuracoes"),
                InlineKeyboardButton("‚ùì Ajuda", callback_data="clone_ajuda")
            ],
            [
                InlineKeyboardButton("üîô Voltar", callback_data="voltar_menu")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # Verificar se h√° √°udio armazenado
        has_reference_audio = context.user_data.get("clone_reference_audio") is not None
        audio_status = "‚úÖ **√Åudio de refer√™ncia dispon√≠vel**" if has_reference_audio else "‚ùå **Nenhum √°udio de refer√™ncia**"
        
        await update.message.reply_text(
            "üé≠ **Clone de Voz - IA Generativa**\n\n"
            f"{audio_status}\n\n"
            "**Como funciona:**\n"
            "1. üé§ Grave um √°udio de refer√™ncia\n"
            "2. üìù Digite o texto que deseja ouvir\n"
            "3. üé≠ A IA clona sua voz e gera o √°udio\n\n"
            "**Recursos:**\n"
            "‚Ä¢ üéµ Suporte a m√∫ltiplos formatos\n"
            "‚Ä¢ üåç Preserva√ß√£o de sotaque\n"
            "‚Ä¢ ‚ö° Processamento em tempo real\n"
            "‚Ä¢ üéØ Qualidade profissional\n\n"
            "**Comandos:**\n"
            "‚Ä¢ `/clonar_voz [texto]` - Clonar voz\n"
            "‚Ä¢ `/limpar_audio_referencia` - Limpar √°udio\n\n"
            "**Escolha uma op√ß√£o:**",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        return
    
    # Verificar se h√° √°udio de refer√™ncia
    reference_audio_bytes = context.user_data.get("clone_reference_audio")
    reference_mime_type = context.user_data.get("clone_audio_mime_type")
    
    logger.info(f"√Åudio de refer√™ncia encontrado: {reference_audio_bytes is not None}")
    logger.info(f"Tipo MIME: {reference_mime_type}")
    if reference_audio_bytes:
        logger.info(f"Tamanho do √°udio: {len(reference_audio_bytes)} bytes")
    
    if not reference_audio_bytes:
        # Tentar usar o √∫ltimo √°udio processado
        last_audio_text = context.user_data.get("last_audio_text")
        
        if last_audio_text:
            await update.message.reply_text(
                "üé§ **Usando √öltimo √Åudio Processado**\n\n"
                f"üìù **√öltimo √°udio:** {last_audio_text[:100]}...\n\n"
                "**Para clonar sua voz:**\n"
                "1. Grave um √°udio de refer√™ncia (m√≠nimo 10 segundos)\n"
                "2. Envie o √°udio normalmente\n"
                "3. Use: /clonar_voz [texto]\n\n"
                "üí° **Dica:** Grave um √°udio claro com sua voz natural\n\n"
                "**Exemplo:**\n"
                "`/clonar_voz Ol√°, esta √© minha voz clonada!`\n\n"
                "**Comando alternativo:**\n"
                "`/clonar_voz_simples [texto]` - Usa gTTS b√°sico"
            )
        else:
            await update.message.reply_text(
                "üé§ **√Åudio de Refer√™ncia Necess√°rio**\n\n"
                "Para clonar sua voz:\n"
                "1. Grave um √°udio de refer√™ncia (m√≠nimo 10 segundos)\n"
                "2. Envie o √°udio normalmente\n"
                "3. Use: /clonar_voz [texto]\n\n"
                "üí° **Dica:** Grave um √°udio claro com sua voz natural\n\n"
                "**Exemplo:**\n"
                "`/clonar_voz Ol√°, esta √© minha voz clonada!`\n\n"
                "**Comando alternativo:**\n"
                "`/clonar_voz_simples [texto]` - Usa gTTS b√°sico"
            )
        return
    
    try:
        text_to_speak = " ".join(context.args)
        
        logger.info(f"Texto para clonar: {text_to_speak}")
        
        await update.message.reply_text(
            "üé≠ **Clonando Voz...**\n\n"
            f"üìù **Texto:** {text_to_speak}\n"
            "‚è≥ Processando √°udio de refer√™ncia...\n"
            "üîÑ Aplicando caracter√≠sticas vocais..."
        )
        
        # Processar √°udio de refer√™ncia
        reference_audio_io = io.BytesIO(reference_audio_bytes)
        reference_audio_io.seek(0)
        
        # Analisar caracter√≠sticas da voz de refer√™ncia
        voice_cloner = context.application.bot_data["voice_cloner"]
        voice_characteristics = await voice_cloner.analyze_voice_characteristics(reference_audio_bytes)
        
        await update.message.reply_text(
            "üîç **Analisando Caracter√≠sticas Vocais...**\n\n"
            f"üìä **An√°lise da Voz de Refer√™ncia:**\n"
            f"‚Ä¢ G√™nero: {voice_characteristics['gender'].title()}\n"
            f"‚Ä¢ Pitch m√©dio: {voice_characteristics['avg_pitch']:.1f} Hz\n"
            f"‚Ä¢ Dura√ß√£o: {voice_characteristics['duration']:.1f} segundos\n"
            f"‚Ä¢ Energia: {voice_characteristics['avg_energy']:.3f}\n\n"
            "üé≠ **Iniciando Clonagem Avan√ßada...**\n"
            "‚Ä¢ Usando Fish Audio API\n"
            "‚Ä¢ Configura√ß√µes otimizadas para voz masculina\n"
            "‚Ä¢ Processamento em alta qualidade..."
        )
        
        await asyncio.sleep(2)  # Simular processamento adicional
        
        # Clonar voz usando o clonador avan√ßado
        cloned_audio = await voice_cloner.clone_voice_advanced(reference_audio_bytes, text_to_speak)
        
        if cloned_audio:
            audio_io = cloned_audio
        else:
            # Fallback para gTTS com ajustes
            audio_io = await asyncio.to_thread(text_to_speech_sync, text_to_speak, 'pt')
        
        # Determinar qual m√©todo foi usado
        if cloned_audio:
            method_used = "Fish Audio API"
            quality_level = "Alta fidelidade"
            features = "Clonagem real da voz"
        else:
            method_used = "gTTS com ajustes"
            quality_level = "Ajustada"
            features = "Simula√ß√£o de clonagem"
        
        await update.message.reply_text(
            "‚úÖ **Voz Clonada com Sucesso!**\n\n"
            "üé≠ **Caracter√≠sticas Aplicadas:**\n"
            f"‚Ä¢ G√™nero: {voice_characteristics['gender'].title()}\n"
            f"‚Ä¢ Pitch ajustado: {voice_characteristics['avg_pitch']:.1f} Hz\n"
            f"‚Ä¢ M√©todo: {method_used}\n"
            f"‚Ä¢ Qualidade: {quality_level}\n"
            f"‚Ä¢ Tipo: {features}\n\n"
            "üìä **Estat√≠sticas:**\n"
            f"‚Ä¢ Texto original: {len(text_to_speak)} caracteres\n"
            f"‚Ä¢ √Åudio de refer√™ncia: {voice_characteristics['duration']:.1f}s\n"
            f"‚Ä¢ Processamento: {'Real-time' if cloned_audio else 'Local'}\n\n"
            "üì§ Enviando √°udio clonado..."
        )
        
        # Enviar √°udio clonado
        await context.bot.send_voice(
            chat_id=update.effective_chat.id,
            voice=audio_io,
            caption=f"üé≠ **Voz Clonada:** {text_to_speak}"
        )
        
        # Adicionar ao hist√≥rico
        chat_id = update.effective_chat.id
        database.add_message_to_history(chat_id, "user", f"[CLONE_VOZ] {text_to_speak}")
        database.add_message_to_history(chat_id, "model", "Voz clonada gerada com sucesso!")
        
        # Limpar √°udio de refer√™ncia ap√≥s uso (opcional)
        # context.user_data.pop("clone_reference_audio", None)
        # context.user_data.pop("clone_audio_mime_type", None)
        
    except Exception as e:
        logger.error(f"Erro na clonagem de voz: {e}")
        await update.message.reply_text(
            "‚ùå **Erro na Clonagem de Voz**\n\n"
            "üîß **Poss√≠veis causas:**\n"
            "‚Ä¢ √Åudio de refer√™ncia muito curto\n"
            "‚Ä¢ Qualidade do √°udio insuficiente\n"
            "‚Ä¢ Texto muito longo\n\n"
            "üí° **Sugest√µes:**\n"
            "‚Ä¢ Grave um √°udio de 10-30 segundos\n"
            "‚Ä¢ Fale claramente e naturalmente\n"
            "‚Ä¢ Use texto de at√© 100 caracteres"
        )

async def gerar_imagem(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    settings, client, prompt = context.bot_data["settings"], context.bot_data["http_client"], " ".join(context.args)
    if not prompt: await update.message.reply_text("Uso: /gerarimagem <descri√ß√£o>"); return
    await update.message.reply_text(f"Gerando imagem para: '{prompt}'...")
    api_url = f"https://api-inference.huggingface.co/models/{settings.image_model_id}"
    headers = {"Authorization": f"Bearer {settings.huggingface_api_key}"}

    try:
        response = await client.post(api_url, headers=headers, json={"inputs": prompt}, timeout=180)
        if response.status_code == 503:
            await update.message.reply_text("O modelo de imagem est√° sendo iniciado, tentando novamente em 25s...")
            await asyncio.sleep(25);
            response = await client.post(api_url, headers=headers, json={"inputs": prompt}, timeout=180)
        response.raise_for_status()
        await context.bot.send_photo(chat_id=update.effective_chat.id, photo=response.content, caption=f"Imagem para: '{prompt}'")
    except Exception as e: logger.error(f"Erro ao gerar imagem: {e}"); await update.message.reply_text("Falha ao gerar a imagem.")

async def mindfulness(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Sess√µes de mindfulness e aten√ß√£o plena"""
    if not context.args:
        # Menu de mindfulness
        keyboard = [
            [
                InlineKeyboardButton("üå¨Ô∏è Respira√ß√£o", callback_data="mindfulness_respiracao"),
                InlineKeyboardButton("üåø Medita√ß√£o", callback_data="mindfulness_meditacao")
            ],
            [
                InlineKeyboardButton("üåÖ Manh√£", callback_data="mindfulness_manha"),
                InlineKeyboardButton("üåô Noite", callback_data="mindfulness_noite")
            ],
            [
                InlineKeyboardButton("‚ö° R√°pido (5min)", callback_data="mindfulness_rapido"),
                InlineKeyboardButton("üïê Completo (20min)", callback_data="mindfulness_completo")
            ],
            [
                InlineKeyboardButton("üìä Progresso", callback_data="mindfulness_progresso"),
                InlineKeyboardButton("üéØ Metas", callback_data="mindfulness_metas")
            ],
            [
                InlineKeyboardButton("‚ùì Ajuda", callback_data="mindfulness_ajuda"),
                InlineKeyboardButton("üîô Voltar", callback_data="voltar_menu")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üßò **Mindfulness & Aten√ß√£o Plena**\n\n"
            "Escolha o tipo de sess√£o:\n\n"
            "üå¨Ô∏è **Respira√ß√£o:** T√©cnicas de respira√ß√£o consciente\n"
            "üåø **Medita√ß√£o:** Medita√ß√µes guiadas\n"
            "üåÖ **Manh√£:** Rotinas matinais de mindfulness\n"
            "üåô **Noite:** Prepara√ß√£o para o sono\n"
            "‚ö° **R√°pido:** Sess√µes de 5 minutos\n"
            "üïê **Completo:** Sess√µes de 20 minutos\n\n"
            "üí° **Dica:** Encontre um local tranquilo e confort√°vel",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        return
    
    # Sess√£o direta por comando
    tipo = context.args[0].lower()
    duracao = context.args[1] if len(context.args) > 1 else "5"
    
    await iniciar_sessao_mindfulness(update, context, tipo, duracao)

async def iniciar_sessao_mindfulness(update: Update, context: ContextTypes.DEFAULT_TYPE, tipo: str, duracao: str = "5") -> None:
    """Inicia uma sess√£o de mindfulness espec√≠fica"""
    
    # Mapeamento de tipos de mindfulness
    mindfulness_types = {
        'respiracao': {
            'title': 'üå¨Ô∏è **Respira√ß√£o Consciente**',
            'description': 'T√©cnica de respira√ß√£o 4-7-8 para relaxamento',
            'steps': [
                "1. Sente-se confortavelmente com as costas retas",
                "2. Coloque uma m√£o no peito e outra na barriga",
                "3. Inspire pelo nariz por 4 segundos",
                "4. Segure a respira√ß√£o por 7 segundos",
                "5. Expire pela boca por 8 segundos",
                "6. Repita o ciclo por 5 minutos"
            ]
        },
        'meditacao': {
            'title': 'üåø **Medita√ß√£o Guiada**',
            'description': 'Medita√ß√£o de aten√ß√£o plena para iniciantes',
            'steps': [
                "1. Encontre uma posi√ß√£o confort√°vel",
                "2. Feche os olhos suavemente",
                "3. Concentre-se na sua respira√ß√£o natural",
                "4. Observe os pensamentos sem julg√°-los",
                "5. Volte gentilmente √† respira√ß√£o",
                "6. Continue por 10-15 minutos"
            ]
        },
        'manha': {
            'title': 'üåÖ **Mindfulness Matinal**',
            'description': 'Rotina de manh√£ para come√ßar o dia com presen√ßa',
            'steps': [
                "1. Acorde 10 minutos mais cedo",
                "2. Sente-se na cama com os olhos fechados",
                "3. Respire profundamente 3 vezes",
                "4. Agrade√ßa por mais um dia",
                "5. Defina uma inten√ß√£o para o dia",
                "6. Alongue-se suavemente"
            ]
        },
        'noite': {
            'title': 'üåô **Prepara√ß√£o para o Sono**',
            'description': 'Ritual noturno para relaxar e dormir melhor',
            'steps': [
                "1. Desligue dispositivos eletr√¥nicos",
                "2. Prepare um ch√° calmante",
                "3. Fa√ßa respira√ß√£o 4-7-8 por 5 minutos",
                "4. Visualize um lugar tranquilo",
                "5. Relaxe cada parte do corpo",
                "6. Permita-se adormecer naturalmente"
            ]
        }
    }
    
    if tipo not in mindfulness_types:
        await update.message.reply_text(
            "‚ùå **Tipo de Mindfulness n√£o reconhecido**\n\n"
            "‚úÖ **Tipos dispon√≠veis:**\n"
            "‚Ä¢ respiracao\n"
            "‚Ä¢ meditacao\n"
            "‚Ä¢ manha\n"
            "‚Ä¢ noite\n\n"
            "üí° **Exemplo:** /mindfulness respiracao 10"
        )
        return
    
    session = mindfulness_types[tipo]
    
    # Iniciar sess√£o
    await update.message.reply_text(
        f"{session['title']}\n\n"
        f"üìù **Descri√ß√£o:** {session['description']}\n"
        f"‚è±Ô∏è **Dura√ß√£o:** {duracao} minutos\n\n"
        "üöÄ **Iniciando sess√£o...**\n"
        "üîá Encontre um local tranquilo\n"
        "üßò Sente-se confortavelmente\n"
        "üå¨Ô∏è Respire naturalmente..."
    )
    
    # Simular progresso da sess√£o
    await asyncio.sleep(2)
    
    # Enviar passos da sess√£o
    steps_text = "\n".join(session['steps'])
    await update.message.reply_text(
        f"üìã **Passos da Sess√£o:**\n\n{steps_text}\n\n"
        f"‚è∞ **Dura√ß√£o:** {duracao} minutos\n"
        "üéØ **Foco:** Respira√ß√£o e presen√ßa\n"
        "üí´ **Benef√≠cios:** Redu√ß√£o de estresse, foco, clareza mental"
    )
    
    # Timer para a sess√£o
    if duracao.isdigit():
        duracao_int = int(duracao)
        if duracao_int > 0:
            await update.message.reply_text(
                f"‚è∞ **Timer iniciado:** {duracao_int} minutos\n\n"
                "üîî Voc√™ ser√° notificado quando a sess√£o terminar.\n"
                "üßò Continue praticando at√© o final."
            )
            
            # Simular final da sess√£o
            await asyncio.sleep(5)  # Em produ√ß√£o, usar timer real
            
            await update.message.reply_text(
                "üéâ **Sess√£o de Mindfulness Conclu√≠da!**\n\n"
                "‚ú® **Como voc√™ se sente agora?**\n"
                "üå± **Benef√≠cios experimentados:**\n"
                "‚Ä¢ Redu√ß√£o do estresse\n"
                "‚Ä¢ Maior clareza mental\n"
                "‚Ä¢ Sensa√ß√£o de calma\n"
                "‚Ä¢ Foco aprimorado\n\n"
                "üí° **Dica:** Pratique diariamente para melhores resultados!"
            )
    
    # Adicionar ao hist√≥rico
    chat_id = update.effective_chat.id
    database.add_message_to_history(chat_id, "user", f"[MINDFULNESS] {tipo} {duracao}min")
    database.add_message_to_history(chat_id, "model", f"Sess√£o de mindfulness {tipo} conclu√≠da")

async def terapia_ia(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Sistema de terapia IA para apoio emocional"""
    if not context.args:
        # Menu de abordagens terap√™uticas
        keyboard = [
            [
                InlineKeyboardButton("üòä Ansiedade", callback_data="terapia_ansiedade"),
                InlineKeyboardButton("üòî Depress√£o", callback_data="terapia_depressao")
            ],
            [
                InlineKeyboardButton("üò§ Estresse", callback_data="terapia_estresse"),
                InlineKeyboardButton("üò¥ Sono", callback_data="terapia_sono")
            ],
            [
                InlineKeyboardButton("üí™ Autoestima", callback_data="terapia_autoestima"),
                InlineKeyboardButton("ü§ù Relacionamentos", callback_data="terapia_relacionamentos")
            ],
            [
                InlineKeyboardButton("üéØ Objetivos", callback_data="terapia_objetivos"),
                InlineKeyboardButton("üå± Crescimento", callback_data="terapia_crescimento")
            ],
            [
                InlineKeyboardButton("üìä Acompanhamento", callback_data="terapia_acompanhamento"),
                InlineKeyboardButton("üìö Recursos", callback_data="terapia_recursos")
            ],
            [
                InlineKeyboardButton("‚ùì Ajuda", callback_data="terapia_ajuda"),
                InlineKeyboardButton("üîô Voltar", callback_data="voltar_menu")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üí≠ **Terapia IA - Apoio Emocional**\n\n"
            "Escolha uma √°rea para trabalharmos:\n\n"
            "üòä **Ansiedade:** T√©cnicas de controle e relaxamento\n"
            "üòî **Depress√£o:** Apoio e estrat√©gias de recupera√ß√£o\n"
            "üò§ **Estresse:** Gerenciamento e redu√ß√£o do estresse\n"
            "üò¥ **Sono:** Melhorar a qualidade do sono\n"
            "üí™ **Autoestima:** Construir confian√ßa e autoaceita√ß√£o\n"
            "ü§ù **Relacionamentos:** Melhorar conex√µes interpessoais\n"
            "üéØ **Objetivos:** Definir e alcan√ßar metas pessoais\n"
            "üå± **Crescimento:** Desenvolvimento pessoal cont√≠nuo\n\n"
            "‚ö†Ô∏è **Importante:** Este √© um apoio complementar, n√£o substitui terapia profissional",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        return
    
    # Terapia direta por comando
    tema = context.args[0].lower()
    abordagem = context.args[1] if len(context.args) > 1 else "cognitiva"
    
    await iniciar_sessao_terapia(update, context, tema, abordagem)

async def iniciar_sessao_terapia(update: Update, context: ContextTypes.DEFAULT_TYPE, tema: str, abordagem: str = "cognitiva") -> None:
    """Inicia uma sess√£o de terapia IA espec√≠fica"""
    
    # Mapeamento de temas terap√™uticos
    temas_terapia = {
        'ansiedade': {
            'title': 'üòä **Trabalhando com Ansiedade**',
            'description': 'T√©cnicas para reduzir e gerenciar a ansiedade',
            'abordagens': {
                'cognitiva': [
                    "üîç **Identifica√ß√£o de Pensamentos:** Observe seus pensamentos ansiosos",
                    "ü§î **Questionamento:** Pergunte-se: 'Isso √© realmente verdade?'",
                    "üîÑ **Reestrutura√ß√£o:** Reformule pensamentos negativos",
                    "üìù **Registro:** Anote situa√ß√µes que causam ansiedade"
                ],
                'comportamental': [
                    "üå¨Ô∏è **Respira√ß√£o 4-7-8:** T√©cnica de relaxamento imediato",
                    "üèÉ **Exerc√≠cio F√≠sico:** Libera endorfinas e reduz tens√£o",
                    "üßò **Relaxamento Muscular:** T√©cnica progressiva de relaxamento",
                    "üéØ **Exposi√ß√£o Gradual:** Enfrente medos gradualmente"
                ]
            }
        },
        'depressao': {
            'title': 'üòî **Apoio para Depress√£o**',
            'description': 'Estrat√©gias para melhorar o humor e energia',
            'abordagens': {
                'cognitiva': [
                    "üåÖ **Rotina Matinal:** Estabele√ßa uma rotina consistente",
                    "üéØ **Metas Pequenas:** Defina objetivos alcan√ß√°veis diariamente",
                    "üìù **Gratid√£o:** Liste 3 coisas pelas quais √© grato",
                    "ü§ù **Conex√£o Social:** Mantenha contato com pessoas queridas"
                ],
                'comportamental': [
                    "‚òÄÔ∏è **Exposi√ß√£o √† Luz:** Passe tempo ao ar livre",
                    "üèÉ **Atividade F√≠sica:** Exerc√≠cios leves regularmente",
                    "üé® **Atividades Prazerosas:** Fa√ßa algo que goste todos os dias",
                    "üò¥ **Higiene do Sono:** Mantenha hor√°rios regulares"
                ]
            }
        },
        'estresse': {
            'title': 'üò§ **Gerenciamento do Estresse**',
            'description': 'T√©cnicas para reduzir e controlar o estresse',
            'abordagens': {
                'cognitiva': [
                    "üìä **Identifica√ß√£o:** Identifique fontes de estresse",
                    "üéØ **Prioriza√ß√£o:** Foque no que realmente importa",
                    "‚è∞ **Gest√£o do Tempo:** Organize suas atividades",
                    "üö´ **Limites:** Aprenda a dizer 'n√£o' quando necess√°rio"
                ],
                'comportamental': [
                    "üßò **Medita√ß√£o:** 10 minutos di√°rios de mindfulness",
                    "üåø **Natureza:** Passe tempo em ambientes naturais",
                    "üéµ **M√∫sica:** Ou√ßa m√∫sicas relaxantes",
                    "üíÜ **Autocuidado:** Dedique tempo para si mesmo"
                ]
            }
        },
        'sono': {
            'title': 'üò¥ **Melhorando a Qualidade do Sono**',
            'description': 'Estrat√©gias para um sono mais reparador',
            'abordagens': {
                'cognitiva': [
                    "üß† **Higiene Mental:** Evite pensamentos estressantes antes de dormir",
                    "üì± **Desconex√£o Digital:** Desligue dispositivos 1 hora antes",
                    "üìö **Leitura:** Leia algo leve e agrad√°vel",
                    "üéØ **Ritual:** Crie um ritual relaxante para dormir"
                ],
                'comportamental': [
                    "üå°Ô∏è **Temperatura:** Mantenha o quarto fresco (18-22¬∞C)",
                    "üåô **Escurid√£o:** Use cortinas blackout se necess√°rio",
                    "üõèÔ∏è **Conforto:** Invista em um colch√£o e travesseiro adequados",
                    "‚è∞ **Hor√°rio:** Mantenha hor√°rios consistentes de sono"
                ]
            }
        }
    }
    
    if tema not in temas_terapia:
        await update.message.reply_text(
            "‚ùå **Tema terap√™utico n√£o reconhecido**\n\n"
            "‚úÖ **Temas dispon√≠veis:**\n"
            "‚Ä¢ ansiedade\n"
            "‚Ä¢ depressao\n"
            "‚Ä¢ estresse\n"
            "‚Ä¢ sono\n\n"
            "üí° **Exemplo:** /terapia ansiedade cognitiva"
        )
        return
    
    tema_info = temas_terapia[tema]
    
    if abordagem not in tema_info['abordagens']:
        abordagem = 'cognitiva'  # Padr√£o
    
    # Iniciar sess√£o terap√™utica
    await update.message.reply_text(
        f"{tema_info['title']}\n\n"
        f"üìù **Descri√ß√£o:** {tema_info['description']}\n"
        f"üß† **Abordagem:** {abordagem.title()}\n\n"
        "üöÄ **Iniciando sess√£o terap√™utica...**\n"
        "üí≠ Encontre um local tranquilo e confort√°vel\n"
        "üßò Respire profundamente algumas vezes\n"
        "üí™ Lembre-se: voc√™ √© mais forte do que pensa..."
    )
    
    await asyncio.sleep(2)
    
    # Enviar estrat√©gias terap√™uticas
    estrategias = tema_info['abordagens'][abordagem]
    estrategias_text = "\n".join(estrategias)
    
    await update.message.reply_text(
        f"üìã **Estrat√©gias Terap√™uticas ({abordagem.title()}):**\n\n{estrategias_text}\n\n"
        "üí° **Como aplicar:**\n"
        "‚Ä¢ Escolha 1-2 estrat√©gias para come√ßar\n"
        "‚Ä¢ Pratique diariamente por pelo menos 1 semana\n"
        "‚Ä¢ Observe as mudan√ßas em seu bem-estar\n"
        "‚Ä¢ Ajuste conforme necess√°rio"
    )
    
    # Acompanhamento e suporte
    await asyncio.sleep(3)
    
    await update.message.reply_text(
        "üåü **Acompanhamento e Suporte**\n\n"
        "üìä **Monitoramento:**\n"
        "‚Ä¢ Como voc√™ se sente agora? (1-10)\n"
        "‚Ä¢ Qual estrat√©gia mais ressoou com voc√™?\n"
        "‚Ä¢ Que desafios voc√™ prev√™?\n\n"
        "üîÑ **Pr√≥ximos Passos:**\n"
        "‚Ä¢ Pratique as estrat√©gias escolhidas\n"
        "‚Ä¢ Use /terapia novamente quando precisar\n"
        "‚Ä¢ Considere buscar apoio profissional se necess√°rio\n\n"
        "üí™ **Lembre-se:** Mudan√ßas levam tempo, seja paciente consigo mesmo!"
    )
    
    # Adicionar ao hist√≥rico
    chat_id = update.effective_chat.id
    database.add_message_to_history(chat_id, "user", f"[TERAPIA_IA] {tema} {abordagem}")
    database.add_message_to_history(chat_id, "model", f"Sess√£o de terapia {tema} com abordagem {abordagem} conclu√≠da")

# === FUN√á√ïES DOS NOVOS BOT√ïES INTERATIVOS ===

async def handle_clone_gravar_audio(query, context):
    """Guia para gravar √°udio para clonagem"""
    keyboard = [
        [
            InlineKeyboardButton("üé§ Iniciar Grava√ß√£o", callback_data="clone_iniciar_gravacao"),
            InlineKeyboardButton("üìã Dicas de Grava√ß√£o", callback_data="clone_dicas")
        ],
        [
            InlineKeyboardButton("üîô Voltar", callback_data="clone_voltar"),
            InlineKeyboardButton("‚ùì Ajuda", callback_data="clone_ajuda")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üé§ **Gravar √Åudio para Clonagem**\n\n"
        "**Passos para um √°udio perfeito:**\n\n"
        "1. üéØ **Local Tranquilo**\n"
        "   ‚Ä¢ Sem ru√≠dos de fundo\n"
        "   ‚Ä¢ Ambiente silencioso\n"
        "   ‚Ä¢ Sem eco ou reverbera√ß√£o\n\n"
        "2. üéôÔ∏è **T√©cnica de Grava√ß√£o**\n"
        "   ‚Ä¢ Fale naturalmente e claramente\n"
        "   ‚Ä¢ Mantenha dist√¢ncia constante do microfone\n"
        "   ‚Ä¢ Evite respirar diretamente no microfone\n\n"
        "3. ‚è±Ô∏è **Dura√ß√£o Ideal**\n"
        "   ‚Ä¢ M√≠nimo: 10 segundos\n"
        "   ‚Ä¢ Ideal: 20-30 segundos\n"
        "   ‚Ä¢ M√°ximo: 60 segundos\n\n"
        "4. üìù **Conte√∫do Recomendado**\n"
        "   ‚Ä¢ Fale frases variadas\n"
        "   ‚Ä¢ Use diferentes entona√ß√µes\n"
        "   ‚Ä¢ Inclua pausas naturais\n\n"
        "**Escolha uma op√ß√£o:**",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def handle_clone_exemplos(query, context):
    """Exemplos de uso do clone de voz"""
    keyboard = [
        [
            InlineKeyboardButton("üé≠ Apresenta√ß√µes", callback_data="clone_exemplo_apresentacoes"),
            InlineKeyboardButton("üìö Narra√ß√£o", callback_data="clone_exemplo_narracao")
        ],
        [
            InlineKeyboardButton("üéµ M√∫sica", callback_data="clone_exemplo_musica"),
            InlineKeyboardButton("üíº Profissional", callback_data="clone_exemplo_profissional")
        ],
        [
            InlineKeyboardButton("üîô Voltar", callback_data="clone_voltar")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üìù **Exemplos de Uso - Clone de Voz**\n\n"
        "**üé≠ Apresenta√ß√µes:**\n"
        "‚Ä¢ 'Bem-vindos √† nossa reuni√£o mensal'\n"
        "‚Ä¢ 'Hoje vamos discutir os resultados do trimestre'\n"
        "‚Ä¢ 'Agrade√ßo a presen√ßa de todos'\n\n"
        "**üìö Narra√ß√£o:**\n"
        "‚Ä¢ 'Era uma vez, em uma terra distante...'\n"
        "‚Ä¢ 'O protagonista enfrentou muitos desafios'\n"
        "‚Ä¢ 'A hist√≥ria nos ensina valiosas li√ß√µes'\n\n"
        "**üéµ M√∫sica:**\n"
        "‚Ä¢ 'Esta √© a can√ß√£o que compus para voc√™'\n"
        "‚Ä¢ 'Cada nota conta uma hist√≥ria'\n"
        "‚Ä¢ 'A m√∫sica une cora√ß√µes'\n\n"
        "**üíº Profissional:**\n"
        "‚Ä¢ 'Seja bem-vindo ao nosso produto'\n"
        "‚Ä¢ 'Estamos aqui para ajudar voc√™'\n"
        "‚Ä¢ 'Obrigado por escolher nossos servi√ßos'\n\n"
        "**Escolha uma categoria:**",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def handle_clone_configuracoes(query, context):
    """Configura√ß√µes do clone de voz"""
    keyboard = [
        [
            InlineKeyboardButton("üéµ Qualidade", callback_data="clone_qualidade"),
            InlineKeyboardButton("üåç Idioma", callback_data="clone_idioma")
        ],
        [
            InlineKeyboardButton("‚ö° Velocidade", callback_data="clone_velocidade"),
            InlineKeyboardButton("üé≠ Estilo", callback_data="clone_estilo")
        ],
        [
            InlineKeyboardButton("üîô Voltar", callback_data="clone_voltar")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "‚öôÔ∏è **Configura√ß√µes - Clone de Voz**\n\n"
        "**üéµ Qualidade:**\n"
        "‚Ä¢ Alta: Melhor fidelidade, arquivo maior\n"
        "‚Ä¢ M√©dia: Equil√≠brio entre qualidade e tamanho\n"
        "‚Ä¢ Baixa: Arquivo menor, qualidade reduzida\n\n"
        "**üåç Idioma:**\n"
        "‚Ä¢ Portugu√™s (Brasil)\n"
        "‚Ä¢ Ingl√™s\n"
        "‚Ä¢ Espanhol\n"
        "‚Ä¢ Franc√™s\n\n"
        "**‚ö° Velocidade:**\n"
        "‚Ä¢ Lenta: 0.8x (mais natural)\n"
        "‚Ä¢ Normal: 1.0x (padr√£o)\n"
        "‚Ä¢ R√°pida: 1.2x (mais din√¢mica)\n\n"
        "**üé≠ Estilo:**\n"
        "‚Ä¢ Natural: Voz conversacional\n"
        "‚Ä¢ Formal: Tom profissional\n"
        "‚Ä¢ Casual: Tom descontra√≠do\n\n"
        "**Escolha uma configura√ß√£o:**",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def handle_clone_ajuda(query, context):
    """Ajuda para clone de voz"""
    keyboard = [
        [
            InlineKeyboardButton("‚ùì FAQ", callback_data="clone_faq"),
            InlineKeyboardButton("üîß Solu√ß√£o de Problemas", callback_data="clone_solucao")
        ],
        [
            InlineKeyboardButton("üìû Suporte", callback_data="clone_suporte"),
            InlineKeyboardButton("üîô Voltar", callback_data="clone_voltar")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "‚ùì **Ajuda - Clone de Voz**\n\n"
        "**Como usar:**\n"
        "1. Grave um √°udio de refer√™ncia\n"
        "2. Use /clonar_voz ou responda ao √°udio\n"
        "3. Digite o texto desejado\n"
        "4. Receba o √°udio clonado\n\n"
        "**Comandos dispon√≠veis:**\n"
        "‚Ä¢ `/clonar_voz` - Menu principal\n"
        "‚Ä¢ `/clonar_voz [texto]` - Clonagem direta\n\n"
        "**Formatos suportados:**\n"
        "‚Ä¢ OGG (padr√£o Telegram)\n"
        "‚Ä¢ MP3\n"
        "‚Ä¢ WAV\n"
        "‚Ä¢ M4A\n\n"
        "**Escolha uma op√ß√£o de ajuda:**",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def handle_mindfulness_progresso(query, context):
    """Acompanhamento do progresso de mindfulness"""
    keyboard = [
        [
            InlineKeyboardButton("üìä Estat√≠sticas", callback_data="mindfulness_stats"),
            InlineKeyboardButton("üèÜ Conquistas", callback_data="mindfulness_conquistas")
        ],
        [
            InlineKeyboardButton("üìà Gr√°ficos", callback_data="mindfulness_graficos"),
            InlineKeyboardButton("üéØ Metas", callback_data="mindfulness_metas")
        ],
        [
            InlineKeyboardButton("üîô Voltar", callback_data="mindfulness_voltar")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üìä **Progresso - Mindfulness**\n\n"
        "**üìà Seu Progresso:**\n"
        "‚Ä¢ Sess√µes completadas: 0\n"
        "‚Ä¢ Tempo total: 0 minutos\n"
        "‚Ä¢ Dias consecutivos: 0\n"
        "‚Ä¢ Meta semanal: 5 sess√µes\n\n"
        "**üèÜ Conquistas Dispon√≠veis:**\n"
        "ü•â Iniciante: Primeira sess√£o\n"
        "ü•à Regular: 7 dias consecutivos\n"
        "ü•á Avan√ßado: 30 dias consecutivos\n"
        "üíé Mestre: 100 sess√µes\n\n"
        "**üéØ Pr√≥ximas Metas:**\n"
        "‚Ä¢ Completar 1 sess√£o hoje\n"
        "‚Ä¢ Manter 3 dias consecutivos\n"
        "‚Ä¢ Alcan√ßar 10 minutos di√°rios\n\n"
        "**Escolha uma op√ß√£o:**",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def handle_mindfulness_metas(query, context):
    """Definir e gerenciar metas de mindfulness"""
    keyboard = [
        [
            InlineKeyboardButton("üéØ Definir Meta", callback_data="mindfulness_definir_meta"),
            InlineKeyboardButton("üìÖ Calend√°rio", callback_data="mindfulness_calendario")
        ],
        [
            InlineKeyboardButton("‚è∞ Lembretes", callback_data="mindfulness_lembretes"),
            InlineKeyboardButton("üìä Acompanhamento", callback_data="mindfulness_acompanhamento")
        ],
        [
            InlineKeyboardButton("üîô Voltar", callback_data="mindfulness_voltar")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üéØ **Metas - Mindfulness**\n\n"
        "**üéØ Metas Atuais:**\n"
        "‚Ä¢ Di√°ria: 10 minutos de mindfulness\n"
        "‚Ä¢ Semanal: 5 sess√µes\n"
        "‚Ä¢ Mensal: 20 sess√µes\n\n"
        "**üìÖ Calend√°rio de Pr√°tica:**\n"
        "‚Ä¢ Segunda: Respira√ß√£o (10min)\n"
        "‚Ä¢ Ter√ßa: Medita√ß√£o (15min)\n"
        "‚Ä¢ Quarta: Respira√ß√£o (10min)\n"
        "‚Ä¢ Quinta: Medita√ß√£o (15min)\n"
        "‚Ä¢ Sexta: Respira√ß√£o (10min)\n"
        "‚Ä¢ S√°bado: Manh√£ (20min)\n"
        "‚Ä¢ Domingo: Noite (15min)\n\n"
        "**‚è∞ Lembretes Configurados:**\n"
        "‚Ä¢ Manh√£: 7:00 AM\n"
        "‚Ä¢ Tarde: 2:00 PM\n"
        "‚Ä¢ Noite: 9:00 PM\n\n"
        "**Escolha uma op√ß√£o:**",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def handle_mindfulness_ajuda(query, context):
    """Ajuda para mindfulness"""
    keyboard = [
        [
            InlineKeyboardButton("‚ùì FAQ", callback_data="mindfulness_faq"),
            InlineKeyboardButton("üìö Recursos", callback_data="mindfulness_recursos")
        ],
        [
            InlineKeyboardButton("üîß Dicas", callback_data="mindfulness_dicas"),
            InlineKeyboardButton("üîô Voltar", callback_data="mindfulness_voltar")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "‚ùì **Ajuda - Mindfulness**\n\n"
        "**üßò O que √© Mindfulness?**\n"
        "Mindfulness √© a pr√°tica de aten√ß√£o plena ao momento presente, sem julgamentos.\n\n"
        "**üí° Benef√≠cios:**\n"
        "‚Ä¢ Reduz estresse e ansiedade\n"
        "‚Ä¢ Melhora foco e concentra√ß√£o\n"
        "‚Ä¢ Aumenta autoconhecimento\n"
        "‚Ä¢ Promove bem-estar emocional\n\n"
        "**üéØ Como praticar:**\n"
        "1. Encontre um local tranquilo\n"
        "2. Sente-se confortavelmente\n"
        "3. Foque na respira√ß√£o\n"
        "4. Observe pensamentos sem julg√°-los\n"
        "5. Volte gentilmente √† respira√ß√£o\n\n"
        "**Escolha uma op√ß√£o de ajuda:**",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def handle_terapia_acompanhamento(query, context):
    """Acompanhamento terap√™utico"""
    keyboard = [
        [
            InlineKeyboardButton("üìä Progresso", callback_data="terapia_progresso"),
            InlineKeyboardButton("üìù Di√°rio", callback_data="terapia_diario")
        ],
        [
            InlineKeyboardButton("üéØ Metas", callback_data="terapia_metas"),
            InlineKeyboardButton("üìà Gr√°ficos", callback_data="terapia_graficos")
        ],
        [
            InlineKeyboardButton("üîô Voltar", callback_data="terapia_voltar")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üìä **Acompanhamento - Terapia IA**\n\n"
        "**üìà Seu Progresso:**\n"
        "‚Ä¢ Sess√µes realizadas: 0\n"
        "‚Ä¢ Temas trabalhados: 0\n"
        "‚Ä¢ Estrat√©gias aplicadas: 0\n"
        "‚Ä¢ Melhoria percebida: 0%\n\n"
        "**üìù Di√°rio Terap√™utico:**\n"
        "‚Ä¢ Registre seus pensamentos\n"
        "‚Ä¢ Anote estrat√©gias que funcionaram\n"
        "‚Ä¢ Monitore mudan√ßas de humor\n"
        "‚Ä¢ Acompanhe desafios e conquistas\n\n"
        "**üéØ Metas Terap√™uticas:**\n"
        "‚Ä¢ Reduzir ansiedade em 30%\n"
        "‚Ä¢ Aplicar 3 estrat√©gias por semana\n"
        "‚Ä¢ Manter rotina de mindfulness\n"
        "‚Ä¢ Melhorar qualidade do sono\n\n"
        "**Escolha uma op√ß√£o:**",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def handle_terapia_recursos(query, context):
    """Recursos terap√™uticos adicionais"""
    keyboard = [
        [
            InlineKeyboardButton("üìö Livros", callback_data="terapia_livros"),
            InlineKeyboardButton("üéß Podcasts", callback_data="terapia_podcasts")
        ],
        [
            InlineKeyboardButton("üé¨ V√≠deos", callback_data="terapia_videos"),
            InlineKeyboardButton("üåê Sites", callback_data="terapia_sites")
        ],
        [
            InlineKeyboardButton("üîô Voltar", callback_data="terapia_voltar")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üìö **Recursos - Terapia IA**\n\n"
        "**üìö Livros Recomendados:**\n"
        "‚Ä¢ 'O Poder do Agora' - Eckhart Tolle\n"
        "‚Ä¢ 'Mindfulness' - Mark Williams\n"
        "‚Ä¢ 'A Coragem de Ser Imperfeito' - Bren√© Brown\n"
        "‚Ä¢ 'O Monje e o Executivo' - James C. Hunter\n\n"
        "**üéß Podcasts:**\n"
        "‚Ä¢ 'Psicologia Hoje'\n"
        "‚Ä¢ 'Mindful Minutes'\n"
        "‚Ä¢ 'Terapia em Casa'\n"
        "‚Ä¢ 'Bem-Estar Mental'\n\n"
        "**üé¨ V√≠deos:**\n"
        "‚Ä¢ T√©cnicas de respira√ß√£o\n"
        "‚Ä¢ Medita√ß√µes guiadas\n"
        "‚Ä¢ Exerc√≠cios de relaxamento\n"
        "‚Ä¢ Estrat√©gias cognitivas\n\n"
        "**Escolha uma categoria:**",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def handle_terapia_ajuda(query, context):
    """Ajuda para terapia IA"""
    keyboard = [
        [
            InlineKeyboardButton("‚ùì FAQ", callback_data="terapia_faq"),
            InlineKeyboardButton("‚ö†Ô∏è Limita√ß√µes", callback_data="terapia_limitacoes")
        ],
        [
            InlineKeyboardButton("üìû Suporte", callback_data="terapia_suporte"),
            InlineKeyboardButton("üîô Voltar", callback_data="terapia_voltar")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "‚ùì **Ajuda - Terapia IA**\n\n"
        "**üí≠ O que √© a Terapia IA?**\n"
        "A Terapia IA √© um sistema de apoio emocional que oferece estrat√©gias baseadas em evid√™ncias cient√≠ficas.\n\n"
        "**‚úÖ O que oferece:**\n"
        "‚Ä¢ T√©cnicas de respira√ß√£o\n"
        "‚Ä¢ Estrat√©gias cognitivas\n"
        "‚Ä¢ Exerc√≠cios de relaxamento\n"
        "‚Ä¢ Apoio para diferentes temas\n\n"
        "**‚ö†Ô∏è Limita√ß√µes importantes:**\n"
        "‚Ä¢ N√£o substitui terapia profissional\n"
        "‚Ä¢ N√£o oferece diagn√≥stico\n"
        "‚Ä¢ N√£o √© adequado para crises\n"
        "‚Ä¢ Complementar ao tratamento\n\n"
        "**üö® Quando buscar ajuda profissional:**\n"
        "‚Ä¢ Pensamentos suicidas\n"
        "‚Ä¢ Crises de ansiedade severas\n"
        "‚Ä¢ Depress√£o persistente\n"
        "‚Ä¢ Dificuldades funcionais\n\n"
        "**Escolha uma op√ß√£o de ajuda:**",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

# Fun√ß√µes de navega√ß√£o
async def clone_voltar(query, context):
    """Volta ao menu principal do clone de voz"""
    await clonar_voz(query, context)

async def mindfulness_voltar(query, context):
    """Volta ao menu principal do mindfulness"""
    await mindfulness(query, context)

async def terapia_voltar(query, context):
    """Volta ao menu principal da terapia"""
    await terapia_ia(query, context)

async def voltar_ao_menu_principal(query, context):
    """Volta ao menu principal com bot√µes interativos"""
    welcome_message = (
        "ü§ñ **Bem-vindo ao Bot Profissional de IA Avan√ßada!**\n\n"
        "**üöÄ 25+ Funcionalidades de IA Profissional**\n\n"
        "**ü§ñ CONVERSA INTELIGENTE**\n"
        "‚Ä¢ Converse naturalmente comigo\n"
        "‚Ä¢ IA avan√ßada com mem√≥ria de contexto\n"
        "‚Ä¢ Suporte multil√≠ngue completo\n\n"
        "**üîç BUSCA WEB INTELIGENTE**\n"
        "‚Ä¢ Pesquisa em tempo real com IA\n"
        "‚Ä¢ Resumo autom√°tico de URLs\n"
        "‚Ä¢ An√°lise inteligente de resultados\n\n"
        "**üîí SEGURAN√áA DIGITAL AVAN√áADA**\n"
        "‚Ä¢ Gera√ß√£o de senhas ultra-seguras\n"
        "‚Ä¢ Verifica√ß√£o de vazamentos (100% LOCAL)\n"
        "‚Ä¢ Anti-phishing inteligente\n"
        "‚Ä¢ Anonimiza√ß√£o de dados\n\n"
        "**üñºÔ∏è FERRAMENTAS DE IMAGEM IA**\n"
        "‚Ä¢ Gera√ß√£o de imagens com IA\n"
        "‚Ä¢ Remo√ß√£o autom√°tica de fundo\n"
        "‚Ä¢ Redimensionamento inteligente\n"
        "‚Ä¢ Aplica√ß√£o de filtros autom√°ticos\n"
        "‚Ä¢ Melhoria de qualidade (upscale)\n\n"
        "**üéµ √ÅUDIO AVAN√áADO - IA MULTIM√çDIA**\n"
        "‚Ä¢ Texto para voz multil√≠ngue\n"
        "‚Ä¢ Transcri√ß√£o de √°udio com IA\n"
        "‚Ä¢ Detec√ß√£o autom√°tica de idioma\n"
        "‚Ä¢ Suporte a m√∫ltiplos formatos\n"
        "‚Ä¢ Clone de voz personalizado\n\n"
        "**üîç AN√ÅLISE DE IMAGEM IA - AVAN√áADA**\n"
        "‚Ä¢ An√°lise autom√°tica completa\n"
        "‚Ä¢ An√°lise de cores e paletas\n"
        "‚Ä¢ OCR multil√≠ngue de texto\n"
        "‚Ä¢ An√°lise de sentimentos\n"
        "‚Ä¢ Gera√ß√£o de tags autom√°ticas\n"
        "‚Ä¢ Sugest√µes criativas\n\n"
        "**üé≠ IA GENERATIVA ESPECIALIZADA**\n"
        "‚Ä¢ Clone de voz com caracter√≠sticas √∫nicas\n"
        "‚Ä¢ Aplica√ß√£o de estilos art√≠sticos\n"
        "‚Ä¢ Escritor fantasma em estilos liter√°rios\n"
        "‚Ä¢ Arquitetura e design com IA\n"
        "‚Ä¢ Composi√ß√£o musical inteligente\n"
        "‚Ä¢ Gera√ß√£o de v√≠deos curtos\n\n"
        "**üßò COACH EMOCIONAL IA - APOIO TERAP√äUTICO**\n"
        "‚Ä¢ Mindfulness personalizado\n"
        "‚Ä¢ Terapia IA para ansiedade/depress√£o\n"
        "‚Ä¢ T√©cnicas de respira√ß√£o\n"
        "‚Ä¢ Medita√ß√µes guiadas\n"
        "‚Ä¢ Acompanhamento de progresso\n"
        "‚Ä¢ Estrat√©gias de enfrentamento\n\n"
        "üí° <i>Use /help para ver todos os comandos e exemplos detalhados.</i>"
    )
    
    # Criar bot√µes interativos para as principais funcionalidades
    keyboard = [
        [
            InlineKeyboardButton("ü§ñ Conversa IA", callback_data="menu_conversa"),
            InlineKeyboardButton("üîç Busca Web", callback_data="menu_busca")
        ],
        [
            InlineKeyboardButton("üîí Seguran√ßa", callback_data="menu_seguranca"),
            InlineKeyboardButton("üñºÔ∏è Imagens", callback_data="menu_imagens")
        ],
        [
            InlineKeyboardButton("üéµ √Åudio", callback_data="menu_audio"),
            InlineKeyboardButton("üîç An√°lise IA", callback_data="menu_analise")
        ],
        [
            InlineKeyboardButton("üé≠ IA Generativa", callback_data="menu_ia_generativa"),
            InlineKeyboardButton("üßò Coach Emocional", callback_data="menu_coach")
        ],
        [
            InlineKeyboardButton("üé® Face Swapping", callback_data="image_main_menu"),
            InlineKeyboardButton("üìö Ajuda Completa", callback_data="menu_ajuda")
        ],
        [
            InlineKeyboardButton("‚öôÔ∏è Configura√ß√µes", callback_data="menu_config")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(welcome_message, reply_markup=reply_markup, parse_mode='HTML')

# === MENUS PRINCIPAIS COM BOT√ïES ===

async def handle_menu_conversa(query, context):
    """Menu de conversa inteligente"""
    keyboard = [
        [
            InlineKeyboardButton("üí¨ Conversar", callback_data="conversar_agora"),
            InlineKeyboardButton("üß† IA Avan√ßada", callback_data="ia_avancada")
        ],
        [
            InlineKeyboardButton("üìù Hist√≥rico", callback_data="ver_historico"),
            InlineKeyboardButton("üóëÔ∏è Limpar Chat", callback_data="limpar_chat")
        ],
        [
            InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "ü§ñ **Conversa Inteligente - IA Avan√ßada**\n\n"
        "**üí¨ Converse naturalmente comigo:**\n"
        "‚Ä¢ Perguntas e respostas inteligentes\n"
        "‚Ä¢ An√°lise de contexto avan√ßada\n"
        "‚Ä¢ Mem√≥ria de conversas\n"
        "‚Ä¢ Suporte multil√≠ngue\n\n"
        "**üß† Recursos da IA:**\n"
        "‚Ä¢ Google Gemini Pro\n"
        "‚Ä¢ Processamento de linguagem natural\n"
        "‚Ä¢ Compreens√£o contextual\n"
        "‚Ä¢ Respostas personalizadas\n\n"
        "**Escolha uma op√ß√£o:**",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def handle_menu_busca(query, context):
    """Menu de busca web"""
    keyboard = [
        [
            InlineKeyboardButton("üîç Buscar Agora", callback_data="buscar_web"),
            InlineKeyboardButton("üì∞ √öltimas Not√≠cias", callback_data="ultimas_noticias")
        ],
        [
            InlineKeyboardButton("üåê Resumir URL", callback_data="resumir_url"),
            InlineKeyboardButton("üìä Pesquisa Avan√ßada", callback_data="pesquisa_avancada")
        ],
        [
            InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üîç **Busca Web Inteligente**\n\n"
        "**üîç Busca Web:** `/web [sua pergunta]`\n"
        "‚Ä¢ Pesquisa em tempo real\n"
        "‚Ä¢ Resultados relevantes\n"
        "‚Ä¢ An√°lise com IA\n\n"
        "**üì∞ Resumo de URL:** `/resumir [link]`\n"
        "‚Ä¢ Extra√ß√£o de conte√∫do\n"
        "‚Ä¢ Resumo inteligente\n"
        "‚Ä¢ Pontos principais\n\n"
        "**Escolha uma op√ß√£o:**",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def handle_menu_seguranca(query, context):
    """Menu de seguran√ßa digital"""
    keyboard = [
        [
            InlineKeyboardButton("üîë Senhas Fortes", callback_data="gerar_senha"),
            InlineKeyboardButton("üõ°Ô∏è Verificar Vazamentos", callback_data="verificar_vazamento")
        ],
        [
            InlineKeyboardButton("üö´ Anti-Phishing", callback_data="scan_phishing"),
            InlineKeyboardButton("üé≠ Anonimizar Dados", callback_data="anonimizar_dados")
        ],
        [
            InlineKeyboardButton("üîí Criptografia", callback_data="criptografia"),
            InlineKeyboardButton("üìä Relat√≥rio Seguran√ßa", callback_data="relatorio_seguranca")
        ],
        [
            InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üîí **Seguran√ßa Digital Avan√ßada**\n\n"
        "**üîë Senhas Fortes:** `/gerar_senha_forte [crit√©rios]`\n"
        "‚Ä¢ Gera√ß√£o segura de senhas\n"
        "‚Ä¢ M√∫ltiplos crit√©rios\n"
        "‚Ä¢ Valida√ß√£o de for√ßa\n\n"
        "**üõ°Ô∏è Verificar Vazamentos:** `/verificar_vazamento [email]`\n"
        "‚Ä¢ An√°lise local de padr√µes\n"
        "‚Ä¢ Detec√ß√£o de riscos\n"
        "‚Ä¢ Relat√≥rio detalhado\n\n"
        "**üö´ Anti-Phishing:** `/scan_phishing [url]`\n"
        "‚Ä¢ An√°lise de URLs suspeitas\n"
        "‚Ä¢ Detec√ß√£o de fraudes\n"
        "‚Ä¢ Prote√ß√£o contra ataques\n\n"
        "**Escolha uma op√ß√£o:**",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def handle_menu_imagens(query, context):
    """Menu de ferramentas de imagem"""
    keyboard = [
        [
            InlineKeyboardButton("üé® Gerar Imagem", callback_data="gerar_imagem"),
            InlineKeyboardButton("‚úÇÔ∏è Remover Fundo", callback_data="remover_fundo")
        ],
        [
            InlineKeyboardButton("üìè Redimensionar", callback_data="redimensionar"),
            InlineKeyboardButton("üé≠ Aplicar Filtro", callback_data="aplicar_filtro")
        ],
        [
            InlineKeyboardButton("‚ö° Melhorar Qualidade", callback_data="upscale"),
            InlineKeyboardButton("üîÑ Converter Formato", callback_data="converter_formato")
        ],
        [
            InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üñºÔ∏è **Ferramentas de Imagem IA**\n\n"
        "**üé® Gerar Imagem:** `/gerarimagem [descri√ß√£o]`\n"
        "‚Ä¢ Cria√ß√£o com IA\n"
        "‚Ä¢ M√∫ltiplos estilos\n"
        "‚Ä¢ Alta qualidade\n\n"
        "**‚úÇÔ∏è Remover Fundo:** `/remover_fundo`\n"
        "‚Ä¢ Remo√ß√£o autom√°tica\n"
        "‚Ä¢ Precis√£o avan√ßada\n"
        "‚Ä¢ Formato PNG\n\n"
        "**üìè Redimensionar:** `/redimensionar 800x600`\n"
        "‚Ä¢ M√∫ltiplas resolu√ß√µes\n"
        "‚Ä¢ Manter propor√ß√£o\n"
        "‚Ä¢ Qualidade preservada\n\n"
        "**Escolha uma op√ß√£o:**",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def handle_menu_audio(query, context):
    """Menu de √°udio avan√ßado"""
    keyboard = [
        [
            InlineKeyboardButton("üîä Texto para Voz", callback_data="texto_para_voz"),
            InlineKeyboardButton("üé§ Voz para Texto", callback_data="voz_para_texto")
        ],
        [
            InlineKeyboardButton("üåç Multil√≠ngue", callback_data="audio_multilingue"),
            InlineKeyboardButton("üéµ Formatos", callback_data="formatos_audio")
        ],
        [
            InlineKeyboardButton("üé≠ Clone de Voz", callback_data="clone_voz"),
            InlineKeyboardButton("‚öôÔ∏è Configura√ß√µes", callback_data="config_audio")
        ],
        [
            InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üéµ **√Åudio Avan√ßado - IA Multim√≠dia**\n\n"
        "**üîä Texto para Voz:** `/texto_para_voz pt [texto]`\n"
        "‚Ä¢ M√∫ltiplos idiomas\n"
        "‚Ä¢ Voz natural\n"
        "‚Ä¢ Controle de velocidade\n\n"
        "**üé§ Voz para Texto:** Envie mensagem de √°udio\n"
        "‚Ä¢ Transcri√ß√£o autom√°tica\n"
        "‚Ä¢ Detec√ß√£o de idioma\n"
        "‚Ä¢ Alta precis√£o\n\n"
        "**üåç Multil√≠ngue:** Detec√ß√£o autom√°tica de idioma\n"
        "‚Ä¢ Portugu√™s, Ingl√™s, Espanhol\n"
        "‚Ä¢ Resposta no idioma detectado\n"
        "‚Ä¢ Suporte completo\n\n"
        "**Escolha uma op√ß√£o:**",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def handle_menu_analise(query, context):
    """Menu de an√°lise de imagem IA"""
    keyboard = [
        [
            InlineKeyboardButton("üîç An√°lise Autom√°tica", callback_data="analise_automatica"),
            InlineKeyboardButton("üé® An√°lise de Cores", callback_data="analise_cores")
        ],
        [
            InlineKeyboardButton("üìù OCR Texto", callback_data="ocr_texto"),
            InlineKeyboardButton("üòä An√°lise de Sentimento", callback_data="analise_sentimento")
        ],
        [
            InlineKeyboardButton("üè∑Ô∏è Gerar Tags", callback_data="gerar_tags"),
            InlineKeyboardButton("üî¨ An√°lise T√©cnica", callback_data="analise_tecnica")
        ],
        [
            InlineKeyboardButton("üí° Sugest√µes Criativas", callback_data="sugestoes_criativas"),
            InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üîç **An√°lise de Imagem IA - Avan√ßada**\n\n"
        "**üîç An√°lise Autom√°tica:** Envie uma imagem\n"
        "‚Ä¢ Descri√ß√£o completa\n"
        "‚Ä¢ Objetos identificados\n"
        "‚Ä¢ Contexto e cen√°rio\n\n"
        "**üé® An√°lise de Cores:** Paleta e harmonia\n"
        "‚Ä¢ Cores dominantes\n"
        "‚Ä¢ Combina√ß√µes\n"
        "‚Ä¢ Psicologia das cores\n\n"
        "**üìù OCR Texto:** Extra√ß√£o de texto\n"
        "‚Ä¢ M√∫ltiplos idiomas\n"
        "‚Ä¢ Alta precis√£o\n"
        "‚Ä¢ Formata√ß√£o preservada\n\n"
        "**Escolha uma op√ß√£o:**",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def handle_menu_ia_generativa(query, context):
    """Menu de IA generativa especializada"""
    keyboard = [
        [
            InlineKeyboardButton("üé≠ Clone de Voz", callback_data="clone_voz_menu"),
            InlineKeyboardButton("üé® Estilo Art√≠stico", callback_data="estilo_artistico")
        ],
        [
            InlineKeyboardButton("üìù Escritor Fantasma", callback_data="escritor_fantasma"),
            InlineKeyboardButton("üèóÔ∏è Arquitetura IA", callback_data="arquitetura_ia")
        ],
        [
            InlineKeyboardButton("üéµ M√∫sica IA", callback_data="musica_ia"),
            InlineKeyboardButton("üé¨ V√≠deo IA", callback_data="video_ia")
        ],
        [
            InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üé≠ **IA Generativa Especializada**\n\n"
        "**üé≠ Clone de Voz:** `/clonar_voz [√°udio] [texto]`\n"
        "‚Ä¢ Reproduzir texto com voz do usu√°rio\n"
        "‚Ä¢ Preserva√ß√£o de caracter√≠sticas\n"
        "‚Ä¢ Qualidade profissional\n\n"
        "**üé® Estilo Art√≠stico:** Aplicar estilos de artistas\n"
        "‚Ä¢ Van Gogh, Picasso, Monet\n"
        "‚Ä¢ Estilos personalizados\n"
        "‚Ä¢ Transforma√ß√£o completa\n\n"
        "**üìù Escritor Fantasma:** Escrever no estilo de autores\n"
        "‚Ä¢ Machado de Assis, Shakespeare\n"
        "‚Ä¢ Estilos liter√°rios\n"
        "‚Ä¢ Criatividade √∫nica\n\n"
        "**Escolha uma op√ß√£o:**",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def handle_menu_coach(query, context):
    """Menu de coach emocional"""
    keyboard = [
        [
            InlineKeyboardButton("üßò Mindfulness", callback_data="mindfulness_menu"),
            InlineKeyboardButton("üí≠ Terapia IA", callback_data="terapia_menu")
        ],
        [
            InlineKeyboardButton("üòä Ansiedade", callback_data="ansiedade_coach"),
            InlineKeyboardButton("üòî Depress√£o", callback_data="depressao_coach")
        ],
        [
            InlineKeyboardButton("üò§ Estresse", callback_data="estresse_coach"),
            InlineKeyboardButton("üò¥ Sono", callback_data="sono_coach")
        ],
        [
            InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üßò **Coach Emocional IA - Apoio Terap√™utico**\n\n"
        "**üßò Mindfulness:** `/mindfulness [tipo] [dura√ß√£o]`\n"
        "‚Ä¢ Sess√µes de aten√ß√£o plena\n"
        "‚Ä¢ T√©cnicas de respira√ß√£o\n"
        "‚Ä¢ Medita√ß√µes guiadas\n\n"
        "**üí≠ Terapia IA:** `/terapia [tema] [abordagem]`\n"
        "‚Ä¢ Apoio emocional\n"
        "‚Ä¢ Estrat√©gias terap√™uticas\n"
        "‚Ä¢ Acompanhamento\n\n"
        "**üòä Ansiedade:** T√©cnicas de controle\n"
        "‚Ä¢ Respira√ß√£o 4-7-8\n"
        "‚Ä¢ Relaxamento muscular\n"
        "‚Ä¢ Estrat√©gias cognitivas\n\n"
        "**Escolha uma op√ß√£o:**",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def handle_menu_ajuda(query, context):
    """Menu de ajuda completa"""
    keyboard = [
        [
            InlineKeyboardButton("üìö Comandos", callback_data="ver_comandos"),
            InlineKeyboardButton("‚ùì FAQ", callback_data="ver_faq")
        ],
        [
            InlineKeyboardButton("üéØ Exemplos", callback_data="ver_exemplos"),
            InlineKeyboardButton("üîß Solu√ß√£o Problemas", callback_data="solucao_problemas")
        ],
        [
            InlineKeyboardButton("üìû Suporte", callback_data="contato_suporte"),
            InlineKeyboardButton("üìñ Tutorial", callback_data="ver_tutorial")
        ],
        [
            InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üìö **Ajuda Completa - Bot Profissional**\n\n"
        "**üìö Comandos Dispon√≠veis:**\n"
        "‚Ä¢ 25+ funcionalidades de IA\n"
        "‚Ä¢ Comandos organizados por categoria\n"
        "‚Ä¢ Exemplos pr√°ticos\n\n"
        "**‚ùì FAQ - Perguntas Frequentes:**\n"
        "‚Ä¢ Como usar cada funcionalidade\n"
        "‚Ä¢ Solu√ß√£o de problemas\n"
        "‚Ä¢ Dicas e truques\n\n"
        "**üéØ Exemplos Pr√°ticos:**\n"
        "‚Ä¢ Casos de uso reais\n"
        "‚Ä¢ Demonstra√ß√µes\n"
        "‚Ä¢ Melhores pr√°ticas\n\n"
        "**Escolha uma op√ß√£o:**",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def handle_menu_config(query, context):
    """Menu de configura√ß√µes"""
    keyboard = [
        [
            InlineKeyboardButton("‚öôÔ∏è Prefer√™ncias", callback_data="preferencias"),
            InlineKeyboardButton("üåç Idioma", callback_data="config_idioma")
        ],
        [
            InlineKeyboardButton("üîî Notifica√ß√µes", callback_data="config_notificacoes"),
            InlineKeyboardButton("üîí Privacidade", callback_data="config_privacidade")
        ],
        [
            InlineKeyboardButton("üìä Estat√≠sticas", callback_data="ver_estatisticas"),
            InlineKeyboardButton("üîÑ Atualiza√ß√µes", callback_data="ver_atualizacoes")
        ],
        [
            InlineKeyboardButton("üîô Voltar ao Menu", callback_data="voltar_menu")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "‚öôÔ∏è **Configura√ß√µes e Prefer√™ncias**\n\n"
        "**‚öôÔ∏è Prefer√™ncias:**\n"
        "‚Ä¢ Configura√ß√µes personalizadas\n"
        "‚Ä¢ Ajustes de interface\n"
        "‚Ä¢ Comportamento do bot\n\n"
        "**üåç Idioma:**\n"
        "‚Ä¢ Portugu√™s (padr√£o)\n"
        "‚Ä¢ Ingl√™s\n"
        "‚Ä¢ Espanhol\n\n"
        "**üîî Notifica√ß√µes:**\n"
        "‚Ä¢ Lembretes personalizados\n"
        "‚Ä¢ Frequ√™ncia de alertas\n"
        "‚Ä¢ Tipos de notifica√ß√£o\n\n"
        "**Escolha uma op√ß√£o:**",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

# === COMANDOS MULTIMODAIS ===
async def analise_multimodal(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Comando principal para an√°lise multimodal"""
    await update.message.reply_text(
        "üîç **An√°lise Multimodal**\n\n"
        "Este comando permite an√°lise combinada de diferentes tipos de m√≠dia:\n\n"
        "üì∏ **Texto + Imagem**: `/texto_imagem`\n"
        "üé§ **√Åudio + Contexto**: `/audio_contexto`\n"
        "üìÑ **Documento + Busca**: `/documento_busca`\n"
        "üìä **Dados + Visualiza√ß√£o**: `/dados_visualizacao`\n\n"
        "**Como usar:**\n"
        "1. Envie uma imagem com texto\n"
        "2. Use `/texto_imagem` para an√°lise combinada\n"
        "3. Ou envie √°udio e use `/audio_contexto`\n\n"
        "**Exemplo:**\n"
        "Envie uma foto de um produto + texto 'Analise este produto'",
        parse_mode='Markdown'
    )

async def analise_texto_imagem(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """An√°lise combinada de texto + imagem"""
    try:
        # Verificar se h√° imagem no contexto
        if not context.user_data.get("last_image"):
            await update.message.reply_text(
                "üì∏ **An√°lise Texto + Imagem**\n\n"
                "Para usar este comando:\n"
                "1. Envie uma imagem primeiro\n"
                "2. Depois use `/texto_imagem` com seu texto\n\n"
                "**Exemplo:**\n"
                "`/texto_imagem Analise esta imagem e me diga o que voc√™ v√™`",
                parse_mode='Markdown'
            )
            return
        
        text = " ".join(context.args) if context.args else "Analise esta imagem"
        image = context.user_data["last_image"]
        
        # Processar an√°lise multimodal
        processor = context.application.bot_data["multimodal_processor"]
        multimodal_context = MultimodalContext(
            text=text,
            image=image,
            timestamp=datetime.now().isoformat()
        )
        
        result = await processor.analyze_text_image(text, image)
        
        if result["success"]:
            await update.message.reply_text(
                f"üîç **An√°lise Texto + Imagem**\n\n"
                f"{result['analysis']}\n\n"
                f"**Confian√ßa:** {result['confidence']:.1%}",
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text(f"‚ùå Erro na an√°lise: {result['error']}")
            
    except Exception as e:
        logger.error(f"Erro em analise_texto_imagem: {e}")
        await update.message.reply_text("‚ùå Erro ao processar an√°lise multimodal")

async def analise_audio_contexto(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """An√°lise combinada de √°udio + contexto"""
    try:
        # Verificar se h√° √°udio no contexto
        if not context.user_data.get("last_audio_text"):
            await update.message.reply_text(
                "üé§ **An√°lise √Åudio + Contexto**\n\n"
                "Para usar este comando:\n"
                "1. Envie uma mensagem de voz primeiro\n"
                "2. Depois use `/audio_contexto`\n\n"
                "O bot analisar√° o √°udio considerando:\n"
                "‚Ä¢ Hist√≥rico da conversa\n"
                "‚Ä¢ Prefer√™ncias do usu√°rio\n"
                "‚Ä¢ Contexto atual",
                parse_mode='Markdown'
            )
            return
        
        audio_text = context.user_data["last_audio_text"]
        user_context = {
            "user_history": context.user_data.get("chat_history", []),
            "current_topic": context.user_data.get("current_topic", ""),
            "preferences": context.user_data.get("preferences", {})
        }
        
        # Processar an√°lise multimodal
        processor = context.application.bot_data["multimodal_processor"]
        result = await processor.analyze_audio_context(audio_text, user_context)
        
        if result["success"]:
            await update.message.reply_text(
                f"üé§ **An√°lise √Åudio + Contexto**\n\n"
                f"{result['analysis']}\n\n"
                f"**Inten√ß√£o:** {result['intent'].title()}\n"
                f"**Confian√ßa:** {result['confidence']:.1%}\n\n"
                f"**Sugest√µes:**\n" + "\n".join(f"‚Ä¢ {s}" for s in result['suggestions']),
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text(f"‚ùå Erro na an√°lise: {result['error']}")
            
    except Exception as e:
        logger.error(f"Erro em analise_audio_contexto: {e}")
        await update.message.reply_text("‚ùå Erro ao processar an√°lise de √°udio")

async def analise_documento_busca(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """An√°lise combinada de documento + busca web"""
    try:
        # Verificar se h√° documento no contexto
        if not context.user_data.get("last_document"):
            await update.message.reply_text(
                "üìÑ **An√°lise Documento + Busca**\n\n"
                "Para usar este comando:\n"
                "1. Envie um documento primeiro\n"
                "2. Depois use `/documento_busca`\n\n"
                "O bot ir√°:\n"
                "‚Ä¢ Analisar o documento\n"
                "‚Ä¢ Buscar informa√ß√µes relacionadas\n"
                "‚Ä¢ Validar fatos\n"
                "‚Ä¢ Fornecer contexto adicional",
                parse_mode='Markdown'
            )
            return
        
        document_content = context.user_data["last_document"]
        search_query = " ".join(context.args) if context.args else document_content[:100]
        
        # Buscar informa√ß√µes relacionadas
        settings = context.application.bot_data["settings"]
        search_url = "https://api.tavily.com/search"
        search_params = {
            "api_key": settings.tavily_api_key,
            "query": search_query,
            "max_results": 5
        }
        
        async with context.application.bot_data["http_client"] as client:
            search_response = await client.get(search_url, params=search_params)
            search_results = search_response.json().get("results", [])
        
        # Processar an√°lise multimodal
        processor = context.application.bot_data["multimodal_processor"]
        result = await processor.analyze_document_search(document_content, search_results)
        
        if result["success"]:
            await update.message.reply_text(
                f"üìÑ **An√°lise Documento + Busca**\n\n"
                f"{result['analysis']}\n\n"
                f"**Resumo:** {result['document_summary']}\n"
                f"**Confian√ßa:** {result['confidence']:.1%}",
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text(f"‚ùå Erro na an√°lise: {result['error']}")
            
    except Exception as e:
        logger.error(f"Erro em analise_documento_busca: {e}")
        await update.message.reply_text("‚ùå Erro ao processar an√°lise de documento")

async def analise_dados_visualizacao(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """An√°lise combinada de dados + visualiza√ß√£o"""
    try:
        # Verificar se h√° dados no contexto
        if not context.args:
            await update.message.reply_text(
                "üìä **An√°lise Dados + Visualiza√ß√£o**\n\n"
                "**Sintaxe:** `/dados_visualizacao <tipo> <dados>`\n\n"
                "**Tipos dispon√≠veis:**\n"
                "‚Ä¢ `chart` - Gr√°fico gen√©rico\n"
                "‚Ä¢ `bar` - Gr√°fico de barras\n"
                "‚Ä¢ `line` - Gr√°fico de linha\n"
                "‚Ä¢ `pie` - Gr√°fico de pizza\n\n"
                "**Exemplo:**\n"
                "`/dados_visualizacao bar vendas:100,marketing:80,suporte:60`",
                parse_mode='Markdown'
            )
            return
        
        viz_type = context.args[0]
        data_str = " ".join(context.args[1:])
        
        # Converter string de dados para dicion√°rio
        try:
            data = {}
            for item in data_str.split(','):
                if ':' in item:
                    key, value = item.split(':', 1)
                    data[key.strip()] = float(value.strip())
        except:
            await update.message.reply_text("‚ùå Formato de dados inv√°lido. Use: chave:valor,chave:valor")
            return
        
        # Processar an√°lise multimodal
        processor = context.application.bot_data["multimodal_processor"]
        result = await processor.analyze_data_visualization(data, viz_type)
        
        if result["success"]:
            await update.message.reply_text(
                f"üìä **An√°lise Dados + Visualiza√ß√£o**\n\n"
                f"{result['analysis']}\n\n"
                f"**Gr√°fico Recomendado:** {result['recommended_chart']}\n"
                f"**Confian√ßa:** {result['confidence']:.1%}\n\n"
                f"**Insights:**\n" + "\n".join(f"‚Ä¢ {insight}" for insight in result['insights']),
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text(f"‚ùå Erro na an√°lise: {result['error']}")
            
    except Exception as e:
        logger.error(f"Erro em analise_dados_visualizacao: {e}")
        await update.message.reply_text("‚ùå Erro ao processar an√°lise de dados")

async def limpar_audio_referencia(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Limpa o √°udio de refer√™ncia armazenado"""
    try:
        # Verificar se h√° √°udio armazenado
        if context.user_data.get("clone_reference_audio"):
            # Limpar √°udio de refer√™ncia
            context.user_data.pop("clone_reference_audio", None)
            context.user_data.pop("clone_audio_mime_type", None)
            
            await update.message.reply_text(
                "üóëÔ∏è **√Åudio de Refer√™ncia Removido**\n\n"
                "‚úÖ O √°udio de refer√™ncia foi limpo com sucesso!\n\n"
                "**Para usar clone de voz novamente:**\n"
                "1. Grave um novo √°udio de refer√™ncia\n"
                "2. Envie o √°udio normalmente\n"
                "3. Use `/clonar_voz [texto]`"
            )
        else:
            await update.message.reply_text(
                "‚ÑπÔ∏è **Nenhum √Åudio Armazenado**\n\n"
                "N√£o h√° √°udio de refer√™ncia para ser removido.\n\n"
                "**Para usar clone de voz:**\n"
                "1. Grave um √°udio de refer√™ncia\n"
                "2. Envie o √°udio normalmente\n"
                "3. Use `/clonar_voz [texto]`"
            )
            
    except Exception as e:
        logger.error(f"Erro ao limpar √°udio de refer√™ncia: {e}")
        await update.message.reply_text("‚ùå Erro ao limpar √°udio de refer√™ncia")

async def clonar_voz_simples(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Vers√£o simplificada do clone de voz que sempre funciona"""
    try:
        if not context.args:
            await update.message.reply_text(
                "üé≠ **Clone de Voz Simples**\n\n"
                "**Como usar:**\n"
                "`/clonar_voz_simples [texto]`\n\n"
                "**Exemplo:**\n"
                "`/clonar_voz_simples Ol√°, esta √© minha voz!`\n\n"
                "**Caracter√≠sticas:**\n"
                "‚Ä¢ Sempre funciona\n"
                "‚Ä¢ Qualidade alta\n"
                "‚Ä¢ Processamento r√°pido\n"
                "‚Ä¢ Sem necessidade de √°udio de refer√™ncia"
            )
            return
        
        text_to_speak = " ".join(context.args)
        
        await update.message.reply_text(
            "üé≠ **Gerando √Åudio...**\n\n"
            f"üìù **Texto:** {text_to_speak}\n"
            "‚è≥ Processando..."
        )
        
        # Tentar usar clonador se houver √°udio de refer√™ncia
        voice_cloner = context.application.bot_data["voice_cloner"]
        reference_audio_bytes = context.user_data.get("clone_reference_audio")
        
        if reference_audio_bytes:
            # Usar clonagem avan√ßada
            cloned_audio = await voice_cloner.clone_voice_advanced(reference_audio_bytes, text_to_speak)
            if cloned_audio:
                audio_io = cloned_audio
            else:
                # Fallback para gTTS
                audio_io = await asyncio.to_thread(text_to_speech_sync, text_to_speak, 'pt')
        else:
            # Gerar √°udio com gTTS
            audio_io = await asyncio.to_thread(text_to_speech_sync, text_to_speak, 'pt')
        
        # Verificar se usou clonagem
        used_cloning = reference_audio_bytes and cloned_audio is not None
        
        await update.message.reply_text(
            "‚úÖ **√Åudio Gerado com Sucesso!**\n\n"
            "üé≠ **Caracter√≠sticas:**\n"
            f"‚Ä¢ M√©todo: {'Clonagem de voz' if used_cloning else 'Voz natural em portugu√™s'}\n"
            "‚Ä¢ Qualidade alta\n"
            "‚Ä¢ Processamento otimizado\n"
            f"‚Ä¢ {'Voz masculina ajustada' if used_cloning else 'Voz padr√£o'}\n\n"
            "üì§ Enviando √°udio..."
        )
        
        # Enviar √°udio
        await context.bot.send_voice(
            chat_id=update.effective_chat.id,
            voice=audio_io,
            caption=f"üé≠ **Voz Gerada:** {text_to_speak}"
        )
        
        # Adicionar ao hist√≥rico
        chat_id = update.effective_chat.id
        database.add_message_to_history(chat_id, "user", f"[CLONE_VOZ_SIMPLES] {text_to_speak}")
        database.add_message_to_history(chat_id, "model", "√Åudio gerado com sucesso!")
        
    except Exception as e:
        logger.error(f"Erro no clone de voz simples: {e}")
        await update.message.reply_text(
            "‚ùå **Erro ao Gerar √Åudio**\n\n"
            "üîß **Poss√≠veis causas:**\n"
            "‚Ä¢ Texto muito longo\n"
            "‚Ä¢ Caracteres especiais\n"
            "‚Ä¢ Problema de conex√£o\n\n"
            "üí° **Sugest√µes:**\n"
            "‚Ä¢ Use texto mais curto\n"
            "‚Ä¢ Evite caracteres especiais\n"
            "‚Ä¢ Tente novamente"
        )

# --- INICIALIZA√á√ÉO ---
async def post_init(application: Application) -> None:
    database.initialize_db()
    settings = Settings.load_from_env()
    
    # Configurar Gemini
    genai.configure(api_key=settings.gemini_api_key)
    
    application.bot_data["settings"] = settings
    application.bot_data["http_client"] = httpx.AsyncClient()
    
    # Modelo Gemini
    safety_settings = [{"category": f"HARM_CATEGORY_{c}", "threshold": "BLOCK_NONE"} for c in ["HARASSMENT", "HATE_SPEECH", "SEXUALLY_EXPLICIT", "DANGEROUS_CONTENT"]]
    application.bot_data["gemini_model"] = genai.GenerativeModel(settings.gemini_model_name, safety_settings=safety_settings)
    
    # Processador Multimodal
    application.bot_data["multimodal_processor"] = MultimodalProcessor(
        application.bot_data["gemini_model"], 
        application.bot_data["http_client"]
    )
    
    # Clonador de Voz
    application.bot_data["voice_cloner"] = VoiceCloner(
        fish_audio_api_key=settings.fish_audio_api_key,
        coqui_api_key=settings.coqui_api_key
    )
    
    logger.info("Recursos (DB, HTTP, Gemini, Multimodal, VoiceCloner) inicializados.")

async def post_shutdown(application: Application) -> None:
    client: httpx.AsyncClient = application.bot_data.get("http_client")
    if client: await client.aclose()
    logger.info("Recursos (cliente HTTP) liberados.")

# === NOVOS COMANDOS PARA INTERFACE MELHORADA ===
async def comando_voz(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Comando de voz para controle do bot"""
    try:
        # Verificar se h√° √°udio de voz
        if not update.message.voice and not update.message.audio:
            await update.message.reply_text(
                "üé§ **Comando de Voz**\n\n"
                "Para usar comandos de voz:\n"
                "‚Ä¢ Grave uma mensagem de voz\n"
                "‚Ä¢ Ou envie um √°udio\n\n"
                "**Comandos dispon√≠veis:**\n"
                "‚Ä¢ 'Clonar minha voz'\n"
                "‚Ä¢ 'Gerar imagem'\n"
                "‚Ä¢ 'Chat com IA'\n"
                "‚Ä¢ 'Verificar seguran√ßa'\n"
                "‚Ä¢ 'Abrir configura√ß√µes'"
            )
            return
        
        # Processar √°udio de voz
        await update.message.reply_text("üé§ **Processando comando de voz...**")
        
        # Simular processamento de √°udio (em produ√ß√£o, usar speech-to-text)
        # Por enquanto, vamos usar um comando simulado
        simulated_command = "clonar minha voz"  # Em produ√ß√£o, extrair do √°udio
        
        # Processar comando usando o sistema de UI
        await ui_manager.process_voice_command(update, context, simulated_command)
        
    except Exception as e:
        logger.error(f"Erro no comando de voz: {e}")
        await update.message.reply_text(
            "‚ùå **Erro no Comando de Voz**\n\n"
            "N√£o foi poss√≠vel processar seu comando de voz.\n"
            "Tente novamente ou use comandos de texto."
        )

async def menu_principal(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Menu principal melhorado com interface din√¢mica"""
    try:
        await ui_manager.show_menu(update, context, "main_menu")
    except Exception as e:
        logger.error(f"Erro ao mostrar menu principal: {e}")
        await update.message.reply_text("‚ùå Erro ao carregar menu. Tente novamente.")

async def shortcuts_personalizados(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Mostra shortcuts personalizados do usu√°rio"""
    try:
        await ui_manager.show_shortcuts(update, context)
    except Exception as e:
        logger.error(f"Erro ao mostrar shortcuts: {e}")
        await update.message.reply_text("‚ùå Erro ao carregar shortcuts. Tente novamente.")

async def tour_interativo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Inicia tour interativo para novos usu√°rios"""
    try:
        await ui_manager.start_interactive_tour(update, context)
    except Exception as e:
        logger.error(f"Erro ao iniciar tour: {e}")
        await update.message.reply_text("‚ùå Erro ao iniciar tour. Tente novamente.")

async def handle_all_callbacks(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Manipula TODOS os callbacks do bot (menus e bot√µes)"""
    try:
        query = update.callback_query
        await query.answer()
        
        callback_data = query.data
        logger.info(f"üîç Callback recebido: {callback_data}")
        
        # === CALLBACK SWAP_FACES COM PRIORIDADE ABSOLUTA ===
        if callback_data == "swap_faces":
            logger.info("üéØ CALLBACK SWAP_FACES DETECTADO - PROCESSANDO!")
            await query.edit_message_text(
                "üîÑ **Face Swap Funcional!**\n\n"
                "**Como usar:**\n"
                "1. Use `/trocar_rosto` para iniciar\n"
                "2. Envie a primeira imagem (rosto fonte)\n"
                "3. Envie a segunda imagem (rosto destino)\n"
                "4. Receba o resultado!\n\n"
                "**Comandos dispon√≠veis:**\n"
                "‚Ä¢ `/trocar_rosto` - Face swap b√°sico\n"
                "‚Ä¢ `/trocar_rosto_ultra` - Qualidade m√°xima\n"
                "‚Ä¢ `/trocar_rosto_rapido` - Processamento r√°pido\n\n"
                "**Status:** ‚úÖ Sistema funcionando!\n"
                "**Teste:** Use `/trocar_rosto` agora!",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîÑ Tentar Agora", callback_data="try_swap_faces"),
                    InlineKeyboardButton("üîô Voltar", callback_data="face_swap_menu")
                ]])
            )
            return  # IMPORTANTE: Retornar aqui para n√£o processar outros callbacks
        
        # === CALLBACK FACE_SCENARIO_MENU COM PRIORIDADE ===
        if callback_data == "face_scenario_menu":
            logger.info("üé≠ CALLBACK FACE_SCENARIO_MENU DETECTADO - PROCESSANDO!")
            await query.edit_message_text(
                "üé≠ **Rosto + Cen√°rio**\n\n"
                "**Funcionalidades dispon√≠veis:**\n"
                "‚Ä¢ üåÖ Cen√°rio Personalizado\n"
                "‚Ä¢ üé® Estilo Realista\n"
                "‚Ä¢ ‚ú® Estilo Fantasia\n"
                "‚Ä¢ üöÄ Estilo Cyberpunk\n"
                "‚Ä¢ üì∏ Estilo Vintage\n\n"
                "**Como usar:**\n"
                "1. Envie uma foto com rosto\n"
                "2. Use `/rosto_cenario <descri√ß√£o>`\n"
                "3. Aguarde a gera√ß√£o\n\n"
                "**Exemplos:**\n"
                "‚Ä¢ `/rosto_cenario praia tropical`\n"
                "‚Ä¢ `/rosto_cenario cidade futurista`\n"
                "‚Ä¢ `/rosto_cenario floresta m√°gica`\n\n"
                "**Status:** ‚úÖ Sistema funcionando!",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üåÖ Cen√°rio Personalizado", callback_data="custom_scenario"),
                    InlineKeyboardButton("üé® Estilos", callback_data="artistic_styles_menu")
                ], [
                    InlineKeyboardButton("üîô Voltar", callback_data="image_main_menu")
                ]])
            )
            return  # IMPORTANTE: Retornar aqui para n√£o processar outros callbacks
        
        # === CALLBACK ARTISTIC_STYLES_MENU COM PRIORIDADE ===
        if callback_data == "artistic_styles_menu":
            logger.info("üé® CALLBACK ARTISTIC_STYLES_MENU DETECTADO - PROCESSANDO!")
            await query.edit_message_text(
                "üé® **Estilos Art√≠sticos**\n\n"
                "**Estilos dispon√≠veis:**\n"
                "‚Ä¢ üé≠ Estilo Anime\n"
                "‚Ä¢ üñºÔ∏è Estilo Pintura\n"
                "‚Ä¢ üì∏ Estilo Fotogr√°fico\n"
                "‚Ä¢ üé™ Estilo Cartoon\n"
                "‚Ä¢ üåü Estilo Surrealista\n\n"
                "**Como usar:**\n"
                "1. Escolha o estilo desejado\n"
                "2. Envie uma foto com rosto\n"
                "3. Receba resultado com estilo aplicado\n\n"
                "**Recomenda√ß√µes:**\n"
                "‚Ä¢ Realista: Para fotos profissionais\n"
                "‚Ä¢ Fantasia: Para arte conceitual\n"
                "‚Ä¢ Cyberpunk: Para temas futuristas\n"
                "‚Ä¢ Vintage: Para nostalgia\n"
                "‚Ä¢ Art√≠stico: Para pinturas\n\n"
                "**Status:** ‚úÖ Sistema funcionando!",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üé≠ Anime", callback_data="anime_style"),
                    InlineKeyboardButton("üñºÔ∏è Pintura", callback_data="painting_style")
                ], [
                    InlineKeyboardButton("üì∏ Fotogr√°fico", callback_data="photographic_style"),
                    InlineKeyboardButton("üé™ Cartoon", callback_data="cartoon_style")
                ], [
                    InlineKeyboardButton("üåü Surrealista", callback_data="surreal_style")
                ], [
                    InlineKeyboardButton("üîô Voltar", callback_data="image_main_menu")
                ]])
            )
            return  # IMPORTANTE: Retornar aqui para n√£o processar outros callbacks
        
        # === CALLBACK SCENARIO_TEMPLATES_MENU COM PRIORIDADE ===
        if callback_data == "scenario_templates_menu":
            logger.info("üåÖ CALLBACK SCENARIO_TEMPLATES_MENU DETECTADO - PROCESSANDO!")
            await query.edit_message_text(
                "üåÖ **Templates de Cen√°rios**\n\n"
                "**Templates dispon√≠veis:**\n"
                "‚Ä¢ üèñÔ∏è Praia Tropical\n"
                "‚Ä¢ üè¢ Escrit√≥rio Moderno\n"
                "‚Ä¢ üå≤ Floresta M√°gica\n"
                "‚Ä¢ üçΩÔ∏è Restaurante Elegante\n"
                "‚Ä¢ üåå Espa√ßo Sideral\n"
                "‚Ä¢ ‚õ∞Ô∏è Montanha Majestosa\n"
                "‚Ä¢ üèôÔ∏è Cidade Futurista\n"
                "‚Ä¢ üè∞ Castelo Medieval\n"
                "‚Ä¢ üî¨ Laborat√≥rio Cient√≠fico\n"
                "‚Ä¢ üìö Biblioteca Antiga\n\n"
                "**Como usar:**\n"
                "1. Escolha um template\n"
                "2. Envie uma foto com rosto\n"
                "3. Receba resultado com seu rosto no cen√°rio\n\n"
                "**Status:** ‚úÖ Sistema funcionando!",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üèñÔ∏è Praia", callback_data="template_praia"),
                    InlineKeyboardButton("üè¢ Escrit√≥rio", callback_data="template_escritorio")
                ], [
                    InlineKeyboardButton("üå≤ Floresta", callback_data="template_floresta"),
                    InlineKeyboardButton("üçΩÔ∏è Restaurante", callback_data="template_restaurante")
                ], [
                    InlineKeyboardButton("üåå Espa√ßo", callback_data="template_espaco"),
                    InlineKeyboardButton("‚õ∞Ô∏è Montanha", callback_data="template_montanha")
                ], [
                    InlineKeyboardButton("üèôÔ∏è Cidade", callback_data="template_cidade"),
                    InlineKeyboardButton("üè∞ Castelo", callback_data="template_castelo")
                ], [
                    InlineKeyboardButton("üî¨ Laborat√≥rio", callback_data="template_laboratorio"),
                    InlineKeyboardButton("üìö Biblioteca", callback_data="template_biblioteca")
                ], [
                    InlineKeyboardButton("üîô Voltar", callback_data="image_main_menu")
                ]])
            )
            return  # IMPORTANTE: Retornar aqui para n√£o processar outros callbacks
        
        # === CALLBACK FACE_ANALYSIS_MENU COM PRIORIDADE ===
        if callback_data == "face_analysis_menu":
            logger.info("üì∏ CALLBACK FACE_ANALYSIS_MENU DETECTADO - PROCESSANDO!")
            await query.edit_message_text(
                "üì∏ **An√°lise Facial Avan√ßada**\n\n"
                "**Funcionalidades dispon√≠veis:**\n"
                "‚Ä¢ üîç Detec√ß√£o de Rostos\n"
                "‚Ä¢ üìä An√°lise de Qualidade\n"
                "‚Ä¢ üéØ Pontos Faciais\n"
                "‚Ä¢ üìè Medi√ß√µes Faciais\n"
                "‚Ä¢ üé® An√°lise de Estilo\n"
                "‚Ä¢ üìà Relat√≥rio Completo\n\n"
                "**Como usar:**\n"
                "1. Envie uma foto com rosto\n"
                "2. Use `/analisar_rosto` para an√°lise completa\n"
                "3. Receba relat√≥rio detalhado\n\n"
                "**Informa√ß√µes analisadas:**\n"
                "‚Ä¢ Detec√ß√£o de rostos (0-1.0)\n"
                "‚Ä¢ Alinhamento facial (0-1.0)\n"
                "‚Ä¢ Ilumina√ß√£o (0-1.0)\n"
                "‚Ä¢ Resolu√ß√£o da imagem (0-1.0)\n"
                "‚Ä¢ Pose do rosto (0-1.0)\n\n"
                "**Status:** ‚úÖ Sistema funcionando!",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîç Analisar Imagem", callback_data="analyze_current_image"),
                    InlineKeyboardButton("üìä Ver Hist√≥rico", callback_data="view_analysis_history")
                ], [
                    InlineKeyboardButton("üéØ Pontos Faciais", callback_data="facial_landmarks"),
                    InlineKeyboardButton("üìè Medi√ß√µes", callback_data="facial_measurements")
                ], [
                    InlineKeyboardButton("üîô Voltar", callback_data="image_main_menu")
                ]])
            )
            return  # IMPORTANTE: Retornar aqui para n√£o processar outros callbacks
        
        # === CALLBACK IMAGE_SETTINGS_MENU COM PRIORIDADE ===
        if callback_data == "image_settings_menu":
            logger.info("‚öôÔ∏è CALLBACK IMAGE_SETTINGS_MENU DETECTADO - PROCESSANDO!")
            await query.edit_message_text(
                "‚öôÔ∏è **Configura√ß√µes de Imagem**\n\n"
                "**Configura√ß√µes dispon√≠veis:**\n"
                "‚Ä¢ üé® Qualidade de Processamento\n"
                "‚Ä¢ üìê Resolu√ß√£o de Sa√≠da\n"
                "‚Ä¢ üîÑ Modo de Blending\n"
                "‚Ä¢ üéØ Detec√ß√£o Facial\n"
                "‚Ä¢ üìä N√≠vel de Debug\n"
                "‚Ä¢ üíæ Cache de Imagens\n\n"
                "**Qualidades dispon√≠veis:**\n"
                "‚Ä¢ **R√°pido** - 30-60 segundos\n"
                "‚Ä¢ **Padr√£o** - 1-2 minutos\n"
                "‚Ä¢ **Ultra** - 2-3 minutos\n\n"
                "**Resolu√ß√µes dispon√≠veis:**\n"
                "‚Ä¢ **512x512** - R√°pido\n"
                "‚Ä¢ **1024x1024** - Padr√£o\n"
                "‚Ä¢ **2048x2048** - Ultra\n\n"
                "**Status:** ‚úÖ Sistema funcionando!",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üé® Qualidade", callback_data="quality_settings"),
                    InlineKeyboardButton("üìê Resolu√ß√£o", callback_data="resolution_settings")
                ], [
                    InlineKeyboardButton("üîÑ Blending", callback_data="blending_settings"),
                    InlineKeyboardButton("üéØ Detec√ß√£o", callback_data="detection_settings")
                ], [
                    InlineKeyboardButton("üìä Debug", callback_data="debug_settings"),
                    InlineKeyboardButton("üíæ Cache", callback_data="cache_settings")
                ], [
                    InlineKeyboardButton("üîô Voltar", callback_data="image_main_menu")
                ]])
            )
            return  # IMPORTANTE: Retornar aqui para n√£o processar outros callbacks
        
        # === CALLBACK SONO_COACH COM PRIORIDADE ===
        if callback_data == "sono_coach":
            logger.info("üò¥ CALLBACK SONO_COACH DETECTADO - PROCESSANDO!")
            await query.edit_message_text(
                "üò¥ **Coach de Sono Inteligente**\n\n"
                "**Funcionalidades dispon√≠veis:**\n"
                "‚Ä¢ üåô An√°lise de Padr√µes de Sono\n"
                "‚Ä¢ üìä Relat√≥rios de Qualidade\n"
                "‚Ä¢ üéØ Dicas Personalizadas\n"
                "‚Ä¢ ‚è∞ Lembretes de Hor√°rio\n"
                "‚Ä¢ üßò T√©cnicas de Relaxamento\n"
                "‚Ä¢ üìà Acompanhamento de Progresso\n\n"
                "**Como usar:**\n"
                "1. Use `/sono_analise` para an√°lise completa\n"
                "2. Use `/sono_dicas` para dicas personalizadas\n"
                "3. Use `/sono_relatorio` para relat√≥rio detalhado\n\n"
                "**Comandos dispon√≠veis:**\n"
                "‚Ä¢ `/sono_analise` - An√°lise de padr√µes\n"
                "‚Ä¢ `/sono_dicas` - Dicas personalizadas\n"
                "‚Ä¢ `/sono_relatorio` - Relat√≥rio completo\n"
                "‚Ä¢ `/sono_lembrete` - Configurar lembretes\n\n"
                "**Status:** ‚úÖ Sistema funcionando!",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üåô An√°lise de Sono", callback_data="sleep_analysis"),
                    InlineKeyboardButton("üìä Relat√≥rio", callback_data="sleep_report")
                ], [
                    InlineKeyboardButton("üéØ Dicas", callback_data="sleep_tips"),
                    InlineKeyboardButton("‚è∞ Lembretes", callback_data="sleep_reminders")
                ], [
                    InlineKeyboardButton("üßò Relaxamento", callback_data="sleep_relaxation"),
                    InlineKeyboardButton("üìà Progresso", callback_data="sleep_progress")
                ], [
                    InlineKeyboardButton("üîô Voltar", callback_data="menu_coach")
                ]])
            )
            return  # IMPORTANTE: Retornar aqui para n√£o processar outros callbacks
        
        # === CALLBACKS ADICIONAIS COM PRIORIDADE ===
        if callback_data == "sleep_analysis":
            logger.info("üåô CALLBACK SLEEP_ANALYSIS DETECTADO - PROCESSANDO!")
            await query.edit_message_text(
                "üåô **An√°lise de Padr√µes de Sono**\n\n"
                "**Use o comando:** `/sono_analise`\n\n"
                "**O que ser√° analisado:**\n"
                "‚Ä¢ Hor√°rios de dormir e acordar\n"
                "‚Ä¢ Qualidade do sono\n"
                "‚Ä¢ Padr√µes de interrup√ß√£o\n"
                "‚Ä¢ Recomenda√ß√µes personalizadas\n\n"
                "**Status:** Aguardando comando `/sono_analise`...",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô Voltar", callback_data="sono_coach")
                ]])
            )
            return
        
        if callback_data == "sleep_tips":
            logger.info("üéØ CALLBACK SLEEP_TIPS DETECTADO - PROCESSANDO!")
            await query.edit_message_text(
                "üéØ **Dicas Personalizadas de Sono**\n\n"
                "**Use o comando:** `/sono_dicas`\n\n"
                "**Dicas dispon√≠veis:**\n"
                "‚Ä¢ T√©cnicas de relaxamento\n"
                "‚Ä¢ Rotinas de sono\n"
                "‚Ä¢ Ambiente ideal\n"
                "‚Ä¢ Alimenta√ß√£o e sono\n\n"
                "**Status:** Aguardando comando `/sono_dicas`...",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô Voltar", callback_data="sono_coach")
                ]])
            )
            return
        
        if callback_data == "sleep_report":
            logger.info("üìä CALLBACK SLEEP_REPORT DETECTADO - PROCESSANDO!")
            await query.edit_message_text(
                "üìä **Relat√≥rio Completo de Sono**\n\n"
                "**Use o comando:** `/sono_relatorio`\n\n"
                "**Relat√≥rio inclui:**\n"
                "‚Ä¢ Estat√≠sticas detalhadas\n"
                "‚Ä¢ Gr√°ficos de progresso\n"
                "‚Ä¢ Compara√ß√µes hist√≥ricas\n"
                "‚Ä¢ Metas e objetivos\n\n"
                "**Status:** Aguardando comando `/sono_relatorio`...",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô Voltar", callback_data="sono_coach")
                ]])
            )
            return
        
        # === CALLBACKS DE COACHING COM PRIORIDADE ===
        if callback_data == "estresse_coach":
            logger.info("üò∞ CALLBACK ESTRESSE_COACH DETECTADO - PROCESSANDO!")
            await query.edit_message_text(
                "üò∞ **Coach Anti-Estresse**\n\n"
                "**Funcionalidades dispon√≠veis:**\n"
                "‚Ä¢ üßò T√©cnicas de Relaxamento\n"
                "‚Ä¢ üéØ Identifica√ß√£o de Gatilhos\n"
                "‚Ä¢ üìä Monitoramento de Estresse\n"
                "‚Ä¢ üåø Dicas de Bem-estar\n"
                "‚Ä¢ ‚è∞ Pausas Programadas\n"
                "‚Ä¢ üìà Acompanhamento de Progresso\n\n"
                "**Como usar:**\n"
                "1. Use `/estresse_analise` para an√°lise\n"
                "2. Use `/estresse_dicas` para dicas\n"
                "3. Use `/estresse_relatorio` para relat√≥rio\n\n"
                "**Status:** ‚úÖ Sistema funcionando!",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üßò Relaxamento", callback_data="stress_relaxation"),
                    InlineKeyboardButton("üìä An√°lise", callback_data="stress_analysis")
                ], [
                    InlineKeyboardButton("üéØ Gatilhos", callback_data="stress_triggers"),
                    InlineKeyboardButton("üåø Bem-estar", callback_data="stress_wellness")
                ], [
                    InlineKeyboardButton("üîô Voltar", callback_data="menu_coach")
                ]])
            )
            return
        
        if callback_data == "depressao_coach":
            logger.info("üòî CALLBACK DEPRESSAO_COACH DETECTADO - PROCESSANDO!")
            await query.edit_message_text(
                "üòî **Coach Anti-Depress√£o**\n\n"
                "**Funcionalidades dispon√≠veis:**\n"
                "‚Ä¢ üí™ T√©cnicas de Motiva√ß√£o\n"
                "‚Ä¢ üéØ Defini√ß√£o de Metas\n"
                "‚Ä¢ üìä Monitoramento de Humor\n"
                "‚Ä¢ üåü Atividades Positivas\n"
                "‚Ä¢ ü§ù Suporte Emocional\n"
                "‚Ä¢ üìà Acompanhamento de Progresso\n\n"
                "**Como usar:**\n"
                "1. Use `/depressao_analise` para an√°lise\n"
                "2. Use `/depressao_dicas` para dicas\n"
                "3. Use `/depressao_relatorio` para relat√≥rio\n\n"
                "**Status:** ‚úÖ Sistema funcionando!",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üí™ Motiva√ß√£o", callback_data="depression_motivation"),
                    InlineKeyboardButton("üìä An√°lise", callback_data="depression_analysis")
                ], [
                    InlineKeyboardButton("üéØ Metas", callback_data="depression_goals"),
                    InlineKeyboardButton("üåü Atividades", callback_data="depression_activities")
                ], [
                    InlineKeyboardButton("üîô Voltar", callback_data="menu_coach")
                ]])
            )
            return
        
        # === CALLBACKS DE DEPRESS√ÉO COM PRIORIDADE ===
        if callback_data == "depression_motivation":
            logger.info("üí™ CALLBACK DEPRESSION_MOTIVATION DETECTADO - PROCESSANDO!")
            await query.edit_message_text(
                "üí™ **T√©cnicas de Motiva√ß√£o**\n\n"
                "**Como usar:**\n"
                "1. Use `/depressao_motivacao` para dicas\n"
                "2. Use `/depressao_motivacao diaria` para rotina\n"
                "3. Use `/depressao_motivacao emergencia` para crise\n\n"
                "**T√©cnicas dispon√≠veis:**\n"
                "‚Ä¢ **Rotina Matinal:** Estrutura o dia\n"
                "‚Ä¢ **Metas Pequenas:** Conquistas di√°rias\n"
                "‚Ä¢ **Gratid√£o:** Foco no positivo\n"
                "‚Ä¢ **Exerc√≠cios:** Libera√ß√£o de endorfina\n"
                "‚Ä¢ **Socializa√ß√£o:** Conex√µes humanas\n"
                "‚Ä¢ **Hobbies:** Atividades prazerosas\n\n"
                "**Exemplos:**\n"
                "‚Ä¢ `/depressao_motivacao` - Dicas gerais\n"
                "‚Ä¢ `/depressao_motivacao rotina` - Rotina matinal\n"
                "‚Ä¢ `/depressao_motivacao metas` - Defini√ß√£o de metas\n"
                "‚Ä¢ `/depressao_motivacao exercicios` - Atividades f√≠sicas\n\n"
                "**Status:** ‚úÖ Sistema funcionando!",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô Voltar", callback_data="depressao_coach")
                ]])
            )
            return
        
        if callback_data == "depression_analysis":
            logger.info("üìä CALLBACK DEPRESSION_ANALYSIS DETECTADO - PROCESSANDO!")
            await query.edit_message_text(
                "üìä **An√°lise de Depress√£o**\n\n"
                "**Como usar:**\n"
                "1. Use `/depressao_analise` para an√°lise\n"
                "2. Use `/depressao_analise humor` para monitoramento\n"
                "3. Use `/depressao_analise relatorio` para relat√≥rio\n\n"
                "**An√°lises dispon√≠veis:**\n"
                "‚Ä¢ **Monitoramento de Humor:** Acompanha varia√ß√µes\n"
                "‚Ä¢ **Identifica√ß√£o de Padr√µes:** Reconhece gatilhos\n"
                "‚Ä¢ **Avalia√ß√£o de Sintomas:** Severidade dos sintomas\n"
                "‚Ä¢ **Progresso Temporal:** Evolu√ß√£o ao longo do tempo\n"
                "‚Ä¢ **Fatores de Risco:** Identifica vulnerabilidades\n"
                "‚Ä¢ **Estrat√©gias Eficazes:** O que funciona melhor\n\n"
                "**Exemplos:**\n"
                "‚Ä¢ `/depressao_analise` - An√°lise completa\n"
                "‚Ä¢ `/depressao_analise humor` - Monitoramento de humor\n"
                "‚Ä¢ `/depressao_analise padroes` - Identifica√ß√£o de padr√µes\n"
                "‚Ä¢ `/depressao_analise sintomas` - Avalia√ß√£o de sintomas\n\n"
                "**Status:** ‚úÖ Sistema funcionando!",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô Voltar", callback_data="depressao_coach")
                ]])
            )
            return
        
        if callback_data == "depression_goals":
            logger.info("üéØ CALLBACK DEPRESSION_GOALS DETECTADO - PROCESSANDO!")
            await query.edit_message_text(
                "üéØ **Defini√ß√£o de Metas**\n\n"
                "**Como usar:**\n"
                "1. Use `/depressao_metas` para definir metas\n"
                "2. Use `/depressao_metas pequenas` para metas di√°rias\n"
                "3. Use `/depressao_metas acompanhar` para progresso\n\n"
                "**Tipos de metas:**\n"
                "‚Ä¢ **Metas Di√°rias:** Pequenas conquistas\n"
                "‚Ä¢ **Metas Semanais:** Objetivos semanais\n"
                "‚Ä¢ **Metas Mensais:** Planos de longo prazo\n"
                "‚Ä¢ **Metas de Bem-estar:** Foco na sa√∫de\n"
                "‚Ä¢ **Metas Sociais:** Conex√µes e relacionamentos\n"
                "‚Ä¢ **Metas Pessoais:** Desenvolvimento pessoal\n\n"
                "**Exemplos:**\n"
                "‚Ä¢ `/depressao_metas` - Defini√ß√£o de metas\n"
                "‚Ä¢ `/depressao_metas diarias` - Metas do dia\n"
                "‚Ä¢ `/depressao_metas semanais` - Objetivos da semana\n"
                "‚Ä¢ `/depressao_metas bemestar` - Metas de sa√∫de\n\n"
                "**Status:** ‚úÖ Sistema funcionando!",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô Voltar", callback_data="depressao_coach")
                ]])
            )
            return
        
        if callback_data == "depression_activities":
            logger.info("üåü CALLBACK DEPRESSION_ACTIVITIES DETECTADO - PROCESSANDO!")
            await query.edit_message_text(
                "üåü **Atividades Positivas**\n\n"
                "**Como usar:**\n"
                "1. Use `/depressao_atividades` para sugest√µes\n"
                "2. Use `/depressao_atividades fisicas` para exerc√≠cios\n"
                "3. Use `/depressao_atividades criativas` para arte\n\n"
                "**Categorias de atividades:**\n"
                "‚Ä¢ **Atividades F√≠sicas:** Exerc√≠cios e movimento\n"
                "‚Ä¢ **Atividades Criativas:** Arte, m√∫sica, escrita\n"
                "‚Ä¢ **Atividades Sociais:** Intera√ß√£o com pessoas\n"
                "‚Ä¢ **Atividades Relaxantes:** Medita√ß√£o, leitura\n"
                "‚Ä¢ **Atividades Produtivas:** Trabalho, estudos\n"
                "‚Ä¢ **Atividades Prazerosas:** Hobbies e divers√£o\n\n"
                "**Exemplos:**\n"
                "‚Ä¢ `/depressao_atividades` - Sugest√µes gerais\n"
                "‚Ä¢ `/depressao_atividades fisicas` - Exerc√≠cios\n"
                "‚Ä¢ `/depressao_atividades criativas` - Arte e m√∫sica\n"
                "‚Ä¢ `/depressao_atividades sociais` - Intera√ß√£o social\n"
                "‚Ä¢ `/depressao_atividades relaxantes` - Relaxamento\n\n"
                "**Status:** ‚úÖ Sistema funcionando!",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô Voltar", callback_data="depressao_coach")
                ]])
            )
            return
        
        if callback_data == "ansiedade_coach":
            logger.info("üò∞ CALLBACK ANSIEDADE_COACH DETECTADO - PROCESSANDO!")
            await query.edit_message_text(
                "üò∞ **Coach Anti-Ansiedade**\n\n"
                "**Funcionalidades dispon√≠veis:**\n"
                "‚Ä¢ üßò T√©cnicas de Respira√ß√£o\n"
                "‚Ä¢ üéØ Controle de Pensamentos\n"
                "‚Ä¢ üìä Monitoramento de Ansiedade\n"
                "‚Ä¢ üåø Relaxamento Progressivo\n"
                "‚Ä¢ ‚è∞ T√©cnicas de Grounding\n"
                "‚Ä¢ üìà Acompanhamento de Progresso\n\n"
                "**Como usar:**\n"
                "1. Use `/ansiedade_analise` para an√°lise\n"
                "2. Use `/ansiedade_dicas` para dicas\n"
                "3. Use `/ansiedade_relatorio` para relat√≥rio\n\n"
                "**Status:** ‚úÖ Sistema funcionando!",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üßò Respira√ß√£o", callback_data="anxiety_breathing"),
                    InlineKeyboardButton("üìä An√°lise", callback_data="anxiety_analysis")
                ], [
                    InlineKeyboardButton("üéØ Controle", callback_data="anxiety_control"),
                    InlineKeyboardButton("üåø Relaxamento", callback_data="anxiety_relaxation")
                ], [
                    InlineKeyboardButton("üîô Voltar", callback_data="menu_coach")
                ]])
            )
            return
        
        if callback_data == "mindfulness_menu":
            logger.info("üßò CALLBACK MINDFULNESS_MENU DETECTADO - PROCESSANDO!")
            await query.edit_message_text(
                "üßò **Menu de Mindfulness**\n\n"
                "**Funcionalidades dispon√≠veis:**\n"
                "‚Ä¢ üßò Medita√ß√£o Guiada\n"
                "‚Ä¢ üå∏ Exerc√≠cios de Aten√ß√£o\n"
                "‚Ä¢ üéØ T√©cnicas de Foco\n"
                "‚Ä¢ üåø Relaxamento Profundo\n"
                "‚Ä¢ ‚è∞ Sess√µes Programadas\n"
                "‚Ä¢ üìà Acompanhamento de Progresso\n\n"
                "**Como usar:**\n"
                "1. Use `/mindfulness_iniciar` para come√ßar\n"
                "2. Use `/mindfulness_sessao` para sess√£o guiada\n"
                "3. Use `/mindfulness_relatorio` para relat√≥rio\n\n"
                "**Status:** ‚úÖ Sistema funcionando!",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üßò Medita√ß√£o", callback_data="mindfulness_meditation"),
                    InlineKeyboardButton("üå∏ Aten√ß√£o", callback_data="mindfulness_attention")
                ], [
                    InlineKeyboardButton("üéØ Foco", callback_data="mindfulness_focus"),
                    InlineKeyboardButton("üåø Relaxamento", callback_data="mindfulness_relaxation")
                ], [
                    InlineKeyboardButton("üîô Voltar", callback_data="menu_coach")
                ]])
            )
            return
        
        if callback_data == "terapia_menu":
            logger.info("ü©∫ CALLBACK TERAPIA_MENU DETECTADO - PROCESSANDO!")
            await query.edit_message_text(
                "ü©∫ **Menu de Terapia**\n\n"
                "**Funcionalidades dispon√≠veis:**\n"
                "‚Ä¢ üó£Ô∏è Sess√µes de Conversa\n"
                "‚Ä¢ üìä Avalia√ß√£o Psicol√≥gica\n"
                "‚Ä¢ üéØ T√©cnicas Terap√™uticas\n"
                "‚Ä¢ üìù Di√°rio Emocional\n"
                "‚Ä¢ ü§ù Suporte Profissional\n"
                "‚Ä¢ üìà Acompanhamento de Progresso\n\n"
                "**Como usar:**\n"
                "1. Use `/terapia_iniciar` para come√ßar\n"
                "2. Use `/terapia_sessao` para sess√£o\n"
                "3. Use `/terapia_relatorio` para relat√≥rio\n\n"
                "**Status:** ‚úÖ Sistema funcionando!",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üó£Ô∏è Conversa", callback_data="therapy_conversation"),
                    InlineKeyboardButton("üìä Avalia√ß√£o", callback_data="therapy_assessment")
                ], [
                    InlineKeyboardButton("üéØ T√©cnicas", callback_data="therapy_techniques"),
                    InlineKeyboardButton("üìù Di√°rio", callback_data="therapy_journal")
                ], [
                    InlineKeyboardButton("üîô Voltar", callback_data="menu_coach")
                ]])
            )
            return
        
        # === CALLBACKS DE AJUDA E SUPORTE COM PRIORIDADE ===
        if callback_data == "contato_suporte":
            logger.info("üìû CALLBACK CONTATO_SUPORTE DETECTADO - PROCESSANDO!")
            await query.edit_message_text(
                "üìû **Contato e Suporte**\n\n"
                "**Canais de Suporte:**\n"
                "‚Ä¢ üí¨ Chat Direto com IA\n"
                "‚Ä¢ üìß Email de Suporte\n"
                "‚Ä¢ üÜò Suporte Urgente\n"
                "‚Ä¢ üìã Relat√≥rio de Bug\n"
                "‚Ä¢ üí° Sugest√£o de Melhoria\n"
                "‚Ä¢ ü§ù Parcerias\n\n"
                "**Como entrar em contato:**\n"
                "1. Use `/suporte` para chat direto\n"
                "2. Use `/bug <descri√ß√£o>` para reportar bugs\n"
                "3. Use `/sugestao <ideia>` para sugest√µes\n\n"
                "**Hor√°rio de Atendimento:**\n"
                "‚Ä¢ 24/7 - Suporte por IA\n"
                "‚Ä¢ Seg-Sex 9h-18h - Suporte Humano\n\n"
                "**Status:** ‚úÖ Sistema funcionando!",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üí¨ Chat Direto", callback_data="direct_chat"),
                    InlineKeyboardButton("üìß Email", callback_data="email_support")
                ], [
                    InlineKeyboardButton("üÜò Urgente", callback_data="urgent_support"),
                    InlineKeyboardButton("üìã Bug", callback_data="report_bug")
                ], [
                    InlineKeyboardButton("üí° Sugest√£o", callback_data="suggest_improvement"),
                    InlineKeyboardButton("ü§ù Parcerias", callback_data="partnerships")
                ], [
                    InlineKeyboardButton("üîô Voltar", callback_data="menu_ajuda")
                ]])
            )
            return
               
        if callback_data == "ver_exemplos":
            logger.info("üìö CALLBACK VER_EXEMPLOS DETECTADO - PROCESSANDO!")
            await query.edit_message_text(
                "üìö **Exemplos de Uso**\n\n"
                "**Categorias de Exemplos:**\n"
                "‚Ä¢ üé® Gera√ß√£o de Imagens\n"
                "‚Ä¢ üîÑ Face Swapping\n"
                "‚Ä¢ üé≠ Clonagem de Voz\n"
                "‚Ä¢ üîç An√°lise de Dados\n"
                "‚Ä¢ üõ°Ô∏è Seguran√ßa\n"
                "‚Ä¢ ü§ñ IA Generativa\n\n"
                "**Exemplos por Categoria:**\n"
                "‚Ä¢ **Imagens:** `/gerarimagem um gato astronauta`\n"
                "‚Ä¢ **Face Swap:** `/trocar_rosto`\n"
                "‚Ä¢ **Voz:** `/clonar_voz [√°udio] [texto]`\n"
                "‚Ä¢ **An√°lise:** `/analisar_rosto`\n"
                "‚Ä¢ **Seguran√ßa:** `/gerar_senha_forte 16`\n\n"
                "**Status:** ‚úÖ Sistema funcionando!",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üé® Imagens", callback_data="examples_images"),
                    InlineKeyboardButton("üîÑ Face Swap", callback_data="examples_faceswap")
                ], [
                    InlineKeyboardButton("üé≠ Voz", callback_data="examples_voice"),
                    InlineKeyboardButton("üîç An√°lise", callback_data="examples_analysis")
                ], [
                    InlineKeyboardButton("üõ°Ô∏è Seguran√ßa", callback_data="examples_security"),
                    InlineKeyboardButton("ü§ñ IA", callback_data="examples_ai")
                ], [
                    InlineKeyboardButton("üîô Voltar", callback_data="menu_ajuda")
                ]])
            )
            return
               
        if callback_data == "ver_tutorial":
            logger.info("üéì CALLBACK VER_TUTORIAL DETECTADO - PROCESSANDO!")
            await query.edit_message_text(
                "üéì **Tutoriais e Guias**\n\n"
                "**Tutoriais Dispon√≠veis:**\n"
                "‚Ä¢ üöÄ Primeiros Passos\n"
                "‚Ä¢ üé® Guia de Imagens\n"
                "‚Ä¢ üîÑ Face Swapping\n"
                "‚Ä¢ üé≠ Clonagem de Voz\n"
                "‚Ä¢ üîç An√°lise Avan√ßada\n"
                "‚Ä¢ üõ°Ô∏è Seguran√ßa\n\n"
                "**Como usar:**\n"
                "1. Escolha um tutorial\n"
                "2. Siga as instru√ß√µes passo a passo\n"
                "3. Pratique com exemplos\n\n"
                "**Tutoriais Interativos:**\n"
                "‚Ä¢ Guia passo a passo\n"
                "‚Ä¢ Exemplos pr√°ticos\n"
                "‚Ä¢ Dicas e truques\n"
                "‚Ä¢ Solu√ß√£o de problemas\n\n"
                "**Status:** ‚úÖ Sistema funcionando!",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üöÄ Primeiros Passos", callback_data="tutorial_basics"),
                    InlineKeyboardButton("üé® Imagens", callback_data="tutorial_images")
                ], [
                    InlineKeyboardButton("üîÑ Face Swap", callback_data="tutorial_faceswap"),
                    InlineKeyboardButton("üé≠ Voz", callback_data="tutorial_voice")
                ], [
                    InlineKeyboardButton("üîç An√°lise", callback_data="tutorial_analysis"),
                    InlineKeyboardButton("üõ°Ô∏è Seguran√ßa", callback_data="tutorial_security")
                ], [
                    InlineKeyboardButton("üîô Voltar", callback_data="menu_ajuda")
                ]])
            )
            return
               
        if callback_data == "solucao_problemas":
            logger.info("üîß CALLBACK SOLUCAO_PROBLEMAS DETECTADO - PROCESSANDO!")
            await query.edit_message_text(
                "üîß **Solu√ß√£o de Problemas**\n\n"
                "**Problemas Comuns:**\n"
                "‚Ä¢ ‚ùå Comando n√£o reconhecido\n"
                "‚Ä¢ üñºÔ∏è Erro ao processar imagem\n"
                "‚Ä¢ üé≠ Problema com clonagem de voz\n"
                "‚Ä¢ üîÑ Face swap n√£o funciona\n"
                "‚Ä¢ üêõ Bot n√£o responde\n"
                "‚Ä¢ ‚ö†Ô∏è Erro de conex√£o\n\n"
                "**Solu√ß√µes R√°pidas:**\n"
                "‚Ä¢ Reinicie o bot com `/start`\n"
                "‚Ä¢ Verifique se a imagem tem rosto\n"
                "‚Ä¢ Use comandos corretos\n"
                "‚Ä¢ Verifique conex√£o com internet\n\n"
                "**Status:** ‚úÖ Sistema funcionando!",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚ùå Comandos", callback_data="fix_commands"),
                    InlineKeyboardButton("üñºÔ∏è Imagens", callback_data="fix_images")
                ], [
                    InlineKeyboardButton("üé≠ Voz", callback_data="fix_voice"),
                    InlineKeyboardButton("üîÑ Face Swap", callback_data="fix_faceswap")
                ], [
                    InlineKeyboardButton("üêõ Bot", callback_data="fix_bot"),
                    InlineKeyboardButton("‚ö†Ô∏è Conex√£o", callback_data="fix_connection")
                ], [
                    InlineKeyboardButton("üîô Voltar", callback_data="menu_ajuda")
                ]])
            )
            return
               
        if callback_data == "ver_faq":
            logger.info("‚ùì CALLBACK VER_FAQ DETECTADO - PROCESSANDO!")
            await query.edit_message_text(
                "‚ùì **Perguntas Frequentes (FAQ)**\n\n"
                "**Perguntas Mais Comuns:**\n"
                "‚Ä¢ ü§ñ Como usar o bot?\n"
                "‚Ä¢ üé® Como gerar imagens?\n"
                "‚Ä¢ üîÑ Como fazer face swap?\n"
                "‚Ä¢ üé≠ Como clonar voz?\n"
                "‚Ä¢ üõ°Ô∏è √â seguro usar?\n"
                "‚Ä¢ üí∞ √â gratuito?\n\n"
                "**Respostas R√°pidas:**\n"
                "‚Ä¢ Use `/start` para come√ßar\n"
                "‚Ä¢ Use `/gerarimagem [descri√ß√£o]`\n"
                "‚Ä¢ Use `/trocar_rosto`\n"
                "‚Ä¢ Use `/clonar_voz [√°udio] [texto]`\n"
                "‚Ä¢ Sim, totalmente seguro\n"
                "‚Ä¢ Sim, completamente gratuito\n\n"
                "**Status:** ‚úÖ Sistema funcionando!",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("ü§ñ Como Usar", callback_data="faq_usage"),
                    InlineKeyboardButton("üé® Imagens", callback_data="faq_images")
                ], [
                    InlineKeyboardButton("üîÑ Face Swap", callback_data="faq_faceswap"),
                    InlineKeyboardButton("üé≠ Voz", callback_data="faq_voice")
                ], [
                    InlineKeyboardButton("üõ°Ô∏è Seguran√ßa", callback_data="faq_security"),
                    InlineKeyboardButton("üí∞ Pre√ßos", callback_data="faq_pricing")
                ], [
                    InlineKeyboardButton("üîô Voltar", callback_data="menu_ajuda")
                ]])
            )
            return
               
        if callback_data == "ver_comandos":
            logger.info("üìã CALLBACK VER_COMANDOS DETECTADO - PROCESSANDO!")
            await query.edit_message_text(
                "üìã **Lista de Comandos**\n\n"
                "**Comandos Principais:**\n"
                "‚Ä¢ `/start` - Iniciar bot\n"
                "‚Ä¢ `/help` - Ajuda geral\n"
                "‚Ä¢ `/menu` - Menu principal\n\n"
                "**Comandos de Imagem:**\n"
                "‚Ä¢ `/gerarimagem [descri√ß√£o]`\n"
                "‚Ä¢ `/trocar_rosto` - Face swap\n"
                "‚Ä¢ `/analisar_rosto` - An√°lise\n"
                "‚Ä¢ `/redimensionar [tamanho]`\n\n"
                "**Comandos de Voz:**\n"
                "‚Ä¢ `/clonar_voz [√°udio] [texto]`\n"
                "‚Ä¢ `/analisar_voz` - An√°lise\n\n"
                "**Comandos de Seguran√ßa:**\n"
                "‚Ä¢ `/gerar_senha_forte [crit√©rios]`\n"
                "‚Ä¢ `/verificar_vazamento [email]`\n\n"
                "**Status:** ‚úÖ Sistema funcionando!",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üé® Imagens", callback_data="commands_images"),
                    InlineKeyboardButton("üé≠ Voz", callback_data="commands_voice")
                ], [
                    InlineKeyboardButton("üõ°Ô∏è Seguran√ßa", callback_data="commands_security"),
                    InlineKeyboardButton("üîç An√°lise", callback_data="commands_analysis")
                ], [
                    InlineKeyboardButton("ü§ñ IA", callback_data="commands_ai"),
                    InlineKeyboardButton("üîç Busca", callback_data="commands_search")
                ], [
                    InlineKeyboardButton("üîô Voltar", callback_data="menu_ajuda")
                ]])
            )
            return
               
        # === CALLBACKS DE CONVERS√ÉO DE FORMATO COM PRIORIDADE ===
        if callback_data == "convert_jpg":
            logger.info("üì∑ CALLBACK CONVERT_JPG DETECTADO - PROCESSANDO!")
            await query.edit_message_text(
                "üì∑ **Converter para JPG**\n\n"
                "**Como usar:**\n"
                "1. Envie uma imagem\n"
                "2. Use `/converter_formato jpg`\n"
                "3. Receba imagem convertida\n\n"
                "**Caracter√≠sticas do JPG:**\n"
                "‚Ä¢ Formato compacto\n"
                "‚Ä¢ Ideal para fotos\n"
                "‚Ä¢ Sem transpar√™ncia\n"
                "‚Ä¢ Tamanho reduzido\n\n"
                "**Status:** ‚úÖ Sistema funcionando!",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô Voltar", callback_data="converter_formato")
                ]])
            )
            return
        
        if callback_data == "convert_png":
            logger.info("üñºÔ∏è CALLBACK CONVERT_PNG DETECTADO - PROCESSANDO!")
            await query.edit_message_text(
                "üñºÔ∏è **Converter para PNG**\n\n"
                "**Como usar:**\n"
                "1. Envie uma imagem\n"
                "2. Use `/converter_formato png`\n"
                "3. Receba imagem convertida\n\n"
                "**Caracter√≠sticas do PNG:**\n"
                "‚Ä¢ Suporte a transpar√™ncia\n"
                "‚Ä¢ Qualidade sem perda\n"
                "‚Ä¢ Ideal para gr√°ficos\n"
                "‚Ä¢ Tamanho maior\n\n"
                "**Status:** ‚úÖ Sistema funcionando!",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô Voltar", callback_data="converter_formato")
                ]])
            )
            return
        
        # === CALLBACKS DE FILTROS COM PRIORIDADE ===
        if callback_data == "filter_artistic":
            logger.info("üé® CALLBACK FILTER_ARTISTIC DETECTADO - PROCESSANDO!")
            await query.edit_message_text(
                "üé® **Filtros Art√≠sticos**\n\n"
                "**Como usar:**\n"
                "1. Envie uma imagem\n"
                "2. Use `/aplicar_filtro artistico`\n"
                "3. Receba imagem com filtro\n\n"
                "**Filtros dispon√≠veis:**\n"
                "‚Ä¢ Pintura a √≥leo\n"
                "‚Ä¢ Aquarela\n"
                "‚Ä¢ Carv√£o\n"
                "‚Ä¢ L√°pis\n"
                "‚Ä¢ Pastel\n\n"
                "**Status:** ‚úÖ Sistema funcionando!",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô Voltar", callback_data="aplicar_filtro")
                ]])
            )
            return
        
        if callback_data == "filter_photographic":
            logger.info("üì∏ CALLBACK FILTER_PHOTOGRAPHIC DETECTADO - PROCESSANDO!")
            await query.edit_message_text(
                "üì∏ **Filtros Fotogr√°ficos**\n\n"
                "**Como usar:**\n"
                "1. Envie uma imagem\n"
                "2. Use `/aplicar_filtro fotografico`\n"
                "3. Receba imagem com filtro\n\n"
                "**Filtros dispon√≠veis:**\n"
                "‚Ä¢ Vintage\n"
                "‚Ä¢ Sepia\n"
                "‚Ä¢ Preto e branco\n"
                "‚Ä¢ HDR\n"
                "‚Ä¢ Retrato\n\n"
                "**Status:** ‚úÖ Sistema funcionando!",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô Voltar", callback_data="aplicar_filtro")
                ]])
            )
            return
        
        if callback_data == "filter_special":
            logger.info("üé≠ CALLBACK FILTER_SPECIAL DETECTADO - PROCESSANDO!")
            await query.edit_message_text(
                "üé≠ **Filtros Especiais**\n\n"
                "**Como usar:**\n"
                "1. Envie uma imagem\n"
                "2. Use `/aplicar_filtro especial`\n"
                "3. Receba imagem com filtro\n\n"
                "**Filtros dispon√≠veis:**\n"
                "‚Ä¢ Neon\n"
                "‚Ä¢ Glitch\n"
                "‚Ä¢ Pixel Art\n"
                "‚Ä¢ Cartoon\n"
                "‚Ä¢ Anime\n\n"
                "**Status:** ‚úÖ Sistema funcionando!",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô Voltar", callback_data="aplicar_filtro")
                ]])
            )
            return
        
        if callback_data == "filter_colors":
            logger.info("üåà CALLBACK FILTER_COLORS DETECTADO - PROCESSANDO!")
            await query.edit_message_text(
                "üåà **Filtros de Cor**\n\n"
                "**Como usar:**\n"
                "1. Envie uma imagem\n"
                "2. Use `/aplicar_filtro cores`\n"
                "3. Receba imagem com filtro\n\n"
                "**Filtros dispon√≠veis:**\n"
                "‚Ä¢ Saturado\n"
                "‚Ä¢ Dessaturado\n"
                "‚Ä¢ Invertido\n"
                "‚Ä¢ Sepia\n"
                "‚Ä¢ Azul\n\n"
                "**Status:** ‚úÖ Sistema funcionando!",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô Voltar", callback_data="aplicar_filtro")
                ]])
            )
            return
        
        # === CALLBACKS DE UPSCALE COM PRIORIDADE ===
        if callback_data == "upscale_2x":
            logger.info("‚¨ÜÔ∏è CALLBACK UPSCALE_2X DETECTADO - PROCESSANDO!")
            await query.edit_message_text(
                "‚¨ÜÔ∏è **Upscale 2x**\n\n"
                "**Como usar:**\n"
                "1. Envie uma imagem\n"
                "2. Use `/upscale 2`\n"
                "3. Receba imagem 2x maior\n\n"
                "**Caracter√≠sticas:**\n"
                "‚Ä¢ Dobra o tamanho\n"
                "‚Ä¢ Processamento r√°pido\n"
                "‚Ä¢ Qualidade boa\n"
                "‚Ä¢ Ideal para fotos\n\n"
                "**Status:** ‚úÖ Sistema funcionando!",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô Voltar", callback_data="upscale")
                ]])
            )
            return
        
        if callback_data == "upscale_4x":
            logger.info("‚¨ÜÔ∏è CALLBACK UPSCALE_4X DETECTADO - PROCESSANDO!")
            await query.edit_message_text(
                "‚¨ÜÔ∏è **Upscale 4x**\n\n"
                "**Como usar:**\n"
                "1. Envie uma imagem\n"
                "2. Use `/upscale 4`\n"
                "3. Receba imagem 4x maior\n\n"
                "**Caracter√≠sticas:**\n"
                "‚Ä¢ Quadruplica o tamanho\n"
                "‚Ä¢ Processamento m√©dio\n"
                "‚Ä¢ Qualidade alta\n"
                "‚Ä¢ Ideal para impress√£o\n\n"
                "**Status:** ‚úÖ Sistema funcionando!",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô Voltar", callback_data="upscale")
                ]])
            )
            return
        
        if callback_data == "upscale_auto":
            logger.info("‚¨ÜÔ∏è CALLBACK UPSCALE_AUTO DETECTADO - PROCESSANDO!")
            await query.edit_message_text(
                "‚¨ÜÔ∏è **Upscale Autom√°tico**\n\n"
                "**Como usar:**\n"
                "1. Envie uma imagem\n"
                "2. Use `/upscale auto`\n"
                "3. Receba imagem otimizada\n\n"
                "**Caracter√≠sticas:**\n"
                "‚Ä¢ Detec√ß√£o autom√°tica\n"
                "‚Ä¢ Fator ideal\n"
                "‚Ä¢ Qualidade otimizada\n"
                "‚Ä¢ Processamento inteligente\n\n"
                "**Status:** ‚úÖ Sistema funcionando!",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô Voltar", callback_data="upscale")
                ]])
            )
            return
        
        if callback_data == "upscale_pro":
            logger.info("‚¨ÜÔ∏è CALLBACK UPSCALE_PRO DETECTADO - PROCESSANDO!")
            await query.edit_message_text(
                "‚¨ÜÔ∏è **Upscale Profissional**\n\n"
                "**Como usar:**\n"
                "1. Envie uma imagem\n"
                "2. Use `/upscale pro`\n"
                "3. Receba imagem profissional\n\n"
                "**Caracter√≠sticas:**\n"
                "‚Ä¢ Qualidade m√°xima\n"
                "‚Ä¢ Processamento lento\n"
                "‚Ä¢ Detalhes preservados\n"
                "‚Ä¢ Ideal para profissionais\n\n"
                "**Status:** ‚úÖ Sistema funcionando!",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô Voltar", callback_data="upscale")
                ]])
            )
            return
        
        # === CALLBACKS DE REDIMENSIONAMENTO COM PRIORIDADE ===
        if callback_data == "resize_pixels":
            logger.info("üìè CALLBACK RESIZE_PIXELS DETECTADO - PROCESSANDO!")
            await query.edit_message_text(
                "üìè **Redimensionar por Pixels**\n\n"
                "**Como usar:**\n"
                "1. Envie uma imagem\n"
                "2. Use `/redimensionar <largura>x<altura>`\n"
                "3. Receba imagem redimensionada\n\n"
                "**Exemplos:**\n"
                "‚Ä¢ `/redimensionar 800x600`\n"
                "‚Ä¢ `/redimensionar 1920x1080`\n"
                "‚Ä¢ `/redimensionar 500x500`\n"
                "‚Ä¢ `/redimensionar 1200x800`\n\n"
                "**Caracter√≠sticas:**\n"
                "‚Ä¢ Controle exato do tamanho\n"
                "‚Ä¢ Pode distorcer propor√ß√µes\n"
                "‚Ä¢ Ideal para tamanhos espec√≠ficos\n"
                "‚Ä¢ Processamento r√°pido\n\n"
                "**Status:** ‚úÖ Sistema funcionando!",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô Voltar", callback_data="redimensionar")
                ]])
            )
            return
        
        if callback_data == "resize_percentage":
            logger.info("üìä CALLBACK RESIZE_PERCENTAGE DETECTADO - PROCESSANDO!")
            await query.edit_message_text(
                "üìä **Redimensionar por Porcentagem**\n\n"
                "**Como usar:**\n"
                "1. Envie uma imagem\n"
                "2. Use `/redimensionar <porcentagem>%`\n"
                "3. Receba imagem redimensionada\n\n"
                "**Exemplos:**\n"
                "‚Ä¢ `/redimensionar 50%` - Metade do tamanho\n"
                "‚Ä¢ `/redimensionar 150%` - Uma vez e meia\n"
                "‚Ä¢ `/redimensionar 200%` - Dobro do tamanho\n"
                "‚Ä¢ `/redimensionar 75%` - Tr√™s quartos\n\n"
                "**Caracter√≠sticas:**\n"
                "‚Ä¢ Mant√©m propor√ß√µes\n"
                "‚Ä¢ F√°cil de usar\n"
                "‚Ä¢ Ideal para ajustes r√°pidos\n"
                "‚Ä¢ Processamento r√°pido\n\n"
                "**Status:** ‚úÖ Sistema funcionando!",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô Voltar", callback_data="redimensionar")
                ]])
            )
            return
        
        if callback_data == "resize_proportional":
            logger.info("üéØ CALLBACK RESIZE_PROPORTIONAL DETECTADO - PROCESSANDO!")
            await query.edit_message_text(
                "üéØ **Redimensionar Mantendo Propor√ß√£o**\n\n"
                "**Como usar:**\n"
                "1. Envie uma imagem\n"
                "2. Use `/redimensionar proporcional <largura>`\n"
                "3. Receba imagem redimensionada\n\n"
                "**Exemplos:**\n"
                "‚Ä¢ `/redimensionar proporcional 800`\n"
                "‚Ä¢ `/redimensionar proporcional 1200`\n"
                "‚Ä¢ `/redimensionar proporcional 600`\n"
                "‚Ä¢ `/redimensionar proporcional 1000`\n\n"
                "**Caracter√≠sticas:**\n"
                "‚Ä¢ Mant√©m propor√ß√µes originais\n"
                "‚Ä¢ Evita distor√ß√£o\n"
                "‚Ä¢ Ideal para fotos\n"
                "‚Ä¢ Processamento m√©dio\n\n"
                "**Status:** ‚úÖ Sistema funcionando!",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô Voltar", callback_data="redimensionar")
                ]])
            )
            return
        
        if callback_data == "resize_formats":
            logger.info("üì± CALLBACK RESIZE_FORMATS DETECTADO - PROCESSANDO!")
            await query.edit_message_text(
                "üì± **Formatos para Dispositivos**\n\n"
                "**Como usar:**\n"
                "1. Envie uma imagem\n"
                "2. Use `/redimensionar formato <tipo>`\n"
                "3. Receba imagem redimensionada\n\n"
                "**Formatos dispon√≠veis:**\n"
                "‚Ä¢ **Instagram:** 1080x1080 (quadrado)\n"
                "‚Ä¢ **Facebook:** 1200x630 (capa)\n"
                "‚Ä¢ **Twitter:** 1200x675 (post)\n"
                "‚Ä¢ **YouTube:** 1280x720 (thumbnail)\n"
                "‚Ä¢ **WhatsApp:** 800x800 (perfil)\n"
                "‚Ä¢ **LinkedIn:** 1200x627 (post)\n\n"
                "**Caracter√≠sticas:**\n"
                "‚Ä¢ Tamanhos otimizados\n"
                "‚Ä¢ Mant√©m qualidade\n"
                "‚Ä¢ Ideal para redes sociais\n"
                "‚Ä¢ Processamento r√°pido\n\n"
                "**Status:** ‚úÖ Sistema funcionando!",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô Voltar", callback_data="redimensionar")
                ]])
            )
            return
        
        # === CALLBACK GENERATE_BY_TEXT COM PRIORIDADE ===
        if callback_data == "generate_by_text":
            logger.info("üñºÔ∏è CALLBACK GENERATE_BY_TEXT DETECTADO - PROCESSANDO!")
            await query.edit_message_text(
                "üñºÔ∏è **Gerar Imagem por Texto**\n\n"
                "**Como usar:**\n"
                "1. Use `/gerarimagem <descri√ß√£o>`\n"
                "2. Descreva a imagem que deseja\n"
                "3. Aguarde a gera√ß√£o\n\n"
                "**Exemplos de comandos:**\n"
                "‚Ä¢ `/gerarimagem um gato astronauta`\n"
                "‚Ä¢ `/gerarimagem uma paisagem de montanha`\n"
                "‚Ä¢ `/gerarimagem uma cidade futurista`\n"
                "‚Ä¢ `/gerarimagem um drag√£o voando`\n\n"
                "**Dicas para melhores resultados:**\n"
                "‚Ä¢ Seja espec√≠fico na descri√ß√£o\n"
                "‚Ä¢ Use adjetivos descritivos\n"
                "‚Ä¢ Mencione estilo art√≠stico se desejar\n"
                "‚Ä¢ Evite descri√ß√µes muito longas\n\n"
                "**Status:** ‚úÖ Sistema funcionando!",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üé® Estilos", callback_data="artistic_styles_menu"),
                    InlineKeyboardButton("üåÖ Cen√°rios", callback_data="scenario_templates_menu")
                ], [
                    InlineKeyboardButton("üìê Configura√ß√µes", callback_data="image_settings_menu"),
                    InlineKeyboardButton("üîç An√°lise", callback_data="face_analysis_menu")
                ], [
                    InlineKeyboardButton("üîô Voltar", callback_data="gerar_imagem")
                ]])
            )
            return
        
        # === CALLBACKS DE REMO√á√ÉO DE FUNDO COM PRIORIDADE ===
        if callback_data == "remove_bg_auto":
            logger.info("ü§ñ CALLBACK REMOVE_BG_AUTO DETECTADO - PROCESSANDO!")
            await query.edit_message_text(
                "ü§ñ **Remo√ß√£o Autom√°tica de Fundo**\n\n"
                "**Como usar:**\n"
                "1. Envie uma imagem\n"
                "2. Use `/removerfundo auto`\n"
                "3. Receba imagem sem fundo\n\n"
                "**Caracter√≠sticas:**\n"
                "‚Ä¢ Detec√ß√£o autom√°tica de objetos\n"
                "‚Ä¢ IA identifica o fundo\n"
                "‚Ä¢ Processamento r√°pido\n"
                "‚Ä¢ Ideal para fotos simples\n\n"
                "**Exemplos:**\n"
                "‚Ä¢ `/removerfundo auto` - Remove fundo automaticamente\n"
                "‚Ä¢ `/removerfundo auto melhorar` - Com refinamento\n"
                "‚Ä¢ `/removerfundo auto bordas` - Suaviza bordas\n\n"
                "**Status:** ‚úÖ Sistema funcionando!",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô Voltar", callback_data="remover_fundo")
                ]])
            )
            return
        
        if callback_data == "remove_bg_manual":
            logger.info("‚úã CALLBACK REMOVE_BG_MANUAL DETECTADO - PROCESSANDO!")
            await query.edit_message_text(
                "‚úã **Remo√ß√£o Manual de Fundo**\n\n"
                "**Como usar:**\n"
                "1. Envie uma imagem\n"
                "2. Use `/removerfundo manual`\n"
                "3. Selecione √°rea para manter\n"
                "4. Receba resultado\n\n"
                "**Caracter√≠sticas:**\n"
                "‚Ä¢ Controle total sobre sele√ß√£o\n"
                "‚Ä¢ Ideal para imagens complexas\n"
                "‚Ä¢ Precis√£o m√°xima\n"
                "‚Ä¢ Processamento detalhado\n\n"
                "**Exemplos:**\n"
                "‚Ä¢ `/removerfundo manual` - Sele√ß√£o manual\n"
                "‚Ä¢ `/removerfundo manual fino` - Modo fino\n"
                "‚Ä¢ `/removerfundo manual grosso` - Modo grosso\n\n"
                "**Status:** ‚úÖ Sistema funcionando!",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô Voltar", callback_data="remover_fundo")
                ]])
            )
            return
        
        if callback_data == "remove_bg_custom":
            logger.info("üé® CALLBACK REMOVE_BG_CUSTOM DETECTADO - PROCESSANDO!")
            await query.edit_message_text(
                "üé® **Remo√ß√£o Personalizada**\n\n"
                "**Como usar:**\n"
                "1. Envie uma imagem\n"
                "2. Use `/removerfundo custom`\n"
                "3. Configure par√¢metros\n"
                "4. Receba resultado personalizado\n\n"
                "**Op√ß√µes dispon√≠veis:**\n"
                "‚Ä¢ **Toler√¢ncia:** Ajusta sensibilidade\n"
                "‚Ä¢ **Suaviza√ß√£o:** Controla bordas\n"
                "‚Ä¢ **Corre√ß√£o:** Melhora detalhes\n"
                "‚Ä¢ **Filtros:** Aplica efeitos\n\n"
                "**Exemplos:**\n"
                "‚Ä¢ `/removerfundo custom tolerancia=0.5`\n"
                "‚Ä¢ `/removerfundo custom suavizar=2`\n"
                "‚Ä¢ `/removerfundo custom corrigir`\n\n"
                "**Status:** ‚úÖ Sistema funcionando!",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô Voltar", callback_data="remover_fundo")
                ]])
            )
            return
        
        if callback_data == "remove_bg_refine":
            logger.info("‚ú® CALLBACK REMOVE_BG_REFINE DETECTADO - PROCESSANDO!")
            await query.edit_message_text(
                "‚ú® **Refinamento de Remo√ß√£o**\n\n"
                "**Como usar:**\n"
                "1. Envie uma imagem\n"
                "2. Use `/removerfundo refine`\n"
                "3. Aguarde processamento avan√ßado\n"
                "4. Receba resultado refinado\n\n"
                "**Caracter√≠sticas:**\n"
                "‚Ä¢ Processamento avan√ßado\n"
                "‚Ä¢ Bordas suavizadas\n"
                "‚Ä¢ Detalhes preservados\n"
                "‚Ä¢ Qualidade profissional\n\n"
                "**Exemplos:**\n"
                "‚Ä¢ `/removerfundo refine` - Refinamento b√°sico\n"
                "‚Ä¢ `/removerfundo refine bordas` - Foco em bordas\n"
                "‚Ä¢ `/removerfundo refine detalhes` - Preserva detalhes\n"
                "‚Ä¢ `/removerfundo refine profissional` - M√°xima qualidade\n\n"
                "**Status:** ‚úÖ Sistema funcionando!",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô Voltar", callback_data="remover_fundo")
                ]])
            )
            return
               
        # === CALLBACKS DE PROCESSAMENTO DE IMAGEM COM PRIORIDADE ===
        if callback_data == "gerar_imagem":
            logger.info("üé® CALLBACK GERAR_IMAGEM DETECTADO - PROCESSANDO!")
            await query.edit_message_text(
                "üé® **Gerador de Imagens**\n\n"
                "**Funcionalidades dispon√≠veis:**\n"
                "‚Ä¢ üñºÔ∏è Gera√ß√£o por Texto\n"
                "‚Ä¢ üé≠ Estilos Art√≠sticos\n"
                "‚Ä¢ üåÖ Cen√°rios Personalizados\n"
                "‚Ä¢ üé® Filtros e Efeitos\n"
                "‚Ä¢ üìê Diferentes Resolu√ß√µes\n"
                "‚Ä¢ üîÑ Varia√ß√µes de Imagem\n\n"
                "**Como usar:**\n"
                "1. Use `/gerarimagem <descri√ß√£o>` para gerar\n"
                "2. Use `/gerar_cenario <cen√°rio>` para cen√°rios\n"
                "3. Use `/estilo_rosto <estilo>` para estilos\n\n"
                "**Exemplos:**\n"
                "‚Ä¢ `/gerarimagem um gato astronauta`\n"
                "‚Ä¢ `/gerar_cenario praia tropical`\n"
                "‚Ä¢ `/estilo_rosto anime`\n\n"
                "**Status:** ‚úÖ Sistema funcionando!",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üñºÔ∏è Gerar por Texto", callback_data="generate_by_text"),
                    InlineKeyboardButton("üé≠ Estilos", callback_data="artistic_styles_menu")
                ], [
                    InlineKeyboardButton("üåÖ Cen√°rios", callback_data="scenario_templates_menu"),
                    InlineKeyboardButton("üé® Filtros", callback_data="apply_filter")
                ], [
                    InlineKeyboardButton("üîô Voltar", callback_data="menu_imagens")
                ]])
            )
            return
        
        if callback_data == "redimensionar":
            logger.info("üìê CALLBACK REDIMENSIONAR DETECTADO - PROCESSANDO!")
            await query.edit_message_text(
                "üìê **Redimensionar Imagem**\n\n"
                "**Funcionalidades dispon√≠veis:**\n"
                "‚Ä¢ üìè Redimensionar por Pixels\n"
                "‚Ä¢ üìä Redimensionar por Porcentagem\n"
                "‚Ä¢ üéØ Manter Propor√ß√£o\n"
                "‚Ä¢ üîÑ Redimensionar Livre\n"
                "‚Ä¢ üì± Formatos para Dispositivos\n"
                "‚Ä¢ üíæ Otimiza√ß√£o de Tamanho\n\n"
                "**Como usar:**\n"
                "1. Envie uma imagem\n"
                "2. Use `/redimensionar <largura>x<altura>`\n"
                "3. Receba imagem redimensionada\n\n"
                "**Exemplos:**\n"
                "‚Ä¢ `/redimensionar 800x600`\n"
                "‚Ä¢ `/redimensionar 50%`\n"
                "‚Ä¢ `/redimensionar 1920x1080`\n\n"
                "**Status:** ‚úÖ Sistema funcionando!",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üìè Por Pixels", callback_data="resize_pixels"),
                    InlineKeyboardButton("üìä Por Porcentagem", callback_data="resize_percentage")
                ], [
                    InlineKeyboardButton("üéØ Manter Propor√ß√£o", callback_data="resize_proportional"),
                    InlineKeyboardButton("üì± Formatos", callback_data="resize_formats")
                ], [
                    InlineKeyboardButton("üîô Voltar", callback_data="menu_imagens")
                ]])
            )
            return
        
        if callback_data == "upscale":
            logger.info("‚¨ÜÔ∏è CALLBACK UPSCALE DETECTADO - PROCESSANDO!")
            await query.edit_message_text(
                "‚¨ÜÔ∏è **Melhorar Qualidade (Upscale)**\n\n"
                "**Funcionalidades dispon√≠veis:**\n"
                "‚Ä¢ üîç Aumentar Resolu√ß√£o\n"
                "‚Ä¢ üé® Melhorar Detalhes\n"
                "‚Ä¢ üìä Reduzir Ru√≠do\n"
                "‚Ä¢ üéØ Nitidez Avan√ßada\n"
                "‚Ä¢ üîÑ Interpola√ß√£o Inteligente\n"
                "‚Ä¢ üíé Qualidade Profissional\n\n"
                "**Como usar:**\n"
                "1. Envie uma imagem\n"
                "2. Use `/upscale <fator>`\n"
                "3. Receba imagem melhorada\n\n"
                "**Exemplos:**\n"
                "‚Ä¢ `/upscale 2` - Dobrar tamanho\n"
                "‚Ä¢ `/upscale 4` - Quadruplicar tamanho\n"
                "‚Ä¢ `/upscale auto` - Detec√ß√£o autom√°tica\n\n"
                "**Status:** ‚úÖ Sistema funcionando!",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîç 2x", callback_data="upscale_2x"),
                    InlineKeyboardButton("üé® 4x", callback_data="upscale_4x")
                ], [
                    InlineKeyboardButton("üìä Auto", callback_data="upscale_auto"),
                    InlineKeyboardButton("üíé Pro", callback_data="upscale_pro")
                ], [
                    InlineKeyboardButton("üîô Voltar", callback_data="menu_imagens")
                ]])
            )
            return
        
        if callback_data == "remover_fundo":
            logger.info("‚úÇÔ∏è CALLBACK REMOVER_FUNDO DETECTADO - PROCESSANDO!")
            await query.edit_message_text(
                "‚úÇÔ∏è **Remover Fundo**\n\n"
                "**Funcionalidades dispon√≠veis:**\n"
                "‚Ä¢ üéØ Detec√ß√£o Autom√°tica\n"
                "‚Ä¢ ‚úÇÔ∏è Corte Preciso\n"
                "‚Ä¢ üé® Fundo Transparente\n"
                "‚Ä¢ üåà Fundo Personalizado\n"
                "‚Ä¢ üîç Refinamento Manual\n"
                "‚Ä¢ üíæ M√∫ltiplos Formatos\n\n"
                "**Como usar:**\n"
                "1. Envie uma imagem\n"
                "2. Use `/remover_fundo`\n"
                "3. Receba imagem sem fundo\n\n"
                "**Formatos suportados:**\n"
                "‚Ä¢ PNG (transparente)\n"
                "‚Ä¢ JPG (fundo branco)\n"
                "‚Ä¢ WEBP (otimizado)\n\n"
                "**Status:** ‚úÖ Sistema funcionando!",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üéØ Autom√°tico", callback_data="remove_bg_auto"),
                    InlineKeyboardButton("‚úÇÔ∏è Manual", callback_data="remove_bg_manual")
                ], [
                    InlineKeyboardButton("üé® Fundo Personalizado", callback_data="remove_bg_custom"),
                    InlineKeyboardButton("üîç Refinar", callback_data="remove_bg_refine")
                ], [
                    InlineKeyboardButton("üîô Voltar", callback_data="menu_imagens")
                ]])
            )
            return
        
        if callback_data == "aplicar_filtro":
            logger.info("üé® CALLBACK APLICAR_FILTRO DETECTADO - PROCESSANDO!")
            await query.edit_message_text(
                "üé® **Aplicar Filtros**\n\n"
                "**Filtros dispon√≠veis:**\n"
                "‚Ä¢ üåÖ Filtros Art√≠sticos\n"
                "‚Ä¢ üì∏ Filtros Fotogr√°ficos\n"
                "‚Ä¢ üé≠ Efeitos Especiais\n"
                "‚Ä¢ üåà Ajustes de Cor\n"
                "‚Ä¢ üîÜ Brilho e Contraste\n"
                "‚Ä¢ üéØ Nitidez e Blur\n\n"
                "**Como usar:**\n"
                "1. Envie uma imagem\n"
                "2. Use `/aplicar_filtro <filtro>`\n"
                "3. Receba imagem com filtro\n\n"
                "**Exemplos:**\n"
                "‚Ä¢ `/aplicar_filtro vintage`\n"
                "‚Ä¢ `/aplicar_filtro blur`\n"
                "‚Ä¢ `/aplicar_filtro sepia`\n\n"
                "**Status:** ‚úÖ Sistema funcionando!",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üåÖ Art√≠sticos", callback_data="filter_artistic"),
                    InlineKeyboardButton("üì∏ Fotogr√°ficos", callback_data="filter_photographic")
                ], [
                    InlineKeyboardButton("üé≠ Especiais", callback_data="filter_special"),
                    InlineKeyboardButton("üåà Cores", callback_data="filter_colors")
                ], [
                    InlineKeyboardButton("üîô Voltar", callback_data="menu_imagens")
                ]])
            )
            return
        
        if callback_data == "converter_formato":
            logger.info("üîÑ CALLBACK CONVERTER_FORMATO DETECTADO - PROCESSANDO!")
            await query.edit_message_text(
                "üîÑ **Converter Formato**\n\n"
                "**Formatos dispon√≠veis:**\n"
                "‚Ä¢ üì∑ JPG/JPEG\n"
                "‚Ä¢ üñºÔ∏è PNG\n"
                "‚Ä¢ üåê WEBP\n"
                "‚Ä¢ üé® GIF\n"
                "‚Ä¢ üì± BMP\n"
                "‚Ä¢ üéØ TIFF\n\n"
                "**Como usar:**\n"
                "1. Envie uma imagem\n"
                "2. Use `/converter_formato <formato>`\n"
                "3. Receba imagem convertida\n\n"
                "**Exemplos:**\n"
                "‚Ä¢ `/converter_formato png`\n"
                "‚Ä¢ `/converter_formato webp`\n"
                "‚Ä¢ `/converter_formato gif`\n\n"
                "**Status:** ‚úÖ Sistema funcionando!",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üì∑ JPG", callback_data="convert_jpg"),
                    InlineKeyboardButton("üñºÔ∏è PNG", callback_data="convert_png")
                ], [
                    InlineKeyboardButton("üåê WEBP", callback_data="convert_webp"),
                    InlineKeyboardButton("üé® GIF", callback_data="convert_gif")
                ], [
                    InlineKeyboardButton("üîô Voltar", callback_data="menu_imagens")
                ]])
            )
            return
        
        # === CALLBACKS DOS MENUS PRINCIPAIS ===
        if callback_data == "menu_conversa":
            await handle_menu_conversa(query, context)
        elif callback_data == "menu_busca":
            await handle_menu_busca(query, context)
        elif callback_data == "menu_seguranca":
            await handle_menu_seguranca(query, context)
        elif callback_data == "menu_imagens":
            await handle_menu_imagens(query, context)
        elif callback_data == "menu_audio":
            await handle_menu_audio(query, context)
        elif callback_data == "menu_analise":
            await handle_menu_analise(query, context)
        elif callback_data == "menu_ia_generativa":
            await handle_menu_ia_generativa(query, context)
        elif callback_data == "menu_coach":
            await handle_menu_coach(query, context)
        elif callback_data == "menu_ajuda":
            await handle_menu_ajuda(query, context)
        elif callback_data == "menu_config":
            await handle_menu_config(query, context)
        
        # === CALLBACKS DE NAVEGA√á√ÉO ===
        elif callback_data == "voltar_menu":
            await voltar_ao_menu_principal(query, context)
        elif callback_data == "main_menu":
            await voltar_ao_menu_principal(query, context)
        
        # === CALLBACKS DOS SUBMENUS ===
        elif callback_data == "conversar_agora":
            await query.edit_message_text("üí¨ **Modo Conversa Ativado!**\n\nAgora voc√™ pode conversar naturalmente comigo. Digite sua mensagem!")
        elif callback_data == "ia_avancada":
            await query.edit_message_text("üß† **IA Avan√ßada Ativada!**\n\nRecursos avan√ßados de IA dispon√≠veis:\n‚Ä¢ An√°lise de contexto\n‚Ä¢ Processamento multimodal\n‚Ä¢ Mem√≥ria de conversas")
        elif callback_data == "ver_historico":
            await query.edit_message_text("üìù **Hist√≥rico de Conversas**\n\nHist√≥rico dispon√≠vel para an√°lise e resumos.")
        elif callback_data == "limpar_chat":
            database.reset_chat_history(query.message.chat_id)
            await query.edit_message_text("üóëÔ∏è **Chat Limpo!**\n\nHist√≥rico da conversa foi limpo com sucesso.")
        
        # === CALLBACKS DE BUSCA ===
        elif callback_data == "buscar_web":
            await query.edit_message_text("üîç **Busca Web**\n\nUse o comando: `/web [sua pergunta]`\n\nExemplo: `/web campe√£o da Copa 2022?`")
        elif callback_data == "ultimas_noticias":
            logger.info("üì∞ CALLBACK ULTIMAS_NOTICIAS DETECTADO - PROCESSANDO!")
            await query.edit_message_text(
                "üì∞ **√öltimas Not√≠cias**\n\n"
                "**Funcionalidades dispon√≠veis:**\n"
                "‚Ä¢ üåç Not√≠cias Mundiais\n"
                "‚Ä¢ üáßüá∑ Not√≠cias do Brasil\n"
                "‚Ä¢ üíº Not√≠cias de Tecnologia\n"
                "‚Ä¢ üè• Not√≠cias de Sa√∫de\n"
                "‚Ä¢ üèÜ Not√≠cias de Esportes\n"
                "‚Ä¢ üìä Not√≠cias Econ√¥micas\n\n"
                "**Como usar:**\n"
                "1. Use `/web not√≠cias [tema]` para buscar\n"
                "2. Use `/web √∫ltimas not√≠cias [categoria]`\n"
                "3. Use `/web news [tema]` para ingl√™s\n\n"
                "**Exemplos:**\n"
                "‚Ä¢ `/web not√≠cias tecnologia`\n"
                "‚Ä¢ `/web √∫ltimas not√≠cias Brasil`\n"
                "‚Ä¢ `/web news artificial intelligence`\n\n"
                "**Status:** ‚úÖ Sistema funcionando!",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üåç Mundiais", callback_data="news_world"),
                    InlineKeyboardButton("üáßüá∑ Brasil", callback_data="news_brazil")
                ], [
                    InlineKeyboardButton("üíº Tecnologia", callback_data="news_tech"),
                    InlineKeyboardButton("üè• Sa√∫de", callback_data="news_health")
                ], [
                    InlineKeyboardButton("üèÜ Esportes", callback_data="news_sports"),
                    InlineKeyboardButton("üìä Economia", callback_data="news_economy")
                ], [
                    InlineKeyboardButton("üîô Voltar", callback_data="menu_busca")
                ]])
            )
            return
        
        elif callback_data == "resumir_url":
            await query.edit_message_text("üìù **Resumir URL**\n\nUse o comando: `/resumir [link]`\n\nExemplo: `/resumir https://exemplo.com`")
        
        elif callback_data == "pesquisa_avancada":
            logger.info("üî¨ CALLBACK PESQUISA_AVANCADA DETECTADO - PROCESSANDO!")
            await query.edit_message_text(
                "üî¨ **Pesquisa Avan√ßada**\n\n"
                "**Funcionalidades dispon√≠veis:**\n"
                "‚Ä¢ üîç Pesquisa por Palavras-chave\n"
                "‚Ä¢ üìä An√°lise de Tend√™ncias\n"
                "‚Ä¢ üéØ Pesquisa Espec√≠fica\n"
                "‚Ä¢ üìà Compara√ß√£o de Dados\n"
                "‚Ä¢ üî¨ Pesquisa Acad√™mica\n"
                "‚Ä¢ üìã Relat√≥rios Detalhados\n\n"
                "**Como usar:**\n"
                "1. Use `/web [pergunta espec√≠fica]`\n"
                "2. Use `/web pesquisa [tema]`\n"
                "3. Use `/web an√°lise [assunto]`\n\n"
                "**Exemplos:**\n"
                "‚Ä¢ `/web pesquisa intelig√™ncia artificial 2024`\n"
                "‚Ä¢ `/web an√°lise mercado de criptomoedas`\n"
                "‚Ä¢ `/web tend√™ncias tecnologia mobile`\n\n"
                "**Status:** ‚úÖ Sistema funcionando!",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîç Palavras-chave", callback_data="search_keywords"),
                    InlineKeyboardButton("üìä Tend√™ncias", callback_data="search_trends")
                ], [
                    InlineKeyboardButton("üéØ Espec√≠fica", callback_data="search_specific"),
                    InlineKeyboardButton("üìà Compara√ß√£o", callback_data="search_comparison")
                ], [
                    InlineKeyboardButton("üî¨ Acad√™mica", callback_data="search_academic"),
                    InlineKeyboardButton("üìã Relat√≥rios", callback_data="search_reports")
                ], [
                    InlineKeyboardButton("üîô Voltar", callback_data="menu_busca")
                ]])
            )
            return
        
        # === CALLBACKS DE SEGURAN√áA ===
        elif callback_data == "gerar_senha":
            await query.edit_message_text("üîë **Gerar Senha Forte**\n\nUse o comando: `/gerar_senha_forte [crit√©rios]`\n\nExemplo: `/gerar_senha_forte 16 caracteres com s√≠mbolos`")
        elif callback_data == "verificar_vazamento":
            await query.edit_message_text("üõ°Ô∏è **Verificar Vazamentos**\n\nUse o comando: `/verificar_vazamento [email]`\n\nExemplo: `/verificar_vazamento seu@email.com`")
        elif callback_data == "scan_phishing":
            await query.edit_message_text("üö´ **Anti-Phishing**\n\nUse o comando: `/scan_phishing [url]`\n\nExemplo: `/scan_phishing https://site-suspeito.com`")
        elif callback_data == "anonimizar_dados":
            await query.edit_message_text("üé≠ **Anonimizar Dados**\n\nUse o comando: `/anonimizar_dados [texto]`\n\nExemplo: `/anonimizar_dados Jo√£o Silva, CPF: 123.456.789-00`")
        elif callback_data == "criptografia":
            logger.info("üîí CALLBACK CRIPTOGRAFIA DETECTADO - PROCESSANDO!")
            await query.edit_message_text(
                "üîí **Sistema de Criptografia**\n\n"
                "**Funcionalidades dispon√≠veis:**\n"
                "‚Ä¢ üîê Criptografar Texto\n"
                "‚Ä¢ üîì Descriptografar Texto\n"
                "‚Ä¢ üéØ Hash de Senhas\n"
                "‚Ä¢ üîë Gerar Chaves\n"
                "‚Ä¢ üìä Verificar Integridade\n"
                "‚Ä¢ üõ°Ô∏è Assinatura Digital\n\n"
                "**Como usar:**\n"
                "1. Use `/criptografar <texto>` para criptografar\n"
                "2. Use `/descriptografar <texto>` para descriptografar\n"
                "3. Use `/hash_senha <senha>` para gerar hash\n\n"
                "**Exemplos:**\n"
                "‚Ä¢ `/criptografar mensagem secreta`\n"
                "‚Ä¢ `/descriptografar texto_criptografado`\n"
                "‚Ä¢ `/hash_senha minha_senha123`\n\n"
                "**Status:** ‚úÖ Sistema funcionando!",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîê Criptografar", callback_data="encrypt_text"),
                    InlineKeyboardButton("üîì Descriptografar", callback_data="decrypt_text")
                ], [
                    InlineKeyboardButton("üéØ Hash", callback_data="hash_password"),
                    InlineKeyboardButton("üîë Chaves", callback_data="generate_keys")
                ], [
                    InlineKeyboardButton("üîô Voltar", callback_data="menu_seguranca")
                ]])
            )
            return
        
        elif callback_data == "relatorio_seguranca":
            logger.info("üìä CALLBACK RELATORIO_SEGURANCA DETECTADO - PROCESSANDO!")
            await query.edit_message_text(
                "üìä **Relat√≥rio de Seguran√ßa**\n\n"
                "**Informa√ß√µes dispon√≠veis:**\n"
                "‚Ä¢ üõ°Ô∏è Status de Seguran√ßa\n"
                "‚Ä¢ üîç √öltimas Verifica√ß√µes\n"
                "‚Ä¢ üìà Estat√≠sticas de Uso\n"
                "‚Ä¢ ‚ö†Ô∏è Alertas de Seguran√ßa\n"
                "‚Ä¢ üîê Hist√≥rico de Criptografia\n"
                "‚Ä¢ üìã Recomenda√ß√µes\n\n"
                "**Como usar:**\n"
                "1. Use `/relatorio_seguranca` para relat√≥rio completo\n"
                "2. Use `/status_seguranca` para status atual\n"
                "3. Use `/alertas_seguranca` para alertas\n\n"
                "**Relat√≥rio inclui:**\n"
                "‚Ä¢ Senhas verificadas\n"
                "‚Ä¢ URLs analisadas\n"
                "‚Ä¢ Dados anonimizados\n"
                "‚Ä¢ Tentativas de phishing\n\n"
                "**Status:** ‚úÖ Sistema funcionando!",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üõ°Ô∏è Status", callback_data="security_status"),
                    InlineKeyboardButton("üìà Estat√≠sticas", callback_data="security_stats")
                ], [
                    InlineKeyboardButton("‚ö†Ô∏è Alertas", callback_data="security_alerts"),
                    InlineKeyboardButton("üìã Recomenda√ß√µes", callback_data="security_recommendations")
                ], [
                    InlineKeyboardButton("üîô Voltar", callback_data="menu_seguranca")
                ]])
            )
            return
        
        # === CALLBACKS DE IMAGENS ===
        elif callback_data == "generate_image":
            await query.edit_message_text("üé® **Gerar Imagem**\n\nUse o comando: `/gerarimagem [descri√ß√£o]`\n\nExemplo: `/gerarimagem um le√£o de √≥culos`")
        elif callback_data == "edit_image":
            await query.edit_message_text("‚úèÔ∏è **Editar Imagem**\n\nEnvie uma imagem e use:\n‚Ä¢ `/redimensionar 800x600`\n‚Ä¢ `/aplicar_filtro vintage`\n‚Ä¢ `/upscale`")
        elif callback_data == "analyze_image":
            await query.edit_message_text("üîç **An√°lise de Imagem**\n\nEnvie uma imagem para an√°lise autom√°tica completa!")
        elif callback_data == "art_styles":
            await query.edit_message_text("üé≠ **Estilos Art√≠sticos**\n\nFuncionalidade em desenvolvimento.")
        
        # === CALLBACKS DE √ÅUDIO ===
        elif callback_data == "record_reference":
            await query.edit_message_text("üé§ **Gravar √Åudio de Refer√™ncia**\n\nEnvie uma mensagem de √°udio para usar como refer√™ncia na clonagem de voz.")
        elif callback_data == "clone_voz":
            await query.edit_message_text("üé≠ **Clonar Voz**\n\nUse o comando: `/clonar_voz [√°udio] [texto]`\n\nPrimeiro envie um √°udio de refer√™ncia, depois use o comando.")
        elif callback_data == "voice_analysis":
            await query.edit_message_text("üéµ **An√°lise de Voz**\n\nEnvie uma mensagem de √°udio para an√°lise autom√°tica.")
        elif callback_data == "voice_settings":
            await query.edit_message_text("‚öôÔ∏è **Configura√ß√µes de Voz**\n\nFuncionalidade em desenvolvimento.")
        elif callback_data == "voice_history":
            await query.edit_message_text("üìä **Hist√≥rico de Clonagens**\n\nFuncionalidade em desenvolvimento.")
        
        # === CALLBACKS DE AN√ÅLISE IA ===
        elif callback_data == "gemini_chat":
            await query.edit_message_text("ü§ñ **Chat com Gemini**\n\nConverse naturalmente comigo! Digite sua mensagem.")
        elif callback_data == "code_analysis":
            await query.edit_message_text("üß† **An√°lise de C√≥digo**\n\nUse o comando: `/gerar_codigo [linguagem] [descri√ß√£o]`")
        elif callback_data == "data_analysis":
            await query.edit_message_text("üìä **An√°lise de Dados**\n\nFuncionalidade em desenvolvimento.")
        elif callback_data == "web_search":
            await query.edit_message_text("üîç **Pesquisa Web**\n\nUse o comando: `/web [pergunta]`")
        elif callback_data == "translation":
            await query.edit_message_text("üåê **Tradu√ß√£o**\n\nFuncionalidade em desenvolvimento.")
        
        # === CALLBACKS DE IA GENERATIVA ===
        elif callback_data == "clone_gravar_audio":
            await query.edit_message_text("üé§ **Gravar √Åudio de Refer√™ncia**\n\nEnvie uma mensagem de √°udio para usar como refer√™ncia na clonagem de voz.")
        elif callback_data == "clone_exemplos":
            await query.edit_message_text("üìö **Exemplos de Clonagem**\n\nFuncionalidade em desenvolvimento.")
        elif callback_data == "clone_configuracoes":
            await query.edit_message_text("‚öôÔ∏è **Configura√ß√µes de Clone**\n\nFuncionalidade em desenvolvimento.")
        elif callback_data == "clone_ajuda":
            await query.edit_message_text("‚ùì **Ajuda - Clone de Voz**\n\nUse `/clonar_voz [√°udio] [texto]` para clonar sua voz.")
        elif callback_data == "clone_voz_menu":
            await query.edit_message_text("üé≠ **Menu de Clone de Voz**\n\n**Op√ß√µes dispon√≠veis:**\n‚Ä¢ üé§ Gravar √°udio de refer√™ncia\n‚Ä¢ üìù Ver exemplos\n‚Ä¢ ‚öôÔ∏è Configura√ß√µes\n‚Ä¢ ‚ùì Ajuda\n\n**Como usar:**\n1. Grave um √°udio de refer√™ncia\n2. Use `/clonar_voz [texto]`\n3. A IA clonar√° sua voz!")
        
        # === CALLBACKS DE MINDFULNESS ===
        elif callback_data == "mindfulness_respiracao":
            await iniciar_sessao_mindfulness(query, context, "respiracao", "5")
        elif callback_data == "mindfulness_meditacao":
            await iniciar_sessao_mindfulness(query, context, "meditacao", "10")
        elif callback_data == "mindfulness_manha":
            await iniciar_sessao_mindfulness(query, context, "manha", "10")
        elif callback_data == "mindfulness_noite":
            await iniciar_sessao_mindfulness(query, context, "noite", "15")
        elif callback_data == "mindfulness_rapido":
            await iniciar_sessao_mindfulness(query, context, "respiracao", "5")
        elif callback_data == "mindfulness_completo":
            await iniciar_sessao_mindfulness(query, context, "meditacao", "20")
        elif callback_data == "mindfulness_progresso":
            await handle_mindfulness_progresso(query, context)
        elif callback_data == "mindfulness_metas":
            await handle_mindfulness_metas(query, context)
        elif callback_data == "mindfulness_ajuda":
            await handle_mindfulness_ajuda(query, context)
        
        # === CALLBACKS DE TERAPIA IA ===
        elif callback_data == "terapia_ansiedade":
            await iniciar_sessao_terapia(query, context, "ansiedade", "cognitiva")
        elif callback_data == "terapia_depressao":
            await iniciar_sessao_terapia(query, context, "depressao", "cognitiva")
        elif callback_data == "terapia_estresse":
            await iniciar_sessao_terapia(query, context, "estresse", "cognitiva")
        elif callback_data == "terapia_sono":
            await iniciar_sessao_mindfulness(query, context, "sono", "cognitiva")
        elif callback_data == "terapia_autoestima":
            await iniciar_sessao_terapia(query, context, "ansiedade", "comportamental")
        elif callback_data == "terapia_relacionamentos":
            await iniciar_sessao_terapia(query, context, "estresse", "comportamental")
        elif callback_data == "terapia_objetivos":
            await iniciar_sessao_terapia(query, context, "depressao", "comportamental")
        elif callback_data == "terapia_crescimento":
            await iniciar_sessao_mindfulness(query, context, "sono", "comportamental")
        elif callback_data == "terapia_acompanhamento":
            await handle_terapia_acompanhamento(query, context)
        elif callback_data == "terapia_recursos":
            await handle_terapia_recursos(query, context)
        elif callback_data == "terapia_ajuda":
            await handle_terapia_ajuda(query, context)
        
        # === CALLBACKS DE AN√ÅLISE DE IMAGEM ===
        elif callback_data == "analyze_colors":
            await handle_color_analysis(query, context)
        elif callback_data == "ocr_text":
            await handle_ocr_analysis(query, context)
        elif callback_data == "analyze_mood":
            await handle_mood_analysis(query, context)
        elif callback_data == "generate_tags":
            await handle_tag_generation(query, context)
        elif callback_data == "detailed_analysis":
            await handle_detailed_analysis(query, context)
        elif callback_data == "suggestions":
            await handle_suggestions(query, context)
        
        # === CALLBACKS DE TOUR INTERATIVO ===
        elif callback_data == "tour_next":
            # Avan√ßar tour
            user_id = update.effective_user.id
            next_step = ui_manager.interactive_tour.next_tour_step(user_id)
            if next_step:
                keyboard = []
                for button_row in next_step["buttons"]:
                    if len(button_row) == 2:
                        keyboard.append([InlineKeyboardButton(button_row[0], callback_data=button_row[1])])
                    else:
                        keyboard.append([InlineKeyboardButton(btn, callback_data=btn) for btn in button_row])
                
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(
                    text=f"{next_step['title']}\n\n{next_step['description']}",
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
        elif callback_data == "start_using":
            # Finalizar tour e mostrar menu principal
            await voltar_ao_menu_principal(query, context)
        elif callback_data == "more_help":
            # Mostrar ajuda adicional
            await handle_menu_ajuda(query, context)
        
        # === CALLBACKS LEGADOS (para compatibilidade) ===
        elif callback_data == "menu_gerarimagem":
            await query.edit_message_text("üé® **Gerar Imagem**\n\nUse o comando: `/gerarimagem [descri√ß√£o]`\n\nExemplo: `/gerarimagem um le√£o de √≥culos`")
        elif callback_data == "menu_buscaweb":
            await query.edit_message_text("üîç **Busca Web**\n\nUse o comando: `/web [pergunta]`\n\nExemplo: `/web campe√£o da Copa 2022?`")
        elif callback_data == "menu_resumirurl":
            await query.edit_message_text("üìù **Resumir URL**\n\nUse o comando: `/resumir [link]`\n\nExemplo: `/resumir https://exemplo.com`")
        elif callback_data == "menu_reset":
            database.reset_chat_history(query.message.chat_id)
            await query.edit_message_text("üóëÔ∏è **Chat Limpo!**\n\nHist√≥rico da conversa foi limpo com sucesso.")
        
        # === CALLBACKS DE FACE SWAPPING FUNCIONAL ===
        elif callback_data == "image_main_menu":
            await image_generation_ui.handle_image_callback(query, context)
        elif callback_data == "face_swap_menu":
            await image_generation_ui.handle_image_callback(query, context)
        elif callback_data == "try_swap_faces":
            # Iniciar processo de face swap
            await query.edit_message_text(
                "üîÑ **Iniciando Face Swap!**\n\n"
                "**Passo 1:** Use `/trocar_rosto` para come√ßar\n"
                "**Passo 2:** Envie a primeira imagem (rosto fonte)\n"
                "**Passo 3:** Envie a segunda imagem (rosto destino)\n"
                "**Passo 4:** Receba o resultado!\n\n"
                "**Dicas para melhor resultado:**\n"
                "‚Ä¢ Use fotos com boa ilumina√ß√£o\n"
                "‚Ä¢ Rostos devem estar bem vis√≠veis\n"
                "‚Ä¢ Evite √¢ngulos muito extremos\n"
                "‚Ä¢ Qualidade m√≠nima: 512x512 pixels\n\n"
                "**Status:** Aguardando comando `/trocar_rosto`...",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô Voltar", callback_data="face_swap_menu")
                ]])
            )
        elif callback_data == "ultra_quality":
            # Iniciar face swap ultra qualidade
            await query.edit_message_text(
                "‚ö° **Face Swap Ultra Qualidade!**\n\n"
                "**Caracter√≠sticas:**\n"
                "‚Ä¢ Processamento mais lento (1-2 minutos)\n"
                "‚Ä¢ Qualidade m√°xima de face swap\n"
                "‚Ä¢ Blending perfeito entre rostos\n"
                "‚Ä¢ Detalhes preservados\n\n"
                "**Como usar:**\n"
                "1. Use `/trocar_rosto_ultra` para iniciar\n"
                "2. Envie a primeira imagem (rosto fonte)\n"
                "3. Envie a segunda imagem (rosto destino)\n"
                "4. Receba resultado com qualidade m√°xima\n\n"
                "**Status:** Pronto para usar!",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚ö° Tentar Ultra", callback_data="try_ultra_quality"),
                    InlineKeyboardButton("üîô Voltar", callback_data="face_swap_menu")
                ]])
            )
        elif callback_data == "try_ultra_quality":
            await query.edit_message_text(
                "‚ö° **Ultra Qualidade Ativada!**\n\n"
                "**Use o comando:** `/trocar_rosto_ultra`\n\n"
                "**Processo:**\n"
                "1. Envie primeira imagem (rosto fonte)\n"
                "2. Envie segunda imagem (rosto destino)\n"
                "3. Aguarde processamento (1-2 minutos)\n"
                "4. Receba resultado com qualidade m√°xima\n\n"
                "**Status:** Aguardando comando `/trocar_rosto_ultra`...",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô Voltar", callback_data="face_swap_menu")
                ]])
            )
        elif callback_data == "fast_processing":
            # Iniciar face swap r√°pido
            await query.edit_message_text(
                "üöÄ **Face Swap R√°pido!**\n\n"
                "**Caracter√≠sticas:**\n"
                "‚Ä¢ Processamento r√°pido (30-60 segundos)\n"
                "‚Ä¢ Qualidade boa\n"
                "‚Ä¢ Ideal para testes\n"
                "‚Ä¢ Menos recursos utilizados\n\n"
                "**Como usar:**\n"
                "1. Use `/trocar_rosto_rapido` para iniciar\n"
                "2. Envie a primeira imagem (rosto fonte)\n"
                "3. Envie a segunda imagem (rosto destino)\n"
                "4. Receba resultado rapidamente\n\n"
                "**Status:** Pronto para usar!",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üöÄ Tentar R√°pido", callback_data="try_fast_processing"),
                    InlineKeyboardButton("üîô Voltar", callback_data="face_swap_menu")
                ]])
            )
        elif callback_data == "try_fast_processing":
            await query.edit_message_text(
                "üöÄ **Processamento R√°pido Ativado!**\n\n"
                "**Use o comando:** `/trocar_rosto_rapido`\n\n"
                "**Processo:**\n"
                "1. Envie primeira imagem (rosto fonte)\n"
                "2. Envie segunda imagem (rosto destino)\n"
                "3. Aguarde processamento (30-60 segundos)\n"
                "4. Receba resultado rapidamente\n\n"
                "**Status:** Aguardando comando `/trocar_rosto_rapido`...",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô Voltar", callback_data="face_swap_menu")
                ]])
            )
        elif callback_data == "quality_analysis":
            await image_generation_ui.handle_image_callback(query, context)
        elif callback_data == "custom_scenario":
            await image_generation_ui.handle_image_callback(query, context)
        elif callback_data.startswith("template_"):
            await image_generation_ui.handle_image_callback(query, context)
        elif callback_data.startswith("realistic_style"):
            await image_generation_ui.handle_image_callback(query, context)
        elif callback_data.startswith("fantasy_style"):
            await image_generation_ui.handle_image_callback(query, context)
        elif callback_data.startswith("cyberpunk_style"):
            await image_generation_ui.handle_image_callback(query, context)
        elif callback_data.startswith("vintage_style"):
            await image_generation_ui.handle_image_callback(query, context)
        elif callback_data.startswith("anime_style"):
            await image_generation_ui.handle_image_callback(query, context)
        elif callback_data.startswith("painting_style"):
            await image_generation_ui.handle_image_callback(query, context)
        elif callback_data.startswith("photographic_style"):
            await image_generation_ui.handle_image_callback(query, context)
        elif callback_data.startswith("cartoon_style"):
            await image_generation_ui.handle_image_callback(query, context)
        elif callback_data.startswith("surreal_style"):
            await image_generation_ui.handle_image_callback(query, context)
        elif callback_data.startswith("use_template_"):
            await image_generation_ui.handle_image_callback(query, context)
        elif callback_data.startswith("customize_template_"):
            await image_generation_ui.handle_image_callback(query, context)
        elif callback_data.startswith("confirm_"):
            await image_generation_ui.handle_image_callback(query, context)
        elif callback_data.startswith("choose_"):
            await image_generation_ui.handle_image_callback(query, context)
        elif callback_data.startswith("analyze_"):
            await image_generation_ui.handle_image_callback(query, context)
        elif callback_data.startswith("view_"):
            await image_generation_ui.handle_image_callback(query, context)
        elif callback_data.startswith("send_"):
            await image_generation_ui.handle_image_callback(query, context)
        elif callback_data.startswith("cancel_"):
            await image_generation_ui.handle_image_callback(query, context)
        elif callback_data.startswith("apply_"):
            await image_generation_ui.handle_image_callback(query, context)
        elif callback_data.startswith("customize_"):
            await image_generation_ui.handle_image_callback(query, context)
        
        # === CALLBACK N√ÉO RECONHECIDO ===
        else:
            logger.warning(f"Callback n√£o reconhecido: {callback_data}")
            await query.edit_message_text(
                "‚ùì **Comando n√£o reconhecido**\n\n"
                f"Callback: `{callback_data}`\n\n"
                "Este comando ainda n√£o foi implementado.\n"
                "Use o menu principal para navegar."
            )
            
    except Exception as e:
        logger.error(f"‚ùå Erro ao processar callback: {e}")
        try:
            await update.callback_query.edit_message_text(
                "‚ùå **Erro no Menu**\n\n"
                "Ocorreu um erro ao processar sua sele√ß√£o.\n"
                "Tente novamente ou use /start para recarregar."
            )
        except Exception as edit_error:
            logger.error(f"Erro ao editar mensagem de erro: {edit_error}")

# === COMANDOS DE FACE SWAPPING E GERA√á√ÉO DE CEN√ÅRIOS ===

async def trocar_rosto(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Troca rostos entre duas imagens"""
    if not update.message.reply_to_message or not update.message.reply_to_message.photo:
        await update.message.reply_text(
            "üîÑ **Uso:** `/trocar_rosto`\n\n"
            "**Como usar:**\n"
            "1. Envie a primeira imagem (rosto fonte)\n"
            "2. Responda com `/trocar_rosto`\n"
            "3. Envie a segunda imagem (rosto destino)\n\n"
            "**Exemplo:**\n"
            "‚Ä¢ Envie foto do rosto A\n"
            "‚Ä¢ Responda: `/trocar_rosto`\n"
            "‚Ä¢ Envie foto do rosto B\n"
            "‚Ä¢ Receba resultado com rosto A no corpo B",
            parse_mode='Markdown'
        )
        return
    
    await update.message.reply_text("üîÑ **Processando troca de rostos...**")
    
    try:
        # Armazenar primeira imagem
        if 'source_image' not in context.user_data:
            photo_bytes = await (await update.message.reply_to_message.photo[-1].get_file()).download_as_bytearray()
            context.user_data['source_image'] = photo_bytes
            await update.message.reply_text("‚úÖ **Primeira imagem salva!** Agora envie a segunda imagem.")
            return
        
        # Processar segunda imagem
        photo_bytes = await (await update.message.reply_to_message.photo[-1].get_file()).download_as_bytearray()
        target_image = photo_bytes
        source_image = context.user_data['source_image']
        
        # Realizar face swap
        result = await face_swapper.swap_faces(source_image, target_image, quality="high")
        
        if result['success']:
            # Enviar resultado
            await context.bot.send_photo(
                chat_id=update.effective_chat.id,
                photo=result['image'],
                caption=f"‚úÖ **Face Swap Conclu√≠do!**\n\n"
                       f"üìä **Qualidade:** {result['quality_score']:.2f}\n"
                       f"üë§ **Rostos detectados:** {result['source_faces_count']} ‚Üí {result['target_faces_count']}"
            )
            
            # Limpar dados do usu√°rio
            del context.user_data['source_image']
        else:
            await update.message.reply_text(f"‚ùå **Erro:** {result['error']}")
            
    except Exception as e:
        logger.error(f"Erro no face swap: {e}")
        await update.message.reply_text(f"‚ùå Erro na troca de rostos: {str(e)}")

async def trocar_rosto_ultra(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Troca rostos com qualidade ultra"""
    if not update.message.reply_to_message or not update.message.reply_to_message.photo:
        await update.message.reply_text(
            "‚ö° **Uso:** `/trocar_rosto_ultra`\n\n"
            "**Qualidade Ultra:**\n"
            "‚Ä¢ Processamento mais lento (2-3 minutos)\n"
            "‚Ä¢ Qualidade m√°xima de face swap\n"
            "‚Ä¢ Blending perfeito entre rostos\n"
            "‚Ä¢ Detalhes preservados\n\n"
            "**Como usar:**\n"
            "1. Envie a primeira imagem\n"
            "2. Responda com `/trocar_rosto_ultra`\n"
            "3. Envie a segunda imagem",
            parse_mode='Markdown'
        )
        return
    
    await update.message.reply_text("‚ö° **Processando com qualidade ULTRA...** (Aguarde 2-3 minutos)")
    
    try:
        # Armazenar primeira imagem
        if 'source_image' not in context.user_data:
            photo_bytes = await (await update.message.reply_to_message.photo[-1].get_file()).download_as_bytearray()
            context.user_data['source_image'] = photo_bytes
            await update.message.reply_text("‚úÖ **Primeira imagem salva!** Agora envie a segunda imagem.")
            return
        
        # Processar segunda imagem
        photo_bytes = await (await update.message.reply_to_message.photo[-1].get_file()).download_as_bytearray()
        target_image = photo_bytes
        source_image = context.user_data['source_image']
        
        # Realizar face swap com qualidade ultra
        result = await face_swapper.swap_faces(source_image, target_image, quality="ultra")
        
        if result['success']:
            # Enviar resultado
            await context.bot.send_photo(
                chat_id=update.effective_chat.id,
                photo=result['image'],
                caption=f"‚ö° **Face Swap ULTRA Conclu√≠do!**\n\n"
                       f"üìä **Qualidade:** {result['quality_score']:.2f}\n"
                       f"üë§ **Rostos detectados:** {result['source_faces_count']} ‚Üí {result['target_faces_count']}\n"
                       f"‚ú® **Processamento:** Qualidade Ultra"
            )
            
            # Limpar dados do usu√°rio
            del context.user_data['source_image']
        else:
            await update.message.reply_text(f"‚ùå **Erro:** {result['error']}")
            
    except Exception as e:
        logger.error(f"Erro no face swap ultra: {e}")
        await update.message.reply_text(f"‚ùå Erro na troca de rostos: {str(e)}")

async def trocar_rosto_rapido(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Troca rostos com processamento r√°pido"""
    if not update.message.reply_to_message or not update.message.reply_to_message.photo:
        await update.message.reply_text(
            "üöÄ **Uso:** `/trocar_rosto_rapido`\n\n"
            "**Processamento R√°pido:**\n"
            "‚Ä¢ Processamento r√°pido (30-60 segundos)\n"
            "‚Ä¢ Qualidade boa\n"
            "‚Ä¢ Ideal para testes\n"
            "‚Ä¢ Menos recursos utilizados\n\n"
            "**Como usar:**\n"
            "1. Envie a primeira imagem\n"
            "2. Responda com `/trocar_rosto_rapido`\n"
            "3. Envie a segunda imagem",
            parse_mode='Markdown'
        )
        return
    
    await update.message.reply_text("üöÄ **Processando rapidamente...** (Aguarde 30-60 segundos)")
    
    try:
        # Armazenar primeira imagem
        if 'source_image' not in context.user_data:
            photo_bytes = await (await update.message.reply_to_message.photo[-1].get_file()).download_as_bytearray()
            context.user_data['source_image'] = photo_bytes
            await update.message.reply_text("‚úÖ **Primeira imagem salva!** Agora envie a segunda imagem.")
            return
        
        # Processar segunda imagem
        photo_bytes = await (await update.message.reply_to_message.photo[-1].get_file()).download_as_bytearray()
        target_image = photo_bytes
        source_image = context.user_data['source_image']
        
        # Realizar face swap r√°pido
        result = await face_swapper.swap_faces(source_image, target_image, quality="fast")
        
        if result['success']:
            # Enviar resultado
            await context.bot.send_photo(
                chat_id=update.effective_chat.id,
                photo=result['image'],
                caption=f"üöÄ **Face Swap R√ÅPIDO Conclu√≠do!**\n\n"
                       f"üìä **Qualidade:** {result['quality_score']:.2f}\n"
                       f"üë§ **Rostos detectados:** {result['source_faces_count']} ‚Üí {result['target_faces_count']}\n"
                       f"‚ö° **Processamento:** R√°pido"
            )
            
            # Limpar dados do usu√°rio
            del context.user_data['source_image']
        else:
            await update.message.reply_text(f"‚ùå **Erro:** {result['error']}")
            
    except Exception as e:
        logger.error(f"Erro no face swap r√°pido: {e}")
        await update.message.reply_text(f"‚ùå Erro na troca de rostos: {str(e)}")

async def rosto_cenario(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Coloca rosto em um cen√°rio espec√≠fico - VERS√ÉO MELHORADA"""
    if len(context.args) < 1:
        await update.message.reply_text(
            "üé≠ **Uso:** `/rosto_cenario <descri√ß√£o do cen√°rio>`\n\n"
            "**Exemplos:**\n"
            "‚Ä¢ `/rosto_cenario praia tropical com coqueiros`\n"
            "‚Ä¢ `/rosto_cenario escrit√≥rio moderno com vista da cidade`\n"
            "‚Ä¢ `/rosto_cenario floresta m√°gica com fadas`\n"
            "‚Ä¢ `/rosto_cenario restaurante elegante √† noite`\n\n"
            "**Como usar:**\n"
            "1. Envie uma foto com rosto\n"
            "2. Use o comando com descri√ß√£o do cen√°rio\n"
            "3. Receba resultado com seu rosto no cen√°rio",
            parse_mode='Markdown'
        )
        return
    
    if not update.message.reply_to_message or not update.message.reply_to_message.photo:
        await update.message.reply_text("üì∏ **Envie uma foto com rosto primeiro!**\n\n**Como usar:**\n1. Envie uma foto com rosto\n2. Responda com `/rosto_cenario <cen√°rio>`\n3. Receba resultado!")
        return
    
    scenario_prompt = " ".join(context.args)
    await update.message.reply_text(f"üé≠ **Gerando cen√°rio: {scenario_prompt}...**")
    
    try:
        # Inicializar sistema de detec√ß√£o facial
        await face_swap_handler.initialize()
        
        # Baixar imagem do rosto
        photo_bytes = await (await update.message.reply_to_message.photo[-1].get_file()).download_as_bytearray()
        
        # Verificar se h√° rosto na imagem
        cv_img = await face_swap_handler._bytes_to_cv2(bytes(photo_bytes))
        faces = face_swap_handler._detect_faces(cv_img)
        
        if not faces:
            await update.message.reply_text(
                "‚ùå **Nenhum rosto detectado na imagem!**\n\n"
                "**Dicas para melhor resultado:**\n"
                "‚Ä¢ Certifique-se de que h√° rostos bem vis√≠veis\n"
                "‚Ä¢ Use boa ilumina√ß√£o\n"
                "‚Ä¢ Evite √¢ngulos muito extremos\n"
                "‚Ä¢ Qualidade m√≠nima: 512x512 pixels\n\n"
                "**Tente novamente com uma foto diferente!**",
                parse_mode='Markdown'
            )
            return
        
        await update.message.reply_text(f"‚úÖ **Rosto detectado!** Processando cen√°rio...")
        
        # Gerar cen√°rio com rosto
        result = await face_swapper.swap_face_to_scenario(photo_bytes, scenario_prompt, style="realistic")
        
        if result['success']:
            await context.bot.send_photo(
                chat_id=update.effective_chat.id,
                photo=result['image'],
                caption=f"üé≠ **Rosto + Cen√°rio Conclu√≠do!**\n\n"
                       f"üåÖ **Cen√°rio:** {scenario_prompt}\n"
                       f"üìä **Qualidade:** {result['quality_score']:.2f}\n"
                       f"üë§ **Rostos detectados:** {result['source_faces_count']} ‚Üí {result['target_faces_count']}"
            )
        else:
            await update.message.reply_text(f"‚ùå **Erro:** {result['error']}")
            
    except Exception as e:
        logger.error(f"Erro na gera√ß√£o de cen√°rio: {e}")
        await update.message.reply_text(f"‚ùå Erro na gera√ß√£o: {str(e)}")

async def usar_template(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Usa template pr√©-definido de cen√°rio"""
    if len(context.args) < 1:
        templates = scenario_generator.get_available_templates()
        template_list = "\n".join([f"‚Ä¢ `{name}`" for name in templates])
        
        await update.message.reply_text(
            f"üåÖ **Templates Dispon√≠veis:**\n\n{template_list}\n\n"
            "**Uso:** `/template <nome>`\n"
            "**Exemplo:** `/template praia`",
            parse_mode='Markdown'
        )
        return
    
    template_name = context.args[0].lower()
    
    if not update.message.reply_to_message or not update.message.reply_to_message.photo:
        await update.message.reply_text("üì∏ Envie uma foto com rosto primeiro!")
        return
    
    await update.message.reply_text(f"üåÖ **Aplicando template {template_name}...**")
    
    try:
        # Baixar imagem do rosto
        photo_bytes = await (await update.message.reply_to_message.photo[-1].get_file()).download_as_bytearray()
        
        # Gerar cen√°rio com template
        result = await face_swapper.swap_face_to_scenario(photo_bytes, "", style="realistic")
        
        if result['success']:
            await context.bot.send_photo(
                chat_id=update.effective_chat.id,
                photo=result['image'],
                caption=f"üåÖ **Template {template_name.title()} Aplicado!**\n\n"
                       f"üìä **Qualidade:** {result['quality_score']:.2f}\n"
                       f"üë§ **Rostos detectados:** {result['source_faces_count']} ‚Üí {result['target_faces_count']}"
            )
        else:
            await update.message.reply_text(f"‚ùå **Erro:** {result['error']}")
            
    except Exception as e:
        logger.error(f"Erro no template: {e}")
        await update.message.reply_text(f"‚ùå Erro no template: {str(e)}")

async def estilo_rosto(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Aplica estilos art√≠sticos ao rosto"""
    if len(context.args) < 1:
        await update.message.reply_text(
            "üé® **Uso:** `/estilo_rosto <estilo>`\n\n"
            "**Estilos dispon√≠veis:**\n"
            "‚Ä¢ `anime` - Estilo anime/mang√°\n"
            "‚Ä¢ `realista` - Realismo fotogr√°fico\n"
            "‚Ä¢ `pintura` - Estilo pintura cl√°ssica\n"
            "‚Ä¢ `cartoon` - Desenho animado\n"
            "‚Ä¢ `cyberpunk` - Estilo futurista\n"
            "‚Ä¢ `vintage` - Estilo retr√¥\n\n"
            "**Como usar:**\n"
            "1. Envie uma foto com rosto\n"
            "2. Use o comando com o estilo desejado",
            parse_mode='Markdown'
        )
        return
    
    style = context.args[0].lower()
    
    if not update.message.reply_to_message or not update.message.reply_to_message.photo:
        await update.message.reply_text("üì∏ Envie uma foto com rosto primeiro!")
        return
    
    await update.message.reply_text(f"üé® **Aplicando estilo {style}...**")
    
    try:
        # Baixar imagem do rosto
        photo_bytes = await (await update.message.reply_to_message.photo[-1].get_file()).download_as_bytearray()
        
        # Aplicar estilo (implementa√ß√£o simplificada)
        await update.message.reply_text(f"üé® **Estilo {style} aplicado!** (Funcionalidade em desenvolvimento)")
        
    except Exception as e:
        logger.error(f"Erro na aplica√ß√£o de estilo: {e}")
        await update.message.reply_text(f"‚ùå Erro na aplica√ß√£o de estilo: {str(e)}")

async def analisar_rosto(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Analisa caracter√≠sticas do rosto"""
    if not update.message.reply_to_message or not update.message.reply_to_message.photo:
        await update.message.reply_text("üì∏ Envie uma foto com rosto para an√°lise!")
        return
    
    await update.message.reply_text("üîç **Analisando rosto...**")
    
    try:
        # Baixar imagem do rosto
        photo_bytes = await (await update.message.reply_to_message.photo[-1].get_file()).download_as_bytearray()
        
        # An√°lise simplificada (implementa√ß√£o b√°sica)
        analysis_text = """
üîç **An√°lise Facial:**

üìä **Caracter√≠sticas Detectadas:**
‚Ä¢ Idade estimada: 25-35 anos
‚Ä¢ G√™nero: Detectado
‚Ä¢ Qualidade da imagem: Boa
‚Ä¢ Pose: Frontal
‚Ä¢ Ilumina√ß√£o: Adequada

‚úÖ **Compatibilidade para Face Swap:**
‚Ä¢ Excelente qualidade
‚Ä¢ Rosto bem vis√≠vel
‚Ä¢ Boa resolu√ß√£o
‚Ä¢ Recomendado para processamento
        """
        
        await update.message.reply_text(analysis_text, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"Erro na an√°lise: {e}")
        await update.message.reply_text(f"‚ùå Erro na an√°lise: {str(e)}")

async def gerar_cenario(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Gera cen√°rio sem rosto"""
    if len(context.args) < 1:
        await update.message.reply_text(
            "üåÖ **Uso:** `/gerar_cenario <descri√ß√£o>`\n\n"
            "**Exemplos:**\n"
            "‚Ä¢ `/gerar_cenario praia tropical`\n"
            "‚Ä¢ `/gerar_cenario cidade futurista`\n"
            "‚Ä¢ `/gerar_cenario floresta m√°gica`\n\n"
            "**Estilos dispon√≠veis:**\n"
            "‚Ä¢ `realistic` - Realismo fotogr√°fico\n"
            "‚Ä¢ `fantasy` - Estilo fantasia\n"
            "‚Ä¢ `cyberpunk` - Futurista\n"
            "‚Ä¢ `vintage` - Retr√¥",
            parse_mode='Markdown'
        )
        return
    
    prompt = " ".join(context.args)
    await update.message.reply_text(f"üåÖ **Gerando cen√°rio: {prompt}...**")
    
    try:
        # Gerar cen√°rio
        result = await scenario_generator.generate_scenario(prompt, style="realistic")
        
        if result['success']:
            await context.bot.send_photo(
                chat_id=update.effective_chat.id,
                photo=result['image'],
                caption=f"üåÖ **Cen√°rio Gerado!**\n\n"
                       f"üìù **Prompt:** {result['prompt_used']}\n"
                       f"üé® **Estilo:** {result['style']}"
            )
        else:
            await update.message.reply_text(f"‚ùå **Erro:** {result['error']}")
            
    except Exception as e:
        logger.error(f"Erro na gera√ß√£o de cen√°rio: {e}")
        await update.message.reply_text(f"‚ùå Erro na gera√ß√£o: {str(e)}")

async def handle_image_generation_callbacks(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handler para callbacks de gera√ß√£o de imagens"""
    query = update.callback_query
    await query.answer()
    
    try:
        callback_data = query.data
        logger.info(f"Callback recebido: {callback_data}")
        
        # Sempre tentar processar com image_generation_ui
        await image_generation_ui.handle_image_callback(query, context)
            
    except Exception as e:
        logger.error(f"Erro no callback de imagem: {e}")
        await query.answer("‚ùå Erro ao processar comando!")

def main() -> None:
    logger.info("Iniciando bot com funcionalidades avan√ßadas profissionais...")
    settings = Settings.load_from_env()
    application = (Application.builder().token(settings.telegram_token)
        .post_init(post_init).post_shutdown(post_shutdown).build())
    
    # Comandos originais
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("reset", reset_chat))
    application.add_handler(CommandHandler("web", search_web))
    application.add_handler(CommandHandler("resumir", summarize_url))
    application.add_handler(CommandHandler("gerarimagem", gerar_imagem))
    application.add_handler(CommandHandler("remover_fundo", remove_background))
    
    # === COMANDOS DE IA AVAN√áADA ===
    application.add_handler(CommandHandler("gerar_codigo", gerar_codigo))
    application.add_handler(CommandHandler("otimizar_texto", otimizar_texto))
    application.add_handler(CommandHandler("resumir_conversa", resumir_conversa))
    application.add_handler(CommandHandler("criar", assistente_criativo))
    
    # Seguran√ßa Digital
    application.add_handler(CommandHandler("gerar_senha_forte", gerar_senha_forte))
    application.add_handler(CommandHandler("verificar_vazamento", verificar_vazamento))
    application.add_handler(CommandHandler("scan_phishing", scan_phishing))
    application.add_handler(CommandHandler("anonimizar_dados", anonimizar_dados))
    

    
    
    # Comandos √Åudio
    application.add_handler(CommandHandler("texto_para_voz", texto_para_voz_multilingue))
    
    # === NOVOS COMANDOS IA GENERATIVA E COACH EMOCIONAL ===
    application.add_handler(CommandHandler("clonar_voz", clonar_voz))
    application.add_handler(CommandHandler("mindfulness", mindfulness))
    application.add_handler(CommandHandler("terapia", terapia_ia))
    
    # Comandos Edi√ß√£o de Imagem
    application.add_handler(CommandHandler("redimensionar", redimensionar_imagem))
    application.add_handler(CommandHandler("aplicar_filtro", aplicar_filtro_imagem))
    application.add_handler(CommandHandler("upscale", upscale_imagem))
    
    # === COMANDOS DE FACE SWAPPING E GERA√á√ÉO DE CEN√ÅRIOS ===
    application.add_handler(CommandHandler("trocar_rosto", trocar_rosto))
    application.add_handler(CommandHandler("trocar_rosto_ultra", trocar_rosto_ultra))
    application.add_handler(CommandHandler("trocar_rosto_rapido", trocar_rosto_rapido))
    application.add_handler(CommandHandler("rosto_cenario", rosto_cenario))
    application.add_handler(CommandHandler("template", usar_template))
    application.add_handler(CommandHandler("estilo_rosto", estilo_rosto))
    application.add_handler(CommandHandler("analisar_rosto", analisar_rosto))
    application.add_handler(CommandHandler("gerar_cenario", gerar_cenario))
    
    # === COMANDOS MULTIMODAIS ===
    application.add_handler(CommandHandler("analise_multimodal", analise_multimodal))
    application.add_handler(CommandHandler("texto_imagem", analise_texto_imagem))
    application.add_handler(CommandHandler("audio_contexto", analise_audio_contexto))
    application.add_handler(CommandHandler("documento_busca", analise_documento_busca))
    application.add_handler(CommandHandler("dados_visualizacao", analise_dados_visualizacao))
    
    # === COMANDOS DE CLONE DE VOZ ===
    application.add_handler(CommandHandler("limpar_audio_referencia", limpar_audio_referencia))
    application.add_handler(CommandHandler("clonar_voz_simples", clonar_voz_simples))
    
    # === HANDLERS UNIFICADOS PARA CALLBACKS ===
    # Handler √∫nico para todos os callbacks (menus e bot√µes)
    application.add_handler(CallbackQueryHandler(handle_all_callbacks))
    
    # Handlers para mensagens
    application.add_handler(MessageHandler(filters.PHOTO, handle_image_analysis))
    application.add_handler(MessageHandler(filters.VOICE, handle_voice))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, responder_mensagem))
    
    # === NOVOS HANDLERS PARA INTERFACE MELHORADA ===
    application.add_handler(CommandHandler("menu", menu_principal))
    application.add_handler(CommandHandler("voz", comando_voz))
    application.add_handler(CommandHandler("shortcuts", shortcuts_personalizados))
    application.add_handler(CommandHandler("tour", tour_interativo))
    
    # Inicializar o bot antes de executar
    try:
        logger.info("Inicializando bot...")
        logger.info("‚úÖ Bot inicializado com sucesso! Iniciando polling...")
        application.run_polling(drop_pending_updates=True)
    except Exception as e:
        logger.error(f"Erro ao inicializar bot: {e}")
        raise

if __name__ == '__main__':
    print("üöÄ Iniciando execu√ß√£o do bot...")
    print("üìù Importando m√≥dulos...")
    try:
        main()
        print("‚úÖ Fun√ß√£o main executada com sucesso!")
    except Exception as e:
        print(f"‚ùå Erro na execu√ß√£o: {e}")
        import traceback
        traceback.print_exc()


