# -*- coding: utf-8 -*-
"""
Interface de Usu√°rio para Gera√ß√£o de Imagens com Face Swapping
Sistema de bot√µes exclusivos para funcionalidades avan√ßadas
"""

import logging
from typing import Dict, List, Any, Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from face_swapper_advanced import face_swapper
from scenario_generator import scenario_generator

logger = logging.getLogger(__name__)

class ImageGenerationUI:
    """Interface de usu√°rio para gera√ß√£o de imagens"""
    
    def __init__(self):
        self.user_sessions = {}  # Armazenar sess√µes de usu√°rio
        self.face_swapper = face_swapper
        self.scenario_generator = scenario_generator
    
    def get_main_image_menu(self) -> Dict[str, Any]:
        """Menu principal de gera√ß√£o de imagens"""
        return {
            "title": "üé≠ **Gera√ß√£o Avan√ßada de Imagens**",
            "description": "Escolha uma funcionalidade:",
            "buttons": [
                ["üîÑ Face Swapping", "face_swap_menu"],
                ["üé≠ Rosto + Cen√°rio", "face_scenario_menu"],
                ["üé® Estilos Art√≠sticos", "artistic_styles_menu"],
                ["üåÖ Templates de Cen√°rios", "scenario_templates_menu"],
                ["üì∏ An√°lise Facial", "face_analysis_menu"],
                ["‚öôÔ∏è Configura√ß√µes", "image_settings_menu"],
                ["üîô Voltar ao Menu Principal", "main_menu"]
            ]
        }
    
    def get_face_swap_menu(self) -> Dict[str, Any]:
        """Menu de face swapping"""
        return {
            "title": "üîÑ **Face Swapping Avan√ßado**",
            "description": "Troque rostos entre imagens:",
            "buttons": [
                ["üîÑ Trocar Rostos", "swap_faces"],
                ["üéØ Qualidade Ultra", "ultra_quality"],
                ["‚ö° Processamento R√°pido", "fast_processing"],
                ["üìä An√°lise de Qualidade", "quality_analysis"],
                ["üîô Voltar", "image_main_menu"]
            ]
        }
    
    def get_face_scenario_menu(self) -> Dict[str, Any]:
        """Menu de rosto + cen√°rio"""
        return {
            "title": "üé≠ **Rosto + Cen√°rio**",
            "description": "Coloque seu rosto em cen√°rios incr√≠veis:",
            "buttons": [
                ["üåÖ Cen√°rio Personalizado", "custom_scenario"],
                ["üé® Estilo Realista", "realistic_style"],
                ["‚ú® Estilo Fantasia", "fantasy_style"],
                ["üöÄ Estilo Cyberpunk", "cyberpunk_style"],
                ["üì∏ Estilo Vintage", "vintage_style"],
                ["üîô Voltar", "image_main_menu"]
            ]
        }
    
    def get_scenario_templates_menu(self) -> Dict[str, Any]:
        """Menu de templates de cen√°rios"""
        templates = self.scenario_generator.get_available_templates()
        
        buttons = []
        for i in range(0, len(templates), 2):
            row = []
            for j in range(2):
                if i + j < len(templates):
                    template = templates[i + j]
                    emoji = self._get_template_emoji(template)
                    row.append([f"{emoji} {template.title()}", f"template_{template}"])
            buttons.extend(row)
        
        buttons.append([["üîô Voltar", "image_main_menu"]])
        
        return {
            "title": "üåÖ **Templates de Cen√°rios**",
            "description": "Escolha um cen√°rio pr√©-definido:",
            "buttons": buttons
        }
    
    def get_artistic_styles_menu(self) -> Dict[str, Any]:
        """Menu de estilos art√≠sticos"""
        return {
            "title": "üé® **Estilos Art√≠sticos**",
            "description": "Aplique estilos art√≠sticos ao seu rosto:",
            "buttons": [
                ["üé≠ Estilo Anime", "anime_style"],
                ["üñºÔ∏è Estilo Pintura", "painting_style"],
                ["üì∏ Estilo Fotogr√°fico", "photographic_style"],
                ["üé™ Estilo Cartoon", "cartoon_style"],
                ["üåü Estilo Surrealista", "surreal_style"],
                ["üîô Voltar", "image_main_menu"]
            ]
        }
    
    def _get_template_emoji(self, template: str) -> str:
        """Retorna emoji para template"""
        emoji_map = {
            'praia': 'üèñÔ∏è',
            'escritorio': 'üè¢',
            'floresta': 'üå≤',
            'restaurante': 'üçΩÔ∏è',
            'espa√ßo': 'üåå',
            'montanha': '‚õ∞Ô∏è',
            'cidade': 'üèôÔ∏è',
            'castelo': 'üè∞',
            'laboratorio': 'üî¨',
            'biblioteca': 'üìö'
        }
        return emoji_map.get(template, 'üåÖ')
    
    async def handle_image_callback(self, query, context: ContextTypes.DEFAULT_TYPE):
        """Handler para callbacks de gera√ß√£o de imagens"""
        try:
            callback_data = query.data
            logger.info(f"Processando callback: {callback_data}")
            
            if callback_data == "image_main_menu":
                await self._show_menu(query, context, self.get_main_image_menu())
            
            elif callback_data == "face_swap_menu":
                await self._show_menu(query, context, self.get_face_swap_menu())
            
            elif callback_data == "face_scenario_menu":
                await self._show_menu(query, context, self.get_face_scenario_menu())
            
            elif callback_data == "scenario_templates_menu":
                await self._show_menu(query, context, self.get_scenario_templates_menu())
            
            elif callback_data == "artistic_styles_menu":
                await self._show_menu(query, context, self.get_artistic_styles_menu())
            
            elif callback_data == "swap_faces":
                logger.info("Executando swap_faces")
                await self._show_swap_faces_instructions(query, context)
            
            elif callback_data == "custom_scenario":
                await self._show_custom_scenario_instructions(query, context)
            
            elif callback_data.startswith("template_"):
                template_name = callback_data.replace("template_", "")
                await self._show_template_instructions(query, context, template_name)
            
            elif callback_data == "ultra_quality":
                await self._show_quality_options(query, context, "ultra")
            
            elif callback_data == "fast_processing":
                await self._show_quality_options(query, context, "fast")
            
            elif callback_data == "quality_analysis":
                await self._show_quality_analysis(query, context)
            
            elif callback_data == "try_swap_faces":
                await self._show_try_swap_faces(query, context)
            
            elif callback_data == "swap_examples":
                await self._show_swap_examples(query, context)
            
            elif callback_data == "choose_style":
                await self._show_choose_style(query, context)
            
            elif callback_data.startswith("use_template_"):
                template_name = callback_data.replace("use_template_", "")
                await self._use_template(query, context, template_name)
            
            elif callback_data.startswith("customize_template_"):
                template_name = callback_data.replace("customize_template_", "")
                await self._customize_template(query, context, template_name)
            
            elif callback_data.startswith("confirm_"):
                quality_type = callback_data.replace("confirm_", "")
                await self._confirm_quality(query, context, quality_type)
            
            elif callback_data.startswith("realistic_style"):
                await self._apply_style(query, context, "realistic")
            
            elif callback_data.startswith("fantasy_style"):
                await self._apply_style(query, context, "fantasy")
            
            elif callback_data.startswith("cyberpunk_style"):
                await self._apply_style(query, context, "cyberpunk")
            
            elif callback_data.startswith("vintage_style"):
                await self._apply_style(query, context, "vintage")
            
            elif callback_data.startswith("anime_style"):
                await self._apply_style(query, context, "anime")
            
            elif callback_data.startswith("painting_style"):
                await self._apply_style(query, context, "painting")
            
            elif callback_data.startswith("photographic_style"):
                await self._apply_style(query, context, "photographic")
            
            elif callback_data.startswith("cartoon_style"):
                await self._apply_style(query, context, "cartoon")
            
            elif callback_data.startswith("surreal_style"):
                await self._apply_style(query, context, "surreal")
            
            else:
                logger.warning(f"Callback n√£o tratado: {callback_data}")
                await query.answer(f"Funcionalidade '{callback_data}' em desenvolvimento!")
                
        except Exception as e:
            logger.error(f"Erro no callback de imagem: {e}")
            await query.answer("‚ùå Erro ao processar comando!")
    
    async def _show_menu(self, query, context: ContextTypes.DEFAULT_TYPE, menu_data: Dict):
        """Mostra menu espec√≠fico"""
        keyboard = []
        for button_row in menu_data["buttons"]:
            if isinstance(button_row[0], list):
                # M√∫ltiplos bot√µes na linha
                keyboard.append([InlineKeyboardButton(btn[0], callback_data=btn[1]) for btn in button_row])
            else:
                # Bot√£o √∫nico na linha
                keyboard.append([InlineKeyboardButton(button_row[0], callback_data=button_row[1])])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text=f"{menu_data['title']}\n\n{menu_data['description']}",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def _show_swap_faces_instructions(self, query, context: ContextTypes.DEFAULT_TYPE):
        """Mostra instru√ß√µes para face swapping"""
        instructions = """
üîÑ **Como Trocar Rostos:**

**Passo 1:** Envie a primeira imagem (rosto fonte)
**Passo 2:** Responda com `/trocar_rosto`
**Passo 3:** Envie a segunda imagem (rosto destino)
**Passo 4:** Aguarde o processamento

**Dicas:**
‚Ä¢ Use fotos com boa ilumina√ß√£o
‚Ä¢ Rostos devem estar bem vis√≠veis
‚Ä¢ Evite √¢ngulos muito extremos
‚Ä¢ Qualidade m√≠nima: 512x512 pixels

**Comandos R√°pidos:**
‚Ä¢ `/trocar_rosto` - Troca b√°sica
‚Ä¢ `/trocar_rosto_ultra` - Qualidade m√°xima
‚Ä¢ `/trocar_rosto_rapido` - Processamento r√°pido
        """
        
        keyboard = [
            [InlineKeyboardButton("üîÑ Tentar Agora", callback_data="try_swap_faces")],
            [InlineKeyboardButton("üìä Ver Exemplos", callback_data="swap_examples")],
            [InlineKeyboardButton("üîô Voltar", callback_data="face_swap_menu")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text=instructions,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def _show_custom_scenario_instructions(self, query, context: ContextTypes.DEFAULT_TYPE):
        """Mostra instru√ß√µes para cen√°rio personalizado"""
        instructions = """
üé≠ **Rosto + Cen√°rio Personalizado:**

**Como usar:**
1. Envie uma foto com rosto
2. Use `/rosto_cenario <descri√ß√£o>`
3. Aguarde a gera√ß√£o

**Exemplos:**
‚Ä¢ `/rosto_cenario praia tropical com coqueiros`
‚Ä¢ `/rosto_cenario escrit√≥rio moderno com vista da cidade`
‚Ä¢ `/rosto_cenario floresta m√°gica com fadas`

**Estilos dispon√≠veis:**
‚Ä¢ `realistic` - Realismo fotogr√°fico
‚Ä¢ `fantasy` - Estilo fantasia
‚Ä¢ `cyberpunk` - Futurista
‚Ä¢ `vintage` - Retr√¥
‚Ä¢ `artistic` - Art√≠stico
        """
        
        keyboard = [
            [InlineKeyboardButton("üé® Escolher Estilo", callback_data="choose_style")],
            [InlineKeyboardButton("üåÖ Ver Templates", callback_data="scenario_templates_menu")],
            [InlineKeyboardButton("üîô Voltar", callback_data="face_scenario_menu")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text=instructions,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def _show_template_instructions(self, query, context: ContextTypes.DEFAULT_TYPE, template_name: str):
        """Mostra instru√ß√µes para template espec√≠fico"""
        template_info = self.scenario_generator.get_template_info(template_name)
        
        if not template_info:
            await query.answer("Template n√£o encontrado!")
            return
        
        emoji = self._get_template_emoji(template_name)
        
        instructions = f"""
{emoji} **Template: {template_name.title()}**

**Descri√ß√£o:** {template_info['prompt']}
**Estilo:** {template_info['style']}
**Qualidade:** {template_info['guidance_scale']}/10

**Como usar:**
1. Envie uma foto com rosto
2. Use `/template {template_name}`
3. Aguarde o processamento

**Resultado esperado:**
Cen√°rio {template_name} com seu rosto integrado
        """
        
        keyboard = [
            [InlineKeyboardButton(f"{emoji} Usar Template", callback_data=f"use_template_{template_name}")],
            [InlineKeyboardButton("üé® Personalizar", callback_data=f"customize_template_{template_name}")],
            [InlineKeyboardButton("üîô Voltar", callback_data="scenario_templates_menu")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text=instructions,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def _show_quality_options(self, query, context: ContextTypes.DEFAULT_TYPE, quality_type: str):
        """Mostra op√ß√µes de qualidade"""
        if quality_type == "ultra":
            instructions = """
‚ö° **Qualidade Ultra:**

**Caracter√≠sticas:**
‚Ä¢ Processamento mais lento (2-3 minutos)
‚Ä¢ Qualidade m√°xima de face swap
‚Ä¢ Blending perfeito entre rostos
‚Ä¢ Detalhes preservados

**Recomendado para:**
‚Ä¢ Fotos profissionais
‚Ä¢ Resultados de alta qualidade
‚Ä¢ Quando tempo n√£o √© cr√≠tico
            """
        else:  # fast
            instructions = """
üöÄ **Processamento R√°pido:**

**Caracter√≠sticas:**
‚Ä¢ Processamento r√°pido (30-60 segundos)
‚Ä¢ Qualidade boa
‚Ä¢ Ideal para testes
‚Ä¢ Menos recursos utilizados

**Recomendado para:**
‚Ä¢ Testes r√°pidos
‚Ä¢ Quando tempo √© cr√≠tico
‚Ä¢ M√∫ltiplas tentativas
            """
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ Confirmar", callback_data=f"confirm_{quality_type}")],
            [InlineKeyboardButton("üîô Voltar", callback_data="face_swap_menu")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text=instructions,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def _show_quality_analysis(self, query, context: ContextTypes.DEFAULT_TYPE):
        """Mostra an√°lise de qualidade"""
        instructions = """
üìä **An√°lise de Qualidade do Face Swap:**

**Fatores Analisados:**
‚Ä¢ Detec√ß√£o de rostos (0-1.0)
‚Ä¢ Alinhamento facial (0-1.0)
‚Ä¢ Ilumina√ß√£o (0-1.0)
‚Ä¢ Resolu√ß√£o da imagem (0-1.0)
‚Ä¢ Pose do rosto (0-1.0)

**Score Final:**
‚Ä¢ 0.9-1.0: Excelente ‚úÖ
‚Ä¢ 0.8-0.9: Muito bom ‚úÖ
‚Ä¢ 0.7-0.8: Bom ‚ö†Ô∏è
‚Ä¢ 0.6-0.7: Regular ‚ö†Ô∏è
‚Ä¢ <0.6: Baixo ‚ùå

**Como melhorar:**
‚Ä¢ Use fotos com boa ilumina√ß√£o
‚Ä¢ Certifique-se de que o rosto est√° bem vis√≠vel
‚Ä¢ Evite √¢ngulos muito extremos
‚Ä¢ Use resolu√ß√£o m√≠nima de 512x512 pixels
        """
        
        keyboard = [
            [InlineKeyboardButton("üîç Analisar Imagem", callback_data="analyze_current_image")],
            [InlineKeyboardButton("üìä Ver Hist√≥rico", callback_data="view_quality_history")],
            [InlineKeyboardButton("üîô Voltar", callback_data="face_swap_menu")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text=instructions,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def _show_try_swap_faces(self, query, context: ContextTypes.DEFAULT_TYPE):
        """Inicia processo de face swap"""
        instructions = """
üîÑ **Iniciando Face Swap:**

**Passo 1:** Envie a primeira imagem (rosto fonte)
**Passo 2:** Aguarde confirma√ß√£o
**Passo 3:** Envie a segunda imagem (rosto destino)
**Passo 4:** Receba o resultado

**Dicas para melhor resultado:**
‚Ä¢ Use fotos com boa ilumina√ß√£o
‚Ä¢ Rostos devem estar bem vis√≠veis
‚Ä¢ Evite √¢ngulos muito extremos
‚Ä¢ Qualidade m√≠nima: 512x512 pixels

**Status:** Aguardando primeira imagem...
        """
        
        keyboard = [
            [InlineKeyboardButton("üì∏ Enviar Primeira Imagem", callback_data="send_first_image")],
            [InlineKeyboardButton("‚ùå Cancelar", callback_data="cancel_swap")],
            [InlineKeyboardButton("üîô Voltar", callback_data="face_swap_menu")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text=instructions,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def _show_swap_examples(self, query, context: ContextTypes.DEFAULT_TYPE):
        """Mostra exemplos de face swap"""
        instructions = """
üìä **Exemplos de Face Swap:**

**Exemplo 1: Troca B√°sica**
‚Ä¢ Rosto A: Foto frontal, boa ilumina√ß√£o
‚Ä¢ Rosto B: Foto frontal, boa ilumina√ß√£o
‚Ä¢ Resultado: Troca perfeita ‚úÖ

**Exemplo 2: Qualidade Ultra**
‚Ä¢ Rosto A: Foto profissional, alta resolu√ß√£o
‚Ä¢ Rosto B: Foto profissional, alta resolu√ß√£o
‚Ä¢ Resultado: Qualidade m√°xima ‚ö°

**Exemplo 3: Processamento R√°pido**
‚Ä¢ Rosto A: Foto simples, resolu√ß√£o m√©dia
‚Ä¢ Rosto B: Foto simples, resolu√ß√£o m√©dia
‚Ä¢ Resultado: Processamento r√°pido üöÄ

**Dicas dos Exemplos:**
‚Ä¢ Fotos frontais funcionam melhor
‚Ä¢ Boa ilumina√ß√£o √© essencial
‚Ä¢ Resolu√ß√£o alta melhora qualidade
‚Ä¢ Evite fotos com √≥culos ou acess√≥rios
        """
        
        keyboard = [
            [InlineKeyboardButton("üîÑ Tentar Agora", callback_data="try_swap_faces")],
            [InlineKeyboardButton("üìä An√°lise de Qualidade", callback_data="quality_analysis")],
            [InlineKeyboardButton("üîô Voltar", callback_data="face_swap_menu")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text=instructions,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def _show_choose_style(self, query, context: ContextTypes.DEFAULT_TYPE):
        """Mostra op√ß√µes de estilo"""
        instructions = """
üé® **Escolher Estilo:**

**Estilos Dispon√≠veis:**
‚Ä¢ **Realista** - Realismo fotogr√°fico
‚Ä¢ **Fantasia** - Estilo m√°gico e et√©reo
‚Ä¢ **Cyberpunk** - Futurista com neon
‚Ä¢ **Vintage** - Estilo retr√¥ e nost√°lgico
‚Ä¢ **Art√≠stico** - Pintura cl√°ssica

**Como usar:**
1. Escolha o estilo desejado
2. Envie uma foto com rosto
3. Receba resultado com estilo aplicado

**Recomenda√ß√µes:**
‚Ä¢ Realista: Para fotos profissionais
‚Ä¢ Fantasia: Para arte conceitual
‚Ä¢ Cyberpunk: Para temas futuristas
‚Ä¢ Vintage: Para nostalgia
‚Ä¢ Art√≠stico: Para pinturas
        """
        
        keyboard = [
            [InlineKeyboardButton("üì∏ Realista", callback_data="realistic_style")],
            [InlineKeyboardButton("‚ú® Fantasia", callback_data="fantasy_style")],
            [InlineKeyboardButton("üöÄ Cyberpunk", callback_data="cyberpunk_style")],
            [InlineKeyboardButton("üì∏ Vintage", callback_data="vintage_style")],
            [InlineKeyboardButton("üé® Art√≠stico", callback_data="artistic_style")],
            [InlineKeyboardButton("üîô Voltar", callback_data="face_scenario_menu")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text=instructions,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def _use_template(self, query, context: ContextTypes.DEFAULT_TYPE, template_name: str):
        """Usa template espec√≠fico"""
        template_info = self.scenario_generator.get_template_info(template_name)
        
        if not template_info:
            await query.answer("Template n√£o encontrado!")
            return
        
        emoji = self._get_template_emoji(template_name)
        
        instructions = f"""
{emoji} **Usando Template: {template_name.title()}**

**Template Aplicado:**
‚Ä¢ **Descri√ß√£o:** {template_info['prompt']}
‚Ä¢ **Estilo:** {template_info['style']}
‚Ä¢ **Qualidade:** {template_info['guidance_scale']}/10

**Como usar:**
1. Envie uma foto com rosto
2. O template ser√° aplicado automaticamente
3. Receba resultado com seu rosto no cen√°rio

**Status:** Aguardando foto com rosto...
        """
        
        keyboard = [
            [InlineKeyboardButton(f"{emoji} Aplicar Template", callback_data=f"apply_template_{template_name}")],
            [InlineKeyboardButton("üé® Personalizar", callback_data=f"customize_template_{template_name}")],
            [InlineKeyboardButton("üîô Voltar", callback_data="scenario_templates_menu")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text=instructions,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def _customize_template(self, query, context: ContextTypes.DEFAULT_TYPE, template_name: str):
        """Personaliza template"""
        template_info = self.scenario_generator.get_template_info(template_name)
        
        if not template_info:
            await query.answer("Template n√£o encontrado!")
            return
        
        emoji = self._get_template_emoji(template_name)
        
        instructions = f"""
üé® **Personalizar Template: {template_name.title()}**

**Template Base:**
‚Ä¢ **Descri√ß√£o:** {template_info['prompt']}
‚Ä¢ **Estilo:** {template_info['style']}

**Personaliza√ß√µes Dispon√≠veis:**
‚Ä¢ **Ilumina√ß√£o:** Manh√£, Tarde, Noite
‚Ä¢ **Clima:** Ensolarado, Nublado, Chuvoso
‚Ä¢ **Cores:** Quentes, Frias, Neutras
‚Ä¢ **Atmosfera:** Alegre, Melanc√≥lica, Dram√°tica

**Como personalizar:**
1. Escolha as op√ß√µes desejadas
2. Envie uma foto com rosto
3. Receba resultado personalizado
        """
        
        keyboard = [
            [InlineKeyboardButton("‚òÄÔ∏è Ilumina√ß√£o", callback_data=f"customize_lighting_{template_name}")],
            [InlineKeyboardButton("üå§Ô∏è Clima", callback_data=f"customize_weather_{template_name}")],
            [InlineKeyboardButton("üé® Cores", callback_data=f"customize_colors_{template_name}")],
            [InlineKeyboardButton("üé≠ Atmosfera", callback_data=f"customize_mood_{template_name}")],
            [InlineKeyboardButton("üîô Voltar", callback_data=f"template_{template_name}")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text=instructions,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def _confirm_quality(self, query, context: ContextTypes.DEFAULT_TYPE, quality_type: str):
        """Confirma qualidade selecionada"""
        if quality_type == "ultra":
            instructions = """
‚ö° **Qualidade Ultra Confirmada!**

**Configura√ß√µes Aplicadas:**
‚Ä¢ Processamento: Ultra (2-3 minutos)
‚Ä¢ Qualidade: M√°xima
‚Ä¢ Blending: Perfeito
‚Ä¢ Detalhes: Preservados

**Pr√≥ximos passos:**
1. Envie a primeira imagem (rosto fonte)
2. Aguarde confirma√ß√£o
3. Envie a segunda imagem (rosto destino)
4. Receba resultado com qualidade ultra

**Status:** Aguardando primeira imagem...
            """
        else:  # fast
            instructions = """
üöÄ **Processamento R√°pido Confirmado!**

**Configura√ß√µes Aplicadas:**
‚Ä¢ Processamento: R√°pido (30-60 segundos)
‚Ä¢ Qualidade: Boa
‚Ä¢ Recursos: Otimizados
‚Ä¢ Ideal para: Testes r√°pidos

**Pr√≥ximos passos:**
1. Envie a primeira imagem (rosto fonte)
2. Aguarde confirma√ß√£o
3. Envie a segunda imagem (rosto destino)
4. Receba resultado rapidamente

**Status:** Aguardando primeira imagem...
            """
        
        keyboard = [
            [InlineKeyboardButton("üì∏ Enviar Primeira Imagem", callback_data="send_first_image")],
            [InlineKeyboardButton("‚ùå Cancelar", callback_data="cancel_swap")],
            [InlineKeyboardButton("üîô Voltar", callback_data="face_swap_menu")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text=instructions,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def _apply_style(self, query, context: ContextTypes.DEFAULT_TYPE, style: str):
        """Aplica estilo espec√≠fico"""
        style_info = {
            "realistic": "üì∏ Realismo fotogr√°fico com alta qualidade",
            "fantasy": "‚ú® Estilo m√°gico e et√©reo",
            "cyberpunk": "üöÄ Futurista com neon e tecnologia",
            "vintage": "üì∏ Estilo retr√¥ e nost√°lgico",
            "anime": "üé≠ Estilo anime/mang√°",
            "painting": "üñºÔ∏è Estilo pintura cl√°ssica",
            "photographic": "üì∏ Estilo fotogr√°fico profissional",
            "cartoon": "üé™ Desenho animado",
            "surreal": "üåü Estilo surrealista"
        }
        
        description = style_info.get(style, f"Estilo {style}")
        
        instructions = f"""
üé® **Estilo {style.title()} Aplicado!**

**Descri√ß√£o:** {description}

**Como usar:**
1. Envie uma foto com rosto
2. O estilo ser√° aplicado automaticamente
3. Receba resultado com estilo {style}

**Status:** Aguardando foto com rosto...
        """
        
        keyboard = [
            [InlineKeyboardButton(f"üé® Aplicar {style.title()}", callback_data=f"apply_style_{style}")],
            [InlineKeyboardButton("üîô Voltar", callback_data="artistic_styles_menu")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text=instructions,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

# Inst√¢ncia global
image_generation_ui = ImageGenerationUI()
